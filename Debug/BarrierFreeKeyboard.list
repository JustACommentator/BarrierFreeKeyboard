
BarrierFreeKeyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c780  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800c920  0800c920  0001c920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb00  0800cb00  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb00  0800cb00  0001cb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb08  0800cb08  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb08  0800cb08  0001cb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800cb10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000557c  200002d4  0800cde4  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005850  0800cde4  00025850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021628  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aec  00000000  00000000  0004192c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00046418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001898  00000000  00000000  00047ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006f7d  00000000  00000000  00049740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f179  00000000  00000000  000506bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7156  00000000  00000000  0006f836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011698c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007544  00000000  00000000  001169dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d4 	.word	0x200002d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c908 	.word	0x0800c908

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d8 	.word	0x200002d8
 80001dc:	0800c908 	.word	0x0800c908

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_uldivmod>:
 8000b08:	b953      	cbnz	r3, 8000b20 <__aeabi_uldivmod+0x18>
 8000b0a:	b94a      	cbnz	r2, 8000b20 <__aeabi_uldivmod+0x18>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bf08      	it	eq
 8000b10:	2800      	cmpeq	r0, #0
 8000b12:	bf1c      	itt	ne
 8000b14:	f04f 31ff 	movne.w	r1, #4294967295
 8000b18:	f04f 30ff 	movne.w	r0, #4294967295
 8000b1c:	f000 b974 	b.w	8000e08 <__aeabi_idiv0>
 8000b20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b28:	f000 f806 	bl	8000b38 <__udivmoddi4>
 8000b2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b34:	b004      	add	sp, #16
 8000b36:	4770      	bx	lr

08000b38 <__udivmoddi4>:
 8000b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b3c:	9d08      	ldr	r5, [sp, #32]
 8000b3e:	4604      	mov	r4, r0
 8000b40:	468e      	mov	lr, r1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d14d      	bne.n	8000be2 <__udivmoddi4+0xaa>
 8000b46:	428a      	cmp	r2, r1
 8000b48:	4694      	mov	ip, r2
 8000b4a:	d969      	bls.n	8000c20 <__udivmoddi4+0xe8>
 8000b4c:	fab2 f282 	clz	r2, r2
 8000b50:	b152      	cbz	r2, 8000b68 <__udivmoddi4+0x30>
 8000b52:	fa01 f302 	lsl.w	r3, r1, r2
 8000b56:	f1c2 0120 	rsb	r1, r2, #32
 8000b5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b62:	ea41 0e03 	orr.w	lr, r1, r3
 8000b66:	4094      	lsls	r4, r2
 8000b68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b6c:	0c21      	lsrs	r1, r4, #16
 8000b6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b72:	fa1f f78c 	uxth.w	r7, ip
 8000b76:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7e:	fb06 f107 	mul.w	r1, r6, r7
 8000b82:	4299      	cmp	r1, r3
 8000b84:	d90a      	bls.n	8000b9c <__udivmoddi4+0x64>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8e:	f080 811f 	bcs.w	8000dd0 <__udivmoddi4+0x298>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 811c 	bls.w	8000dd0 <__udivmoddi4+0x298>
 8000b98:	3e02      	subs	r6, #2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 f707 	mul.w	r7, r0, r7
 8000bb0:	42a7      	cmp	r7, r4
 8000bb2:	d90a      	bls.n	8000bca <__udivmoddi4+0x92>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbc:	f080 810a 	bcs.w	8000dd4 <__udivmoddi4+0x29c>
 8000bc0:	42a7      	cmp	r7, r4
 8000bc2:	f240 8107 	bls.w	8000dd4 <__udivmoddi4+0x29c>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bce:	1be4      	subs	r4, r4, r7
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	b11d      	cbz	r5, 8000bdc <__udivmoddi4+0xa4>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bdc:	4631      	mov	r1, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xc2>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	f000 80ef 	beq.w	8000dca <__udivmoddi4+0x292>
 8000bec:	2600      	movs	r6, #0
 8000bee:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f683 	clz	r6, r3
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d14a      	bne.n	8000c98 <__udivmoddi4+0x160>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd4>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80f9 	bhi.w	8000dfe <__udivmoddi4+0x2c6>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	469e      	mov	lr, r3
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa4>
 8000c1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa4>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xec>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 8092 	bne.w	8000d52 <__udivmoddi4+0x21a>
 8000c2e:	eba1 010c 	sub.w	r1, r1, ip
 8000c32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c36:	fa1f fe8c 	uxth.w	lr, ip
 8000c3a:	2601      	movs	r6, #1
 8000c3c:	0c20      	lsrs	r0, r4, #16
 8000c3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c42:	fb07 1113 	mls	r1, r7, r3, r1
 8000c46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4a:	fb0e f003 	mul.w	r0, lr, r3
 8000c4e:	4288      	cmp	r0, r1
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x12c>
 8000c52:	eb1c 0101 	adds.w	r1, ip, r1
 8000c56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x12a>
 8000c5c:	4288      	cmp	r0, r1
 8000c5e:	f200 80cb 	bhi.w	8000df8 <__udivmoddi4+0x2c0>
 8000c62:	4643      	mov	r3, r8
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c74:	fb0e fe00 	mul.w	lr, lr, r0
 8000c78:	45a6      	cmp	lr, r4
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x156>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c84:	d202      	bcs.n	8000c8c <__udivmoddi4+0x154>
 8000c86:	45a6      	cmp	lr, r4
 8000c88:	f200 80bb 	bhi.w	8000e02 <__udivmoddi4+0x2ca>
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c96:	e79c      	b.n	8000bd2 <__udivmoddi4+0x9a>
 8000c98:	f1c6 0720 	rsb	r7, r6, #32
 8000c9c:	40b3      	lsls	r3, r6
 8000c9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca6:	fa20 f407 	lsr.w	r4, r0, r7
 8000caa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cae:	431c      	orrs	r4, r3
 8000cb0:	40f9      	lsrs	r1, r7
 8000cb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb6:	fa00 f306 	lsl.w	r3, r0, r6
 8000cba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cbe:	0c20      	lsrs	r0, r4, #16
 8000cc0:	fa1f fe8c 	uxth.w	lr, ip
 8000cc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ccc:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd6:	d90b      	bls.n	8000cf0 <__udivmoddi4+0x1b8>
 8000cd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cdc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce0:	f080 8088 	bcs.w	8000df4 <__udivmoddi4+0x2bc>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f240 8085 	bls.w	8000df4 <__udivmoddi4+0x2bc>
 8000cea:	f1a8 0802 	sub.w	r8, r8, #2
 8000cee:	4461      	add	r1, ip
 8000cf0:	1a09      	subs	r1, r1, r0
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf8:	fb09 1110 	mls	r1, r9, r0, r1
 8000cfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d04:	458e      	cmp	lr, r1
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x1e2>
 8000d08:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d10:	d26c      	bcs.n	8000dec <__udivmoddi4+0x2b4>
 8000d12:	458e      	cmp	lr, r1
 8000d14:	d96a      	bls.n	8000dec <__udivmoddi4+0x2b4>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4461      	add	r1, ip
 8000d1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d22:	eba1 010e 	sub.w	r1, r1, lr
 8000d26:	42a1      	cmp	r1, r4
 8000d28:	46c8      	mov	r8, r9
 8000d2a:	46a6      	mov	lr, r4
 8000d2c:	d356      	bcc.n	8000ddc <__udivmoddi4+0x2a4>
 8000d2e:	d053      	beq.n	8000dd8 <__udivmoddi4+0x2a0>
 8000d30:	b15d      	cbz	r5, 8000d4a <__udivmoddi4+0x212>
 8000d32:	ebb3 0208 	subs.w	r2, r3, r8
 8000d36:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d42:	40f1      	lsrs	r1, r6
 8000d44:	431f      	orrs	r7, r3
 8000d46:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	40d8      	lsrs	r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d60:	4091      	lsls	r1, r2
 8000d62:	4301      	orrs	r1, r0
 8000d64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d68:	fa1f fe8c 	uxth.w	lr, ip
 8000d6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d70:	fb07 3610 	mls	r6, r7, r0, r3
 8000d74:	0c0b      	lsrs	r3, r1, #16
 8000d76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d7e:	429e      	cmp	r6, r3
 8000d80:	fa04 f402 	lsl.w	r4, r4, r2
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x260>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8e:	d22f      	bcs.n	8000df0 <__udivmoddi4+0x2b8>
 8000d90:	429e      	cmp	r6, r3
 8000d92:	d92d      	bls.n	8000df0 <__udivmoddi4+0x2b8>
 8000d94:	3802      	subs	r0, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1b9b      	subs	r3, r3, r6
 8000d9a:	b289      	uxth	r1, r1
 8000d9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da0:	fb07 3316 	mls	r3, r7, r6, r3
 8000da4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x28a>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db8:	d216      	bcs.n	8000de8 <__udivmoddi4+0x2b0>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d914      	bls.n	8000de8 <__udivmoddi4+0x2b0>
 8000dbe:	3e02      	subs	r6, #2
 8000dc0:	4461      	add	r1, ip
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc8:	e738      	b.n	8000c3c <__udivmoddi4+0x104>
 8000dca:	462e      	mov	r6, r5
 8000dcc:	4628      	mov	r0, r5
 8000dce:	e705      	b.n	8000bdc <__udivmoddi4+0xa4>
 8000dd0:	4606      	mov	r6, r0
 8000dd2:	e6e3      	b.n	8000b9c <__udivmoddi4+0x64>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6f8      	b.n	8000bca <__udivmoddi4+0x92>
 8000dd8:	454b      	cmp	r3, r9
 8000dda:	d2a9      	bcs.n	8000d30 <__udivmoddi4+0x1f8>
 8000ddc:	ebb9 0802 	subs.w	r8, r9, r2
 8000de0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de4:	3801      	subs	r0, #1
 8000de6:	e7a3      	b.n	8000d30 <__udivmoddi4+0x1f8>
 8000de8:	4646      	mov	r6, r8
 8000dea:	e7ea      	b.n	8000dc2 <__udivmoddi4+0x28a>
 8000dec:	4620      	mov	r0, r4
 8000dee:	e794      	b.n	8000d1a <__udivmoddi4+0x1e2>
 8000df0:	4640      	mov	r0, r8
 8000df2:	e7d1      	b.n	8000d98 <__udivmoddi4+0x260>
 8000df4:	46d0      	mov	r8, sl
 8000df6:	e77b      	b.n	8000cf0 <__udivmoddi4+0x1b8>
 8000df8:	3b02      	subs	r3, #2
 8000dfa:	4461      	add	r1, ip
 8000dfc:	e732      	b.n	8000c64 <__udivmoddi4+0x12c>
 8000dfe:	4630      	mov	r0, r6
 8000e00:	e709      	b.n	8000c16 <__udivmoddi4+0xde>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e742      	b.n	8000c8e <__udivmoddi4+0x156>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	keyboard_report.reportId = 0x01;
 8000e10:	4b2e      	ldr	r3, [pc, #184]	; (8000ecc <main+0xc0>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
	mouse_report.reportId = 0x02;
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <main+0xc4>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	701a      	strb	r2, [r3, #0]

	mouse_report.BTN_MousePointerButton1 = 0;
 8000e1c:	4a2c      	ldr	r2, [pc, #176]	; (8000ed0 <main+0xc4>)
 8000e1e:	7853      	ldrb	r3, [r2, #1]
 8000e20:	f36f 0300 	bfc	r3, #0, #1
 8000e24:	7053      	strb	r3, [r2, #1]
	mouse_report.BTN_MousePointerButton2 = 0;
 8000e26:	4a2a      	ldr	r2, [pc, #168]	; (8000ed0 <main+0xc4>)
 8000e28:	7853      	ldrb	r3, [r2, #1]
 8000e2a:	f36f 0341 	bfc	r3, #1, #1
 8000e2e:	7053      	strb	r3, [r2, #1]
	mouse_report.BTN_MousePointerButton3 = 0;
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <main+0xc4>)
 8000e32:	7853      	ldrb	r3, [r2, #1]
 8000e34:	f36f 0382 	bfc	r3, #2, #1
 8000e38:	7053      	strb	r3, [r2, #1]
	mouse_report.GD_MousePointerWheel = 0;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <main+0xc4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	711a      	strb	r2, [r3, #4]
	mouse_report.GD_MousePointerX = 0;
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <main+0xc4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	709a      	strb	r2, [r3, #2]
	mouse_report.GD_MousePointerY = 0;
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <main+0xc4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	70da      	strb	r2, [r3, #3]

	zoneSize = 360 / numberOfZones;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <main+0xc8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000e54:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <main+0xcc>)
 8000e62:	edc3 7a00 	vstr	s15, [r3]
	initializeDictionary();
 8000e66:	f000 f9a9 	bl	80011bc <initializeDictionary>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6a:	f000 fef9 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6e:	f000 f84d 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e72:	f000 f951 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e76:	f000 f92f 	bl	80010d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e7a:	f000 f8af 	bl	8000fdc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e7e:	f007 fe01 	bl	8008a84 <osKernelInitialize>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of capitalTimer */
  capitalTimerHandle = osTimerNew(capitalTimerCallback, osTimerOnce, NULL, &capitalTimer_attributes);
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <main+0xd0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <main+0xd4>)
 8000e8a:	f007 ff07 	bl	8008c9c <osTimerNew>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <main+0xd8>)
 8000e92:	6013      	str	r3, [r2, #0]

  /* creation of modeTimer */
  modeTimerHandle = osTimerNew(modeTimerCallback, osTimerOnce, NULL, &modeTimer_attributes);
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <main+0xdc>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <main+0xe0>)
 8000e9c:	f007 fefe 	bl	8008c9c <osTimerNew>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <main+0xe4>)
 8000ea4:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartPolling */
  StartPollingHandle = osThreadNew(StarPollingTask, NULL, &StartPolling_attributes);
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <main+0xe8>)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <main+0xec>)
 8000eac:	f007 fe34 	bl	8008b18 <osThreadNew>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <main+0xf0>)
 8000eb4:	6013      	str	r3, [r2, #0]

  /* creation of InputProcessing */
  InputProcessingHandle = osThreadNew(StartInputProcessing, NULL, &InputProcessing_attributes);
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <main+0xf4>)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4812      	ldr	r0, [pc, #72]	; (8000f04 <main+0xf8>)
 8000ebc:	f007 fe2c 	bl	8008b18 <osThreadNew>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <main+0xfc>)
 8000ec4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ec6:	f007 fe01 	bl	8008acc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000eca:	e7fe      	b.n	8000eca <main+0xbe>
 8000ecc:	200002f0 	.word	0x200002f0
 8000ed0:	200002f8 	.word	0x200002f8
 8000ed4:	20000014 	.word	0x20000014
 8000ed8:	200003d4 	.word	0x200003d4
 8000edc:	0800ca1c 	.word	0x0800ca1c
 8000ee0:	080018a1 	.word	0x080018a1
 8000ee4:	200003b0 	.word	0x200003b0
 8000ee8:	0800ca2c 	.word	0x0800ca2c
 8000eec:	080018e9 	.word	0x080018e9
 8000ef0:	200003b4 	.word	0x200003b4
 8000ef4:	0800c9d4 	.word	0x0800c9d4
 8000ef8:	080017b1 	.word	0x080017b1
 8000efc:	200003a8 	.word	0x200003a8
 8000f00:	0800c9f8 	.word	0x0800c9f8
 8000f04:	08001841 	.word	0x08001841
 8000f08:	200003ac 	.word	0x200003ac

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	; 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00b f9a0 	bl	800c260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <SystemClock_Config+0xc8>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <SystemClock_Config+0xc8>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <SystemClock_Config+0xc8>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f7c:	2319      	movs	r3, #25
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f80:	23c0      	movs	r3, #192	; 0xc0
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0320 	add.w	r3, r7, #32
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fb31 	bl	80045f8 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f9c:	f000 fcd6 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2103      	movs	r1, #3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fd93 	bl	8004ae8 <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fc8:	f000 fcc0 	bl	800194c <Error_Handler>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3750      	adds	r7, #80	; 0x50
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000

08000fdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <MX_ADC1_Init+0xf0>)
 8000ff0:	4a37      	ldr	r2, [pc, #220]	; (80010d0 <MX_ADC1_Init+0xf4>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <MX_ADC1_Init+0xf0>)
 8000ff6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ffa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000ffc:	4b33      	ldr	r3, [pc, #204]	; (80010cc <MX_ADC1_Init+0xf0>)
 8000ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001002:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <MX_ADC1_Init+0xf0>)
 8001006:	2201      	movs	r2, #1
 8001008:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <MX_ADC1_Init+0xf0>)
 800100c:	2200      	movs	r2, #0
 800100e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <MX_ADC1_Init+0xf0>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <MX_ADC1_Init+0xf0>)
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <MX_ADC1_Init+0xf0>)
 8001020:	4a2c      	ldr	r2, [pc, #176]	; (80010d4 <MX_ADC1_Init+0xf8>)
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <MX_ADC1_Init+0xf0>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <MX_ADC1_Init+0xf0>)
 800102c:	2204      	movs	r2, #4
 800102e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <MX_ADC1_Init+0xf0>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <MX_ADC1_Init+0xf0>)
 800103a:	2201      	movs	r2, #1
 800103c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103e:	4823      	ldr	r0, [pc, #140]	; (80010cc <MX_ADC1_Init+0xf0>)
 8001040:	f000 fe74 	bl	8001d2c <HAL_ADC_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800104a:	f000 fc7f 	bl	800194c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001056:	2307      	movs	r3, #7
 8001058:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	481b      	ldr	r0, [pc, #108]	; (80010cc <MX_ADC1_Init+0xf0>)
 8001060:	f000 ffac 	bl	8001fbc <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800106a:	f000 fc6f 	bl	800194c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800106e:	2301      	movs	r3, #1
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	4814      	ldr	r0, [pc, #80]	; (80010cc <MX_ADC1_Init+0xf0>)
 800107c:	f000 ff9e 	bl	8001fbc <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001086:	f000 fc61 	bl	800194c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800108a:	2302      	movs	r3, #2
 800108c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800108e:	2303      	movs	r3, #3
 8001090:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_ADC1_Init+0xf0>)
 8001098:	f000 ff90 	bl	8001fbc <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80010a2:	f000 fc53 	bl	800194c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010a6:	2303      	movs	r3, #3
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010aa:	2304      	movs	r3, #4
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_ADC1_Init+0xf0>)
 80010b4:	f000 ff82 	bl	8001fbc <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80010be:	f000 fc45 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000300 	.word	0x20000300
 80010d0:	40012000 	.word	0x40012000
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_DMA_Init+0x3c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <MX_DMA_Init+0x3c>)
 80010e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_DMA_Init+0x3c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2105      	movs	r1, #5
 80010fe:	2038      	movs	r0, #56	; 0x38
 8001100:	f001 fac4 	bl	800268c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001104:	2038      	movs	r0, #56	; 0x38
 8001106:	f001 fadd 	bl	80026c4 <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <MX_GPIO_Init+0x9c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a1f      	ldr	r2, [pc, #124]	; (80011b4 <MX_GPIO_Init+0x9c>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_GPIO_Init+0x9c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_GPIO_Init+0x9c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <MX_GPIO_Init+0x9c>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_GPIO_Init+0x9c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_GPIO_Init+0x9c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <MX_GPIO_Init+0x9c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_GPIO_Init+0x9c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <MX_GPIO_Init+0xa0>)
 800118a:	f001 ff9d 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800118e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	4619      	mov	r1, r3
 80011a6:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_GPIO_Init+0xa0>)
 80011a8:	f001 fe0a 	bl	8002dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020800 	.word	0x40020800

080011bc <initializeDictionary>:

/* USER CODE BEGIN 4 */

void initializeDictionary() {
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
	// for config file reading
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <sendCharacter>:

void sendCharacter(int keycode, int modifier) { //only supports shift as modifier for now
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
//	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report, sizeof(MouseReport_t));
//	osDelay(500);

	keyboard_report.KB_KeyboardKeyboardLeftShift = modifier;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	b2d9      	uxtb	r1, r3
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <sendCharacter+0x5c>)
 80011e0:	7853      	ldrb	r3, [r2, #1]
 80011e2:	f361 0341 	bfi	r3, r1, #1, #1
 80011e6:	7053      	strb	r3, [r2, #1]
	keyboard_report.Keyboard[0] = keycode;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <sendCharacter+0x5c>)
 80011ee:	70da      	strb	r2, [r3, #3]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboard_report,
 80011f0:	2205      	movs	r2, #5
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <sendCharacter+0x5c>)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <sendCharacter+0x60>)
 80011f6:	f005 ff81 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
			sizeof(KeyboardReport_t));
	osDelay(25);
 80011fa:	2019      	movs	r0, #25
 80011fc:	f007 fd1e 	bl	8008c3c <osDelay>

	keyboard_report.KB_KeyboardKeyboardLeftShift = 0;
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <sendCharacter+0x5c>)
 8001202:	7853      	ldrb	r3, [r2, #1]
 8001204:	f36f 0341 	bfc	r3, #1, #1
 8001208:	7053      	strb	r3, [r2, #1]
	keyboard_report.Keyboard[0] = 0x00;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <sendCharacter+0x5c>)
 800120c:	2200      	movs	r2, #0
 800120e:	70da      	strb	r2, [r3, #3]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboard_report,
 8001210:	2205      	movs	r2, #5
 8001212:	4905      	ldr	r1, [pc, #20]	; (8001228 <sendCharacter+0x5c>)
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <sendCharacter+0x60>)
 8001216:	f005 ff71 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
			sizeof(KeyboardReport_t));
	osDelay(50);
 800121a:	2032      	movs	r0, #50	; 0x32
 800121c:	f007 fd0e 	bl	8008c3c <osDelay>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200002f0 	.word	0x200002f0
 800122c:	20004e44 	.word	0x20004e44

08001230 <sendMouse>:

void sendMouse() {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

	int X = adcResultsDMA[2] - 127;
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <sendMouse+0x80>)
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	b29b      	uxth	r3, r3
 800123c:	3b7f      	subs	r3, #127	; 0x7f
 800123e:	607b      	str	r3, [r7, #4]
	int Y = -(adcResultsDMA[3] - 127);
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <sendMouse+0x80>)
 8001242:	88db      	ldrh	r3, [r3, #6]
 8001244:	b29b      	uxth	r3, r3
 8001246:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800124a:	603b      	str	r3, [r7, #0]

	mouse_report.GD_MousePointerX = 0;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <sendMouse+0x84>)
 800124e:	2200      	movs	r2, #0
 8001250:	709a      	strb	r2, [r3, #2]
	mouse_report.GD_MousePointerY = 0;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <sendMouse+0x84>)
 8001254:	2200      	movs	r2, #0
 8001256:	70da      	strb	r2, [r3, #3]

	if (abs(X) > mouseThreshhold)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800125e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <sendMouse+0x88>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	dd07      	ble.n	800127a <sendMouse+0x4a>
		mouse_report.GD_MousePointerX = (X / 8);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	da00      	bge.n	8001272 <sendMouse+0x42>
 8001270:	3307      	adds	r3, #7
 8001272:	10db      	asrs	r3, r3, #3
 8001274:	b25a      	sxtb	r2, r3
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <sendMouse+0x84>)
 8001278:	709a      	strb	r2, [r3, #2]
	if (abs(Y) > mouseThreshhold)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001280:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <sendMouse+0x88>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	dd07      	ble.n	800129c <sendMouse+0x6c>
		mouse_report.GD_MousePointerY = (Y / 8);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da00      	bge.n	8001294 <sendMouse+0x64>
 8001292:	3307      	adds	r3, #7
 8001294:	10db      	asrs	r3, r3, #3
 8001296:	b25a      	sxtb	r2, r3
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <sendMouse+0x84>)
 800129a:	70da      	strb	r2, [r3, #3]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 800129c:	2205      	movs	r2, #5
 800129e:	4905      	ldr	r1, [pc, #20]	; (80012b4 <sendMouse+0x84>)
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <sendMouse+0x8c>)
 80012a2:	f005 ff2b 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
			sizeof(MouseReport_t));

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200003d8 	.word	0x200003d8
 80012b4:	200002f8 	.word	0x200002f8
 80012b8:	20000004 	.word	0x20000004
 80012bc:	20004e44 	.word	0x20004e44

080012c0 <sendMouseButtons>:

void sendMouseButtons(int left) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

	if (left == -1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ce:	d102      	bne.n	80012d6 <sendMouseButtons+0x16>
		buttonReset = true;
 80012d0:	4b55      	ldr	r3, [pc, #340]	; (8001428 <sendMouseButtons+0x168>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]

	if (buttonReset && left != -1) {
 80012d6:	4b54      	ldr	r3, [pc, #336]	; (8001428 <sendMouseButtons+0x168>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 809d 	beq.w	800141a <sendMouseButtons+0x15a>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e6:	f000 8098 	beq.w	800141a <sendMouseButtons+0x15a>
		buttonReset = false;
 80012ea:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <sendMouseButtons+0x168>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]

		switch (left) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	2b06      	cmp	r3, #6
 80012f6:	f200 8093 	bhi.w	8001420 <sendMouseButtons+0x160>
 80012fa:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <sendMouseButtons+0x40>)
 80012fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001300:	0800131d 	.word	0x0800131d
 8001304:	0800141f 	.word	0x0800141f
 8001308:	0800134d 	.word	0x0800134d
 800130c:	0800137d 	.word	0x0800137d
 8001310:	080013b7 	.word	0x080013b7
 8001314:	0800141f 	.word	0x0800141f
 8001318:	0800141f 	.word	0x0800141f
		case 1:
			mouse_report.BTN_MousePointerButton3 = 1;
 800131c:	4a43      	ldr	r2, [pc, #268]	; (800142c <sendMouseButtons+0x16c>)
 800131e:	7853      	ldrb	r3, [r2, #1]
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 8001326:	2205      	movs	r2, #5
 8001328:	4940      	ldr	r1, [pc, #256]	; (800142c <sendMouseButtons+0x16c>)
 800132a:	4841      	ldr	r0, [pc, #260]	; (8001430 <sendMouseButtons+0x170>)
 800132c:	f005 fee6 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			osDelay(25);
 8001330:	2019      	movs	r0, #25
 8001332:	f007 fc83 	bl	8008c3c <osDelay>
			mouse_report.BTN_MousePointerButton3 = 0;
 8001336:	4a3d      	ldr	r2, [pc, #244]	; (800142c <sendMouseButtons+0x16c>)
 8001338:	7853      	ldrb	r3, [r2, #1]
 800133a:	f36f 0382 	bfc	r3, #2, #1
 800133e:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 8001340:	2205      	movs	r2, #5
 8001342:	493a      	ldr	r1, [pc, #232]	; (800142c <sendMouseButtons+0x16c>)
 8001344:	483a      	ldr	r0, [pc, #232]	; (8001430 <sendMouseButtons+0x170>)
 8001346:	f005 fed9 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			break;
 800134a:	e069      	b.n	8001420 <sendMouseButtons+0x160>
		case 2:
			break;
		case 3:
			mouse_report.BTN_MousePointerButton2 = 1;
 800134c:	4a37      	ldr	r2, [pc, #220]	; (800142c <sendMouseButtons+0x16c>)
 800134e:	7853      	ldrb	r3, [r2, #1]
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 8001356:	2205      	movs	r2, #5
 8001358:	4934      	ldr	r1, [pc, #208]	; (800142c <sendMouseButtons+0x16c>)
 800135a:	4835      	ldr	r0, [pc, #212]	; (8001430 <sendMouseButtons+0x170>)
 800135c:	f005 fece 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			osDelay(25);
 8001360:	2019      	movs	r0, #25
 8001362:	f007 fc6b 	bl	8008c3c <osDelay>
			mouse_report.BTN_MousePointerButton2 = 0;
 8001366:	4a31      	ldr	r2, [pc, #196]	; (800142c <sendMouseButtons+0x16c>)
 8001368:	7853      	ldrb	r3, [r2, #1]
 800136a:	f36f 0341 	bfc	r3, #1, #1
 800136e:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 8001370:	2205      	movs	r2, #5
 8001372:	492e      	ldr	r1, [pc, #184]	; (800142c <sendMouseButtons+0x16c>)
 8001374:	482e      	ldr	r0, [pc, #184]	; (8001430 <sendMouseButtons+0x170>)
 8001376:	f005 fec1 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			break;
 800137a:	e051      	b.n	8001420 <sendMouseButtons+0x160>
		case 4:
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800137c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001380:	482c      	ldr	r0, [pc, #176]	; (8001434 <sendMouseButtons+0x174>)
 8001382:	f001 feba 	bl	80030fa <HAL_GPIO_TogglePin>
			mouse_report.BTN_MousePointerButton1 = 1;
 8001386:	4a29      	ldr	r2, [pc, #164]	; (800142c <sendMouseButtons+0x16c>)
 8001388:	7853      	ldrb	r3, [r2, #1]
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 8001390:	2205      	movs	r2, #5
 8001392:	4926      	ldr	r1, [pc, #152]	; (800142c <sendMouseButtons+0x16c>)
 8001394:	4826      	ldr	r0, [pc, #152]	; (8001430 <sendMouseButtons+0x170>)
 8001396:	f005 feb1 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			osDelay(25);
 800139a:	2019      	movs	r0, #25
 800139c:	f007 fc4e 	bl	8008c3c <osDelay>
			mouse_report.BTN_MousePointerButton1 = 0;
 80013a0:	4a22      	ldr	r2, [pc, #136]	; (800142c <sendMouseButtons+0x16c>)
 80013a2:	7853      	ldrb	r3, [r2, #1]
 80013a4:	f36f 0300 	bfc	r3, #0, #1
 80013a8:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 80013aa:	2205      	movs	r2, #5
 80013ac:	491f      	ldr	r1, [pc, #124]	; (800142c <sendMouseButtons+0x16c>)
 80013ae:	4820      	ldr	r0, [pc, #128]	; (8001430 <sendMouseButtons+0x170>)
 80013b0:	f005 fea4 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			break;
 80013b4:	e034      	b.n	8001420 <sendMouseButtons+0x160>
		case 5:
			mouse_report.BTN_MousePointerButton1 = 1;
 80013b6:	4a1d      	ldr	r2, [pc, #116]	; (800142c <sendMouseButtons+0x16c>)
 80013b8:	7853      	ldrb	r3, [r2, #1]
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 80013c0:	2205      	movs	r2, #5
 80013c2:	491a      	ldr	r1, [pc, #104]	; (800142c <sendMouseButtons+0x16c>)
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <sendMouseButtons+0x170>)
 80013c6:	f005 fe99 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			osDelay(25);
 80013ca:	2019      	movs	r0, #25
 80013cc:	f007 fc36 	bl	8008c3c <osDelay>
			mouse_report.BTN_MousePointerButton1 = 0;
 80013d0:	4a16      	ldr	r2, [pc, #88]	; (800142c <sendMouseButtons+0x16c>)
 80013d2:	7853      	ldrb	r3, [r2, #1]
 80013d4:	f36f 0300 	bfc	r3, #0, #1
 80013d8:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 80013da:	2205      	movs	r2, #5
 80013dc:	4913      	ldr	r1, [pc, #76]	; (800142c <sendMouseButtons+0x16c>)
 80013de:	4814      	ldr	r0, [pc, #80]	; (8001430 <sendMouseButtons+0x170>)
 80013e0:	f005 fe8c 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			osDelay(25);
 80013e4:	2019      	movs	r0, #25
 80013e6:	f007 fc29 	bl	8008c3c <osDelay>
			mouse_report.BTN_MousePointerButton1 = 1;
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <sendMouseButtons+0x16c>)
 80013ec:	7853      	ldrb	r3, [r2, #1]
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 80013f4:	2205      	movs	r2, #5
 80013f6:	490d      	ldr	r1, [pc, #52]	; (800142c <sendMouseButtons+0x16c>)
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <sendMouseButtons+0x170>)
 80013fa:	f005 fe7f 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			osDelay(25);
 80013fe:	2019      	movs	r0, #25
 8001400:	f007 fc1c 	bl	8008c3c <osDelay>
			mouse_report.BTN_MousePointerButton1 = 0;
 8001404:	4a09      	ldr	r2, [pc, #36]	; (800142c <sendMouseButtons+0x16c>)
 8001406:	7853      	ldrb	r3, [r2, #1]
 8001408:	f36f 0300 	bfc	r3, #0, #1
 800140c:	7053      	strb	r3, [r2, #1]
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &mouse_report,
 800140e:	2205      	movs	r2, #5
 8001410:	4906      	ldr	r1, [pc, #24]	; (800142c <sendMouseButtons+0x16c>)
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <sendMouseButtons+0x170>)
 8001414:	f005 fe72 	bl	80070fc <USBD_CUSTOM_HID_SendReport>
					sizeof(MouseReport_t));
			break;
 8001418:	e002      	b.n	8001420 <sendMouseButtons+0x160>
		case 6:
			break;
		case 7:
			break;
		}
	}
 800141a:	bf00      	nop
 800141c:	e000      	b.n	8001420 <sendMouseButtons+0x160>
			break;
 800141e:	bf00      	nop
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000003 	.word	0x20000003
 800142c:	200002f8 	.word	0x200002f8
 8001430:	20004e44 	.word	0x20004e44
 8001434:	40020c00 	.word	0x40020c00

08001438 <checkModeSwitch>:

void checkModeSwitch(int right, int left) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]

	if (!(left == 0 && right == -1))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d103      	bne.n	8001450 <checkModeSwitch+0x18>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144e:	d004      	beq.n	800145a <checkModeSwitch+0x22>
		osTimerStop(modeTimerHandle);
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <checkModeSwitch+0x78>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f007 fccb 	bl	8008df0 <osTimerStop>
	if (right == -1 && left == -1) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001460:	d10b      	bne.n	800147a <checkModeSwitch+0x42>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d107      	bne.n	800147a <checkModeSwitch+0x42>
		modeReset = true;
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <checkModeSwitch+0x7c>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
		osTimerStop(modeTimerHandle);
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <checkModeSwitch+0x78>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f007 fcbb 	bl	8008df0 <osTimerStop>
	}

	if ((left == 0 && right == -1) && modeReset) {
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d112      	bne.n	80014a6 <checkModeSwitch+0x6e>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001486:	d10e      	bne.n	80014a6 <checkModeSwitch+0x6e>
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <checkModeSwitch+0x7c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00a      	beq.n	80014a6 <checkModeSwitch+0x6e>
		modeReset = false;
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <checkModeSwitch+0x7c>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
		osTimerStart(modeTimerHandle, timeTilModeSwitch);
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <checkModeSwitch+0x78>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <checkModeSwitch+0x80>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f007 fc77 	bl	8008d94 <osTimerStart>
	}

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200003b4 	.word	0x200003b4
 80014b4:	20000001 	.word	0x20000001
 80014b8:	20000010 	.word	0x20000010

080014bc <getChar>:

void getChar(int right, int left) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]

	if (left == -1 || right == -1) {
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d003      	beq.n	80014d6 <getChar+0x1a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d108      	bne.n	80014e8 <getChar+0x2c>
		zoneReset = true;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <getChar+0x90>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
		osTimerStop(capitalTimerHandle);
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <getChar+0x94>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f007 fc85 	bl	8008df0 <osTimerStop>
		return;
 80014e6:	e02e      	b.n	8001546 <getChar+0x8a>
	}
	if ((left != -1 && right != -1) && zoneReset) {
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ee:	d02a      	beq.n	8001546 <getChar+0x8a>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f6:	d026      	beq.n	8001546 <getChar+0x8a>
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <getChar+0x90>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d022      	beq.n	8001546 <getChar+0x8a>
		currentKeycode = keycodeDict[zone1][zone2];
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <getChar+0x98>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <getChar+0x9c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4914      	ldr	r1, [pc, #80]	; (800155c <getChar+0xa0>)
 800150a:	00d2      	lsls	r2, r2, #3
 800150c:	4413      	add	r3, r2
 800150e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <getChar+0xa4>)
 8001514:	6013      	str	r3, [r2, #0]
		sendCharacter(keycodeDict[zone1][zone2], 0);
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <getChar+0x98>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <getChar+0x9c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	490f      	ldr	r1, [pc, #60]	; (800155c <getChar+0xa0>)
 8001520:	00d2      	lsls	r2, r2, #3
 8001522:	4413      	add	r3, r2
 8001524:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fe4e 	bl	80011cc <sendCharacter>
		zoneReset = false;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <getChar+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
		osTimerStart(capitalTimerHandle, timeTilCapital);
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <getChar+0x94>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <getChar+0xa8>)
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f007 fc27 	bl	8008d94 <osTimerStart>
	}
//	else if ((left == -1 && right == 4) && zoneReset) { //add Timer for this, else it'll get triggered by accident
//		sendCharacter(keyBackSpace, 0);
//		zoneReset = false;
//	}
}
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000000 	.word	0x20000000
 8001550:	200003b0 	.word	0x200003b0
 8001554:	200003c8 	.word	0x200003c8
 8001558:	200003cc 	.word	0x200003cc
 800155c:	2000001c 	.word	0x2000001c
 8001560:	200003d0 	.word	0x200003d0
 8001564:	2000000c 	.word	0x2000000c

08001568 <getAngleDist>:

void getAngleDist(int x, int y, int *resArr) {
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]

	if (y == 0) {
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d112      	bne.n	80015a0 <getAngleDist+0x38>
		if (x >= 0)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db03      	blt.n	8001588 <getAngleDist+0x20>
			resArr[0] = 90;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	225a      	movs	r2, #90	; 0x5a
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e003      	b.n	8001590 <getAngleDist+0x28>
		else
			resArr[0] = 270;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800158e:	601a      	str	r2, [r3, #0]

		resArr[1] = abs(x);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3304      	adds	r3, #4
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	2a00      	cmp	r2, #0
 8001598:	bfb8      	it	lt
 800159a:	4252      	neglt	r2, r2
 800159c:	601a      	str	r2, [r3, #0]

		return;
 800159e:	e0b3      	b.n	8001708 <getAngleDist+0x1a0>
	}

	if (y >= 0) {
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db63      	blt.n	800166e <getAngleDist+0x106>
		if (x >= 0) {
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db2b      	blt.n	8001604 <getAngleDist+0x9c>
			resArr[0] = (int) (atan(x / (float) y) * CDegConv);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015c4:	ee16 0a90 	vmov	r0, s13
 80015c8:	f7fe ff6e 	bl	80004a8 <__aeabi_f2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	ec43 2b10 	vmov	d0, r2, r3
 80015d4:	f00a ff10 	bl	800c3f8 <atan>
 80015d8:	ec55 4b10 	vmov	r4, r5, d0
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <getAngleDist+0x1a8>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff62 	bl	80004a8 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7fe ffb4 	bl	8000558 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa5e 	bl	8000ab8 <__aeabi_d2iz>
 80015fc:	4602      	mov	r2, r0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e068      	b.n	80016d6 <getAngleDist+0x16e>
		} else {
			resArr[0] = (int) (atan(x / (float) y) * CDegConv + 360);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001618:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800161c:	ee16 0a90 	vmov	r0, s13
 8001620:	f7fe ff42 	bl	80004a8 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	ec43 2b10 	vmov	d0, r2, r3
 800162c:	f00a fee4 	bl	800c3f8 <atan>
 8001630:	ec55 4b10 	vmov	r4, r5, d0
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <getAngleDist+0x1a8>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff36 	bl	80004a8 <__aeabi_f2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe ff88 	bl	8000558 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <getAngleDist+0x1ac>)
 8001656:	f7fe fdc9 	bl	80001ec <__adddf3>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff fa29 	bl	8000ab8 <__aeabi_d2iz>
 8001666:	4602      	mov	r2, r0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e033      	b.n	80016d6 <getAngleDist+0x16e>
		}
	} else {
		resArr[0] = (int) (atan(x / (float) y) * CDegConv + 180);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001682:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001686:	ee16 0a90 	vmov	r0, s13
 800168a:	f7fe ff0d 	bl	80004a8 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	ec43 2b10 	vmov	d0, r2, r3
 8001696:	f00a feaf 	bl	800c3f8 <atan>
 800169a:	ec55 4b10 	vmov	r4, r5, d0
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <getAngleDist+0x1a8>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff01 	bl	80004a8 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe ff53 	bl	8000558 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <getAngleDist+0x1b0>)
 80016c0:	f7fe fd94 	bl	80001ec <__adddf3>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f9f4 	bl	8000ab8 <__aeabi_d2iz>
 80016d0:	4602      	mov	r2, r0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
	}

	resArr[1] = (int) sqrt(x * x + y * y);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	fb03 f203 	mul.w	r2, r3, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	fb03 f303 	mul.w	r3, r3, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fecd 	bl	8000484 <__aeabi_i2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	ec43 2b10 	vmov	d0, r2, r3
 80016f2:	f00b f82a 	bl	800c74a <sqrt>
 80016f6:	ec51 0b10 	vmov	r0, r1, d0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	1d1c      	adds	r4, r3, #4
 80016fe:	f7ff f9db 	bl	8000ab8 <__aeabi_d2iz>
 8001702:	4603      	mov	r3, r0
 8001704:	6023      	str	r3, [r4, #0]

	return;
 8001706:	bf00      	nop
}
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	42652ee1 	.word	0x42652ee1
 8001714:	40768000 	.word	0x40768000
 8001718:	40668000 	.word	0x40668000

0800171c <getZone>:

int getZone(int *angleDist) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	if (*(angleDist + 1) >= distThresh) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3304      	adds	r3, #4
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <getZone+0x68>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	db1f      	blt.n	8001772 <getZone+0x56>
		return (int) ((*angleDist + zoneSize / 2) / zoneSize) % numberOfZones;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <getZone+0x6c>)
 8001740:	edd3 6a00 	vldr	s13, [r3]
 8001744:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001748:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800174c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <getZone+0x6c>)
 8001752:	ed93 7a00 	vldr	s14, [r3]
 8001756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175e:	ee17 1a90 	vmov	r1, s15
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <getZone+0x70>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	fb91 f2f3 	sdiv	r2, r1, r3
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	1acb      	subs	r3, r1, r3
 8001770:	e001      	b.n	8001776 <getZone+0x5a>
	} else {
		return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000018 	.word	0x20000018
 8001788:	200003d4 	.word	0x200003d4
 800178c:	20000014 	.word	0x20000014

08001790 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_ADC_ConvCpltCallback+0x1c>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200003e0 	.word	0x200003e0

080017b0 <StarPollingTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StarPollingTask */
void StarPollingTask(void *argument)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80017b8:	f00a f8b8 	bl	800b92c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, adcChannelCount);
 80017bc:	2304      	movs	r3, #4
 80017be:	461a      	mov	r2, r3
 80017c0:	4918      	ldr	r1, [pc, #96]	; (8001824 <StarPollingTask+0x74>)
 80017c2:	4819      	ldr	r0, [pc, #100]	; (8001828 <StarPollingTask+0x78>)
 80017c4:	f000 faf6 	bl	8001db4 <HAL_ADC_Start_DMA>
		adcConversionComplete = 0;
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <StarPollingTask+0x7c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

		getAngleDist(adcResultsDMA[2] - 127, adcResultsDMA[3] - 127,
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <StarPollingTask+0x74>)
 80017d0:	889b      	ldrh	r3, [r3, #4]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b7f      	subs	r3, #127	; 0x7f
 80017d6:	4a13      	ldr	r2, [pc, #76]	; (8001824 <StarPollingTask+0x74>)
 80017d8:	88d2      	ldrh	r2, [r2, #6]
 80017da:	b292      	uxth	r2, r2
 80017dc:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 80017e0:	4a13      	ldr	r2, [pc, #76]	; (8001830 <StarPollingTask+0x80>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fec0 	bl	8001568 <getAngleDist>
				angleDist1);
		getAngleDist(adcResultsDMA[0] - 127, adcResultsDMA[1] - 127,
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <StarPollingTask+0x74>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	3b7f      	subs	r3, #127	; 0x7f
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <StarPollingTask+0x74>)
 80017f2:	8852      	ldrh	r2, [r2, #2]
 80017f4:	b292      	uxth	r2, r2
 80017f6:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <StarPollingTask+0x84>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff feb3 	bl	8001568 <getAngleDist>
				angleDist2);

		zone1 = getZone(angleDist1);
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <StarPollingTask+0x80>)
 8001804:	f7ff ff8a 	bl	800171c <getZone>
 8001808:	4603      	mov	r3, r0
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <StarPollingTask+0x88>)
 800180c:	6013      	str	r3, [r2, #0]
		zone2 = getZone(angleDist2);
 800180e:	4809      	ldr	r0, [pc, #36]	; (8001834 <StarPollingTask+0x84>)
 8001810:	f7ff ff84 	bl	800171c <getZone>
 8001814:	4603      	mov	r3, r0
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <StarPollingTask+0x8c>)
 8001818:	6013      	str	r3, [r2, #0]

		osDelay(50);
 800181a:	2032      	movs	r0, #50	; 0x32
 800181c:	f007 fa0e 	bl	8008c3c <osDelay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, adcChannelCount);
 8001820:	e7cc      	b.n	80017bc <StarPollingTask+0xc>
 8001822:	bf00      	nop
 8001824:	200003d8 	.word	0x200003d8
 8001828:	20000300 	.word	0x20000300
 800182c:	200003e0 	.word	0x200003e0
 8001830:	200003b8 	.word	0x200003b8
 8001834:	200003c0 	.word	0x200003c0
 8001838:	200003c8 	.word	0x200003c8
 800183c:	200003cc 	.word	0x200003cc

08001840 <StartInputProcessing>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInputProcessing */
void StartInputProcessing(void *argument)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInputProcessing */
	/* Infinite loop */
	for (;;) {
		checkModeSwitch(zone1, zone2);
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <StartInputProcessing+0x54>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <StartInputProcessing+0x58>)
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fdf0 	bl	8001438 <checkModeSwitch>
		if (!mouseMode)
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <StartInputProcessing+0x5c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f083 0301 	eor.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d008      	beq.n	8001878 <StartInputProcessing+0x38>
			getChar(zone1, zone2);
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <StartInputProcessing+0x54>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <StartInputProcessing+0x58>)
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fe23 	bl	80014bc <getChar>
 8001876:	e009      	b.n	800188c <StartInputProcessing+0x4c>
		else {
			sendMouse();
 8001878:	f7ff fcda 	bl	8001230 <sendMouse>
			osDelay(25);
 800187c:	2019      	movs	r0, #25
 800187e:	f007 f9dd 	bl	8008c3c <osDelay>
			sendMouseButtons(zone2);
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <StartInputProcessing+0x58>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fd1a 	bl	80012c0 <sendMouseButtons>
		}
		osDelay(1);
 800188c:	2001      	movs	r0, #1
 800188e:	f007 f9d5 	bl	8008c3c <osDelay>
		checkModeSwitch(zone1, zone2);
 8001892:	e7d9      	b.n	8001848 <StartInputProcessing+0x8>
 8001894:	200003c8 	.word	0x200003c8
 8001898:	200003cc 	.word	0x200003cc
 800189c:	20000002 	.word	0x20000002

080018a0 <capitalTimerCallback>:
  /* USER CODE END StartInputProcessing */
}

/* capitalTimerCallback function */
void capitalTimerCallback(void *argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN capitalTimerCallback */
	if (currentChar >= 'a' && currentChar <= 'z')
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <capitalTimerCallback+0x40>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b60      	cmp	r3, #96	; 0x60
 80018ae:	d909      	bls.n	80018c4 <capitalTimerCallback+0x24>
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <capitalTimerCallback+0x40>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b7a      	cmp	r3, #122	; 0x7a
 80018b6:	d805      	bhi.n	80018c4 <capitalTimerCallback+0x24>
		currentChar = currentChar - 32;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <capitalTimerCallback+0x40>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	3b20      	subs	r3, #32
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <capitalTimerCallback+0x40>)
 80018c2:	701a      	strb	r2, [r3, #0]
	sendCharacter(keyBackSpace, 0);
 80018c4:	2100      	movs	r1, #0
 80018c6:	202a      	movs	r0, #42	; 0x2a
 80018c8:	f7ff fc80 	bl	80011cc <sendCharacter>
	sendCharacter(currentKeycode, 1);
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <capitalTimerCallback+0x44>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fc7a 	bl	80011cc <sendCharacter>
  /* USER CODE END capitalTimerCallback */
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000008 	.word	0x20000008
 80018e4:	200003d0 	.word	0x200003d0

080018e8 <modeTimerCallback>:

/* modeTimerCallback function */
void modeTimerCallback(void *argument)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN modeTimerCallback */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80018f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f4:	480a      	ldr	r0, [pc, #40]	; (8001920 <modeTimerCallback+0x38>)
 80018f6:	f001 fc00 	bl	80030fa <HAL_GPIO_TogglePin>
	mouseMode = !mouseMode;
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <modeTimerCallback+0x3c>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf14      	ite	ne
 8001902:	2301      	movne	r3, #1
 8001904:	2300      	moveq	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f083 0301 	eor.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <modeTimerCallback+0x3c>)
 8001916:	701a      	strb	r2, [r3, #0]
  /* USER CODE END modeTimerCallback */
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40020800 	.word	0x40020800
 8001924:	20000002 	.word	0x20000002

08001928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800193a:	f000 f9b3 	bl	8001ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40014400 	.word	0x40014400

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_MspInit+0x54>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a11      	ldr	r2, [pc, #68]	; (80019ac <HAL_MspInit+0x54>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_MspInit+0x54>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_MspInit+0x54>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_MspInit+0x54>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_MspInit+0x54>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	210f      	movs	r1, #15
 800199a:	f06f 0001 	mvn.w	r0, #1
 800199e:	f000 fe75 	bl	800268c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2e      	ldr	r2, [pc, #184]	; (8001a88 <HAL_ADC_MspInit+0xd8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d156      	bne.n	8001a80 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <HAL_ADC_MspInit+0xdc>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a2c      	ldr	r2, [pc, #176]	; (8001a8c <HAL_ADC_MspInit+0xdc>)
 80019dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_ADC_MspInit+0xdc>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <HAL_ADC_MspInit+0xdc>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a25      	ldr	r2, [pc, #148]	; (8001a8c <HAL_ADC_MspInit+0xdc>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <HAL_ADC_MspInit+0xdc>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a0a:	230f      	movs	r3, #15
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481c      	ldr	r0, [pc, #112]	; (8001a90 <HAL_ADC_MspInit+0xe0>)
 8001a1e:	f001 f9cf 	bl	8002dc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a24:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <HAL_ADC_MspInit+0xe8>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a66:	f000 fe3b 	bl	80026e0 <HAL_DMA_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001a70:	f7ff ff6c 	bl	800194c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <HAL_ADC_MspInit+0xe4>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40012000 	.word	0x40012000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	20000348 	.word	0x20000348
 8001a98:	40026410 	.word	0x40026410

08001a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_InitTick+0xd0>)
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <HAL_InitTick+0xd0>)
 8001ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aba:	6453      	str	r3, [r2, #68]	; 0x44
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_InitTick+0xd0>)
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ac8:	f107 020c 	add.w	r2, r7, #12
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 f9d4 	bl	8004e80 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ad8:	f003 f9be 	bl	8004e58 <HAL_RCC_GetPCLK2Freq>
 8001adc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae0:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_InitTick+0xd4>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0c9b      	lsrs	r3, r3, #18
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_InitTick+0xd8>)
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_InitTick+0xdc>)
 8001af0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_InitTick+0xd8>)
 8001af4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001af8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_InitTick+0xd8>)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_InitTick+0xd8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_InitTick+0xd8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_InitTick+0xd8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001b12:	4818      	ldr	r0, [pc, #96]	; (8001b74 <HAL_InitTick+0xd8>)
 8001b14:	f003 f9e6 	bl	8004ee4 <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d11b      	bne.n	8001b5e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001b26:	4813      	ldr	r0, [pc, #76]	; (8001b74 <HAL_InitTick+0xd8>)
 8001b28:	f003 fa36 	bl	8004f98 <HAL_TIM_Base_Start_IT>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d111      	bne.n	8001b5e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b3a:	2019      	movs	r0, #25
 8001b3c:	f000 fdc2 	bl	80026c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	d808      	bhi.n	8001b58 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b46:	2200      	movs	r2, #0
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	2019      	movs	r0, #25
 8001b4c:	f000 fd9e 	bl	800268c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <HAL_InitTick+0xe0>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e002      	b.n	8001b5e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3730      	adds	r7, #48	; 0x30
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	200003e4 	.word	0x200003e4
 8001b78:	40014400 	.word	0x40014400
 8001b7c:	20000120 	.word	0x20000120

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bb2:	f003 fa53 	bl	800505c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200003e4 	.word	0x200003e4

08001bc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <DMA2_Stream0_IRQHandler+0x10>)
 8001bc6:	f000 fe91 	bl	80028ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000348 	.word	0x20000348

08001bd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <OTG_FS_IRQHandler+0x10>)
 8001bda:	f001 fbf8 	bl	80033ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20005320 	.word	0x20005320

08001be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c12:	490e      	ldr	r1, [pc, #56]	; (8001c4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c14:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c28:	4c0b      	ldr	r4, [pc, #44]	; (8001c58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c36:	f7ff ffd7 	bl	8001be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f00a fadd 	bl	800c1f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3e:	f7ff f8e5 	bl	8000e0c <main>
  bx  lr    
 8001c42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001c50:	0800cb10 	.word	0x0800cb10
  ldr r2, =_sbss
 8001c54:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001c58:	20005850 	.word	0x20005850

08001c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC_IRQHandler>
	...

08001c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_Init+0x40>)
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_Init+0x40>)
 8001c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_Init+0x40>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 fcf4 	bl	8002676 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	2005      	movs	r0, #5
 8001c90:	f7ff ff04 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff fe60 	bl	8001958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000124 	.word	0x20000124
 8001cc8:	2000042c 	.word	0x2000042c

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2000042c 	.word	0x2000042c

08001ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff ffee 	bl	8001ccc <HAL_GetTick>
 8001cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d005      	beq.n	8001d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_Delay+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d0a:	bf00      	nop
 8001d0c:	f7ff ffde 	bl	8001ccc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d8f7      	bhi.n	8001d0c <HAL_Delay+0x28>
  {
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000124 	.word	0x20000124

08001d2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e033      	b.n	8001daa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fe30 	bl	80019b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d118      	bne.n	8001d9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d72:	f023 0302 	bic.w	r3, r3, #2
 8001d76:	f043 0202 	orr.w	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fa4e 	bl	8002220 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f023 0303 	bic.w	r3, r3, #3
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
 8001d9a:	e001      	b.n	8001da0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_Start_DMA+0x1e>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e0ce      	b.n	8001f70 <HAL_ADC_Start_DMA+0x1bc>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d018      	beq.n	8001e1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001df8:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <HAL_ADC_Start_DMA+0x1c4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a5f      	ldr	r2, [pc, #380]	; (8001f7c <HAL_ADC_Start_DMA+0x1c8>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0c9a      	lsrs	r2, r3, #18
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e0c:	e002      	b.n	8001e14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f9      	bne.n	8001e0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e28:	d107      	bne.n	8001e3a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e38:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f040 8086 	bne.w	8001f56 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e88:	d106      	bne.n	8001e98 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f023 0206 	bic.w	r2, r3, #6
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
 8001e96:	e002      	b.n	8001e9e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea6:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <HAL_ADC_Start_DMA+0x1cc>)
 8001ea8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	4a35      	ldr	r2, [pc, #212]	; (8001f84 <HAL_ADC_Start_DMA+0x1d0>)
 8001eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	4a34      	ldr	r2, [pc, #208]	; (8001f88 <HAL_ADC_Start_DMA+0x1d4>)
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	4a33      	ldr	r2, [pc, #204]	; (8001f8c <HAL_ADC_Start_DMA+0x1d8>)
 8001ec0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001eca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001eda:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	334c      	adds	r3, #76	; 0x4c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f000 fc9e 	bl	800283c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10f      	bne.n	8001f2c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d129      	bne.n	8001f6e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	e020      	b.n	8001f6e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_ADC_Start_DMA+0x1dc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d11b      	bne.n	8001f6e <HAL_ADC_Start_DMA+0x1ba>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d114      	bne.n	8001f6e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	e00b      	b.n	8001f6e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000011c 	.word	0x2000011c
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	40012300 	.word	0x40012300
 8001f84:	08002419 	.word	0x08002419
 8001f88:	080024d3 	.word	0x080024d3
 8001f8c:	080024ef 	.word	0x080024ef
 8001f90:	40012000 	.word	0x40012000

08001f94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1c>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e113      	b.n	8002200 <HAL_ADC_ConfigChannel+0x244>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d925      	bls.n	8002034 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68d9      	ldr	r1, [r3, #12]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b1e      	subs	r3, #30
 8001ffe:	2207      	movs	r2, #7
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43da      	mvns	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	400a      	ands	r2, r1
 800200c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68d9      	ldr	r1, [r3, #12]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	4603      	mov	r3, r0
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4403      	add	r3, r0
 8002026:	3b1e      	subs	r3, #30
 8002028:	409a      	lsls	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	e022      	b.n	800207a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6919      	ldr	r1, [r3, #16]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	2207      	movs	r2, #7
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	400a      	ands	r2, r1
 8002056:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6919      	ldr	r1, [r3, #16]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4618      	mov	r0, r3
 800206a:	4603      	mov	r3, r0
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4403      	add	r3, r0
 8002070:	409a      	lsls	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b06      	cmp	r3, #6
 8002080:	d824      	bhi.n	80020cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b05      	subs	r3, #5
 8002094:	221f      	movs	r2, #31
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	400a      	ands	r2, r1
 80020a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	3b05      	subs	r3, #5
 80020be:	fa00 f203 	lsl.w	r2, r0, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	e04c      	b.n	8002166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b0c      	cmp	r3, #12
 80020d2:	d824      	bhi.n	800211e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b23      	subs	r3, #35	; 0x23
 80020e6:	221f      	movs	r2, #31
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43da      	mvns	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	400a      	ands	r2, r1
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b23      	subs	r3, #35	; 0x23
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
 800211c:	e023      	b.n	8002166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3b41      	subs	r3, #65	; 0x41
 8002130:	221f      	movs	r2, #31
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	400a      	ands	r2, r1
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	3b41      	subs	r3, #65	; 0x41
 800215a:	fa00 f203 	lsl.w	r2, r0, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_ADC_ConfigChannel+0x250>)
 8002168:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a28      	ldr	r2, [pc, #160]	; (8002210 <HAL_ADC_ConfigChannel+0x254>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d10f      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1d8>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b12      	cmp	r3, #18
 800217a:	d10b      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_ADC_ConfigChannel+0x254>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d12b      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x23a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_ADC_ConfigChannel+0x258>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d003      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x1f4>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b11      	cmp	r3, #17
 80021ae:	d122      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a11      	ldr	r2, [pc, #68]	; (8002214 <HAL_ADC_ConfigChannel+0x258>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d111      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_ADC_ConfigChannel+0x25c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a11      	ldr	r2, [pc, #68]	; (800221c <HAL_ADC_ConfigChannel+0x260>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	0c9a      	lsrs	r2, r3, #18
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40012300 	.word	0x40012300
 8002210:	40012000 	.word	0x40012000
 8002214:	10000012 	.word	0x10000012
 8002218:	2000011c 	.word	0x2000011c
 800221c:	431bde83 	.word	0x431bde83

08002220 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002228:	4b79      	ldr	r3, [pc, #484]	; (8002410 <ADC_Init+0x1f0>)
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	021a      	lsls	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6899      	ldr	r1, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	4a58      	ldr	r2, [pc, #352]	; (8002414 <ADC_Init+0x1f4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	e00f      	b.n	800231e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800230c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800231c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0202 	bic.w	r2, r2, #2
 800232c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7e1b      	ldrb	r3, [r3, #24]
 8002338:	005a      	lsls	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01b      	beq.n	8002384 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800235a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800236a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	3b01      	subs	r3, #1
 8002378:	035a      	lsls	r2, r3, #13
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	e007      	b.n	8002394 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002392:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	051a      	lsls	r2, r3, #20
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023d6:	025a      	lsls	r2, r3, #9
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	029a      	lsls	r2, r3, #10
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40012300 	.word	0x40012300
 8002414:	0f000001 	.word	0x0f000001

08002418 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800242e:	2b00      	cmp	r3, #0
 8002430:	d13c      	bne.n	80024ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d12b      	bne.n	80024a4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d127      	bne.n	80024a4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800246c:	2b00      	cmp	r3, #0
 800246e:	d119      	bne.n	80024a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0220 	bic.w	r2, r2, #32
 800247e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7ff f973 	bl	8001790 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024aa:	e00e      	b.n	80024ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f7ff fd75 	bl	8001fa8 <HAL_ADC_ErrorCallback>
}
 80024be:	e004      	b.n	80024ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	4798      	blx	r3
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f7ff fd57 	bl	8001f94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f043 0204 	orr.w	r2, r3, #4
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff fd4a 	bl	8001fa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002538:	4013      	ands	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <__NVIC_GetPriorityGrouping+0x18>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 0307 	and.w	r3, r3, #7
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db0b      	blt.n	80025aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	4907      	ldr	r1, [pc, #28]	; (80025b8 <__NVIC_EnableIRQ+0x38>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2001      	movs	r0, #1
 80025a2:	fa00 f202 	lsl.w	r2, r0, r2
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db0a      	blt.n	80025e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	490c      	ldr	r1, [pc, #48]	; (8002608 <__NVIC_SetPriority+0x4c>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	440b      	add	r3, r1
 80025e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e4:	e00a      	b.n	80025fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <__NVIC_SetPriority+0x50>)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3b04      	subs	r3, #4
 80025f4:	0112      	lsls	r2, r2, #4
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	440b      	add	r3, r1
 80025fa:	761a      	strb	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf28      	it	cs
 800262e:	2304      	movcs	r3, #4
 8002630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3304      	adds	r3, #4
 8002636:	2b06      	cmp	r3, #6
 8002638:	d902      	bls.n	8002640 <NVIC_EncodePriority+0x30>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3b03      	subs	r3, #3
 800263e:	e000      	b.n	8002642 <NVIC_EncodePriority+0x32>
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002658:	f04f 31ff 	mov.w	r1, #4294967295
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43d9      	mvns	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	4313      	orrs	r3, r2
         );
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ff4c 	bl	800251c <__NVIC_SetPriorityGrouping>
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800269e:	f7ff ff61 	bl	8002564 <__NVIC_GetPriorityGrouping>
 80026a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	6978      	ldr	r0, [r7, #20]
 80026aa:	f7ff ffb1 	bl	8002610 <NVIC_EncodePriority>
 80026ae:	4602      	mov	r2, r0
 80026b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff80 	bl	80025bc <__NVIC_SetPriority>
}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff54 	bl	8002580 <__NVIC_EnableIRQ>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff faee 	bl	8001ccc <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e099      	b.n	8002830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271c:	e00f      	b.n	800273e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800271e:	f7ff fad5 	bl	8001ccc <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b05      	cmp	r3, #5
 800272a:	d908      	bls.n	800273e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2203      	movs	r2, #3
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e078      	b.n	8002830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1e8      	bne.n	800271e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <HAL_DMA_Init+0x158>)
 8002758:	4013      	ands	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	2b04      	cmp	r3, #4
 8002796:	d107      	bne.n	80027a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	4313      	orrs	r3, r2
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d117      	bne.n	8002802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 fa6f 	bl	8002cc8 <DMA_CheckFifoParam>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027fe:	2301      	movs	r3, #1
 8002800:	e016      	b.n	8002830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fa26 	bl	8002c5c <DMA_CalcBaseAndBitshift>
 8002810:	4603      	mov	r3, r0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	223f      	movs	r2, #63	; 0x3f
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	f010803f 	.word	0xf010803f

0800283c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_DMA_Start_IT+0x26>
 800285e:	2302      	movs	r3, #2
 8002860:	e040      	b.n	80028e4 <HAL_DMA_Start_IT+0xa8>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d12f      	bne.n	80028d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f9b8 	bl	8002c00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	223f      	movs	r2, #63	; 0x3f
 8002896:	409a      	lsls	r2, r3
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0216 	orr.w	r2, r2, #22
 80028aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0208 	orr.w	r2, r2, #8
 80028c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e005      	b.n	80028e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028de:	2302      	movs	r3, #2
 80028e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028f8:	4b8e      	ldr	r3, [pc, #568]	; (8002b34 <HAL_DMA_IRQHandler+0x248>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a8e      	ldr	r2, [pc, #568]	; (8002b38 <HAL_DMA_IRQHandler+0x24c>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2208      	movs	r2, #8
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01a      	beq.n	8002958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0204 	bic.w	r2, r2, #4
 800293e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2208      	movs	r2, #8
 8002946:	409a      	lsls	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	2201      	movs	r2, #1
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2201      	movs	r2, #1
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	2204      	movs	r2, #4
 8002994:	409a      	lsls	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d012      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2204      	movs	r2, #4
 80029b2:	409a      	lsls	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0204 	orr.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2210      	movs	r2, #16
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d043      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d03c      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	2210      	movs	r2, #16
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d024      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
 8002a1a:	e01f      	b.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
 8002a2c:	e016      	b.n	8002a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0208 	bic.w	r2, r2, #8
 8002a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	2220      	movs	r2, #32
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 808f 	beq.w	8002b8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8087 	beq.w	8002b8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	2220      	movs	r2, #32
 8002a84:	409a      	lsls	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d136      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0216 	bic.w	r2, r2, #22
 8002aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x1da>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0208 	bic.w	r2, r2, #8
 8002ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	223f      	movs	r2, #63	; 0x3f
 8002adc:	409a      	lsls	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d07e      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
        }
        return;
 8002b02:	e079      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01d      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10d      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d031      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
 8002b30:	e02c      	b.n	8002b8c <HAL_DMA_IRQHandler+0x2a0>
 8002b32:	bf00      	nop
 8002b34:	2000011c 	.word	0x2000011c
 8002b38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d023      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
 8002b4c:	e01e      	b.n	8002b8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10f      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0210 	bic.w	r2, r2, #16
 8002b6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d032      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d022      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2205      	movs	r2, #5
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d307      	bcc.n	8002bd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f2      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x2cc>
 8002bd2:	e000      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
 8002bf6:	e000      	b.n	8002bfa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bf8:	bf00      	nop
    }
  }
}
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d108      	bne.n	8002c40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c3e:	e007      	b.n	8002c50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3b10      	subs	r3, #16
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c76:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d909      	bls.n	8002c9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	1d1a      	adds	r2, r3, #4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c9c:	e007      	b.n	8002cae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	aaaaaaab 	.word	0xaaaaaaab
 8002cc4:	0800ca54 	.word	0x0800ca54

08002cc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d856      	bhi.n	8002d96 <DMA_CheckFifoParam+0xce>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <DMA_CheckFifoParam+0x28>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d13 	.word	0x08002d13
 8002cf8:	08002d01 	.word	0x08002d01
 8002cfc:	08002d97 	.word	0x08002d97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d046      	beq.n	8002d9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e043      	b.n	8002d9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d1a:	d140      	bne.n	8002d9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e03d      	b.n	8002d9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2a:	d121      	bne.n	8002d70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d837      	bhi.n	8002da2 <DMA_CheckFifoParam+0xda>
 8002d32:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <DMA_CheckFifoParam+0x70>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002d49 	.word	0x08002d49
 8002d3c:	08002d4f 	.word	0x08002d4f
 8002d40:	08002d49 	.word	0x08002d49
 8002d44:	08002d61 	.word	0x08002d61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4c:	e030      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d025      	beq.n	8002da6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5e:	e022      	b.n	8002da6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d68:	d11f      	bne.n	8002daa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d6e:	e01c      	b.n	8002daa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d903      	bls.n	8002d7e <DMA_CheckFifoParam+0xb6>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d003      	beq.n	8002d84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d7c:	e018      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      break;
 8002d82:	e015      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      break;
 8002d94:	e00b      	b.n	8002dae <DMA_CheckFifoParam+0xe6>
      break;
 8002d96:	bf00      	nop
 8002d98:	e00a      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e008      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e006      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e004      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e002      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
    }
  } 
  
  return status; 
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e159      	b.n	8003090 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	f040 8148 	bne.w	800308a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d005      	beq.n	8002e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d130      	bne.n	8002e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 0201 	and.w	r2, r3, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d017      	beq.n	8002eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d123      	bne.n	8002f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	08da      	lsrs	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3208      	adds	r2, #8
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	08da      	lsrs	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3208      	adds	r2, #8
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80a2 	beq.w	800308a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	4b57      	ldr	r3, [pc, #348]	; (80030a8 <HAL_GPIO_Init+0x2e8>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	4a56      	ldr	r2, [pc, #344]	; (80030a8 <HAL_GPIO_Init+0x2e8>)
 8002f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f54:	6453      	str	r3, [r2, #68]	; 0x44
 8002f56:	4b54      	ldr	r3, [pc, #336]	; (80030a8 <HAL_GPIO_Init+0x2e8>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f62:	4a52      	ldr	r2, [pc, #328]	; (80030ac <HAL_GPIO_Init+0x2ec>)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a49      	ldr	r2, [pc, #292]	; (80030b0 <HAL_GPIO_Init+0x2f0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d019      	beq.n	8002fc2 <HAL_GPIO_Init+0x202>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a48      	ldr	r2, [pc, #288]	; (80030b4 <HAL_GPIO_Init+0x2f4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_GPIO_Init+0x1fe>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a47      	ldr	r2, [pc, #284]	; (80030b8 <HAL_GPIO_Init+0x2f8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00d      	beq.n	8002fba <HAL_GPIO_Init+0x1fa>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a46      	ldr	r2, [pc, #280]	; (80030bc <HAL_GPIO_Init+0x2fc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <HAL_GPIO_Init+0x1f6>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a45      	ldr	r2, [pc, #276]	; (80030c0 <HAL_GPIO_Init+0x300>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d101      	bne.n	8002fb2 <HAL_GPIO_Init+0x1f2>
 8002fae:	2304      	movs	r3, #4
 8002fb0:	e008      	b.n	8002fc4 <HAL_GPIO_Init+0x204>
 8002fb2:	2307      	movs	r3, #7
 8002fb4:	e006      	b.n	8002fc4 <HAL_GPIO_Init+0x204>
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e004      	b.n	8002fc4 <HAL_GPIO_Init+0x204>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e002      	b.n	8002fc4 <HAL_GPIO_Init+0x204>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_GPIO_Init+0x204>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	f002 0203 	and.w	r2, r2, #3
 8002fca:	0092      	lsls	r2, r2, #2
 8002fcc:	4093      	lsls	r3, r2
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd4:	4935      	ldr	r1, [pc, #212]	; (80030ac <HAL_GPIO_Init+0x2ec>)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	3302      	adds	r3, #2
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe2:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_GPIO_Init+0x304>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003006:	4a2f      	ldr	r2, [pc, #188]	; (80030c4 <HAL_GPIO_Init+0x304>)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800300c:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <HAL_GPIO_Init+0x304>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003030:	4a24      	ldr	r2, [pc, #144]	; (80030c4 <HAL_GPIO_Init+0x304>)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003036:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <HAL_GPIO_Init+0x304>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800305a:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_GPIO_Init+0x304>)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003060:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <HAL_GPIO_Init+0x304>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <HAL_GPIO_Init+0x304>)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3301      	adds	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b0f      	cmp	r3, #15
 8003094:	f67f aea2 	bls.w	8002ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3724      	adds	r7, #36	; 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40013800 	.word	0x40013800
 80030b0:	40020000 	.word	0x40020000
 80030b4:	40020400 	.word	0x40020400
 80030b8:	40020800 	.word	0x40020800
 80030bc:	40020c00 	.word	0x40020c00
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40013c00 	.word	0x40013c00

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030e4:	e003      	b.n	80030ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	041a      	lsls	r2, r3, #16
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	619a      	str	r2, [r3, #24]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800310c:	887a      	ldrh	r2, [r7, #2]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4013      	ands	r3, r2
 8003112:	041a      	lsls	r2, r3, #16
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	43d9      	mvns	r1, r3
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	400b      	ands	r3, r1
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	619a      	str	r2, [r3, #24]
}
 8003122:	bf00      	nop
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800312e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003130:	b08f      	sub	sp, #60	; 0x3c
 8003132:	af0a      	add	r7, sp, #40	; 0x28
 8003134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e10f      	b.n	8003360 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f008 fd4e 	bl	800bbfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2203      	movs	r2, #3
 8003164:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f002 fa45 	bl	800560e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	687e      	ldr	r6, [r7, #4]
 800318c:	466d      	mov	r5, sp
 800318e:	f106 0410 	add.w	r4, r6, #16
 8003192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800319e:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a2:	1d33      	adds	r3, r6, #4
 80031a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a6:	6838      	ldr	r0, [r7, #0]
 80031a8:	f002 f91c 	bl	80053e4 <USB_CoreInit>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0d0      	b.n	8003360 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fa33 	bl	8005630 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	e04a      	b.n	8003266 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	333d      	adds	r3, #61	; 0x3d
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	333c      	adds	r3, #60	; 0x3c
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	b298      	uxth	r0, r3
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3344      	adds	r3, #68	; 0x44
 800320c:	4602      	mov	r2, r0
 800320e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3340      	adds	r3, #64	; 0x40
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3348      	adds	r3, #72	; 0x48
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	334c      	adds	r3, #76	; 0x4c
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3354      	adds	r3, #84	; 0x54
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	3301      	adds	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d3af      	bcc.n	80031d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e044      	b.n	8003300 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	3301      	adds	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d3b5      	bcc.n	8003276 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	687e      	ldr	r6, [r7, #4]
 8003312:	466d      	mov	r5, sp
 8003314:	f106 0410 	add.w	r4, r6, #16
 8003318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800331c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003320:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003324:	e885 0003 	stmia.w	r5, {r0, r1}
 8003328:	1d33      	adds	r3, r6, #4
 800332a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800332c:	6838      	ldr	r0, [r7, #0]
 800332e:	f002 f9cb 	bl	80056c8 <USB_DevInit>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e00d      	b.n	8003360 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f003 fb1a 	bl	8006992 <USB_DevDisconnect>

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003368 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_PCD_Start+0x1c>
 8003380:	2302      	movs	r3, #2
 8003382:	e020      	b.n	80033c6 <HAL_PCD_Start+0x5e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	2b01      	cmp	r3, #1
 8003392:	d109      	bne.n	80033a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003398:	2b01      	cmp	r3, #1
 800339a:	d005      	beq.n	80033a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f002 f91d 	bl	80055ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 faca 	bl	8006950 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033ce:	b590      	push	{r4, r7, lr}
 80033d0:	b08d      	sub	sp, #52	; 0x34
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f003 fb88 	bl	8006afa <USB_GetMode>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 848a 	bne.w	8003d06 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 faec 	bl	80069d4 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8480 	beq.w	8003d04 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f003 fad9 	bl	80069d4 <USB_ReadInterrupts>
 8003422:	4603      	mov	r3, r0
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d107      	bne.n	800343c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f002 0202 	and.w	r2, r2, #2
 800343a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f003 fac7 	bl	80069d4 <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	d161      	bne.n	8003514 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0210 	bic.w	r2, r2, #16
 800345e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	3304      	adds	r3, #4
 800347e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	0c5b      	lsrs	r3, r3, #17
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	2b02      	cmp	r3, #2
 800348a:	d124      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d035      	beq.n	8003504 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	6a38      	ldr	r0, [r7, #32]
 80034ac:	f003 f8fe 	bl	80066ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034bc:	441a      	add	r2, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	6a1a      	ldr	r2, [r3, #32]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ce:	441a      	add	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
 80034d4:	e016      	b.n	8003504 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	0c5b      	lsrs	r3, r3, #17
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d110      	bne.n	8003504 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e8:	2208      	movs	r2, #8
 80034ea:	4619      	mov	r1, r3
 80034ec:	6a38      	ldr	r0, [r7, #32]
 80034ee:	f003 f8dd 	bl	80066ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fe:	441a      	add	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0210 	orr.w	r2, r2, #16
 8003512:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f003 fa5b 	bl	80069d4 <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003524:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003528:	f040 80a7 	bne.w	800367a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 fa60 	bl	80069fa <USB_ReadDevAllOutEpInterrupt>
 800353a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800353c:	e099      	b.n	8003672 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 808e 	beq.w	8003666 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f003 fa84 	bl	8006a62 <USB_ReadDevOutEPInterrupt>
 800355a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00c      	beq.n	8003580 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	2301      	movs	r3, #1
 8003576:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 feaa 	bl	80042d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00c      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	461a      	mov	r2, r3
 8003598:	2308      	movs	r3, #8
 800359a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800359c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 ff80 	bl	80044a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ba:	461a      	mov	r2, r3
 80035bc:	2310      	movs	r3, #16
 80035be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d030      	beq.n	800362c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b80      	cmp	r3, #128	; 0x80
 80035d4:	d109      	bne.n	80035ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d108      	bne.n	800361a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2200      	movs	r2, #0
 800360c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	b2db      	uxtb	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f008 fbed 	bl	800bdf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	2302      	movs	r3, #2
 800362a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	461a      	mov	r2, r3
 8003644:	2320      	movs	r3, #32
 8003646:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	4413      	add	r3, r2
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	461a      	mov	r2, r3
 8003660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003664:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	3301      	adds	r3, #1
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	f47f af62 	bne.w	800353e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f003 f9a8 	bl	80069d4 <USB_ReadInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800368e:	f040 80db 	bne.w	8003848 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f003 f9c9 	bl	8006a2e <USB_ReadDevAllInEpInterrupt>
 800369c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036a2:	e0cd      	b.n	8003840 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80c2 	beq.w	8003834 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 f9ef 	bl	8006a9e <USB_ReadDevInEPInterrupt>
 80036c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d057      	beq.n	800377c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	2201      	movs	r2, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	69f9      	ldr	r1, [r7, #28]
 80036e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ec:	4013      	ands	r3, r2
 80036ee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fc:	461a      	mov	r2, r3
 80036fe:	2301      	movs	r3, #1
 8003700:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d132      	bne.n	8003770 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	334c      	adds	r3, #76	; 0x4c
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4403      	add	r3, r0
 800372a:	3348      	adds	r3, #72	; 0x48
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4419      	add	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	4613      	mov	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4403      	add	r3, r0
 800373e:	334c      	adds	r3, #76	; 0x4c
 8003740:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	d113      	bne.n	8003770 <HAL_PCD_IRQHandler+0x3a2>
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	3354      	adds	r3, #84	; 0x54
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003768:	461a      	mov	r2, r3
 800376a:	2101      	movs	r1, #1
 800376c:	f003 f9f6 	bl	8006b5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f008 fac1 	bl	800bcfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003792:	461a      	mov	r2, r3
 8003794:	2308      	movs	r3, #8
 8003796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ae:	461a      	mov	r2, r3
 80037b0:	2310      	movs	r3, #16
 80037b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	461a      	mov	r2, r3
 80037cc:	2340      	movs	r3, #64	; 0x40
 80037ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d023      	beq.n	8003822 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037dc:	6a38      	ldr	r0, [r7, #32]
 80037de:	f002 f8d7 	bl	8005990 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	3338      	adds	r3, #56	; 0x38
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	3304      	adds	r3, #4
 80037f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	78db      	ldrb	r3, [r3, #3]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d108      	bne.n	8003810 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	b2db      	uxtb	r3, r3
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f008 fb04 	bl	800be18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381c:	461a      	mov	r2, r3
 800381e:	2302      	movs	r3, #2
 8003820:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800382c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fcc3 	bl	80041ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	3301      	adds	r3, #1
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	f47f af2e 	bne.w	80036a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f003 f8c1 	bl	80069d4 <USB_ReadInterrupts>
 8003852:	4603      	mov	r3, r0
 8003854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800385c:	d122      	bne.n	80038a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003878:	2b01      	cmp	r3, #1
 800387a:	d108      	bne.n	800388e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003884:	2100      	movs	r1, #0
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 feaa 	bl	80045e0 <HAL_PCDEx_LPM_Callback>
 800388c:	e002      	b.n	8003894 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f008 faa2 	bl	800bdd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f003 f893 	bl	80069d4 <USB_ReadInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b8:	d112      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f008 fa5e 	bl	800bd8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038de:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 f875 	bl	80069d4 <USB_ReadInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f4:	f040 80b7 	bne.w	8003a66 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2110      	movs	r1, #16
 8003912:	4618      	mov	r0, r3
 8003914:	f002 f83c 	bl	8005990 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003918:	2300      	movs	r3, #0
 800391a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391c:	e046      	b.n	80039ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392a:	461a      	mov	r2, r3
 800392c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003930:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003942:	0151      	lsls	r1, r2, #5
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	440a      	add	r2, r1
 8003948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003950:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	461a      	mov	r2, r3
 8003960:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003964:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003976:	0151      	lsls	r1, r2, #5
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	440a      	add	r2, r1
 800397c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003980:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003984:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003996:	0151      	lsls	r1, r2, #5
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	440a      	add	r2, r1
 800399c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	3301      	adds	r3, #1
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d3b3      	bcc.n	800391e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e2:	f043 030b 	orr.w	r3, r3, #11
 80039e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039f8:	f043 030b 	orr.w	r3, r3, #11
 80039fc:	6453      	str	r3, [r2, #68]	; 0x44
 80039fe:	e015      	b.n	8003a2c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a26:	f043 030b 	orr.w	r3, r3, #11
 8003a2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a50:	461a      	mov	r2, r3
 8003a52:	f003 f883 	bl	8006b5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f002 ffb2 	bl	80069d4 <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7a:	d124      	bne.n	8003ac6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 f848 	bl	8006b16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 fffd 	bl	8005a8a <USB_GetDevSpeed>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461a      	mov	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681c      	ldr	r4, [r3, #0]
 8003a9c:	f001 f9d0 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f001 fcfc 	bl	80054a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f008 f94c 	bl	800bd4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f002 ff82 	bl	80069d4 <USB_ReadInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d10a      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f008 f929 	bl	800bd32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f002 0208 	and.w	r2, r2, #8
 8003aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 ff6d 	bl	80069d4 <USB_ReadInterrupts>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b80      	cmp	r3, #128	; 0x80
 8003b02:	d122      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b10:	2301      	movs	r3, #1
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
 8003b14:	e014      	b.n	8003b40 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fb0f 	bl	8004158 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d3e5      	bcc.n	8003b16 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f002 ff40 	bl	80069d4 <USB_ReadInterrupts>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b5e:	d13b      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b60:	2301      	movs	r3, #1
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	e02b      	b.n	8003bbe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	3340      	adds	r3, #64	; 0x40
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d115      	bne.n	8003bb8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	da12      	bge.n	8003bb8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	333f      	adds	r3, #63	; 0x3f
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fad0 	bl	8004158 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	3301      	adds	r3, #1
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d3ce      	bcc.n	8003b66 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f002 fef9 	bl	80069d4 <USB_ReadInterrupts>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bec:	d155      	bne.n	8003c9a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bee:	2301      	movs	r3, #1
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf2:	e045      	b.n	8003c80 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d12e      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	da2b      	bge.n	8003c7a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d121      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c76:	6053      	str	r3, [r2, #4]
            break;
 8003c78:	e007      	b.n	8003c8a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3b4      	bcc.n	8003bf4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f002 fe98 	bl	80069d4 <USB_ReadInterrupts>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cae:	d10a      	bne.n	8003cc6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f008 f8c3 	bl	800be3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f002 fe82 	bl	80069d4 <USB_ReadInterrupts>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d115      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f008 f8b3 	bl	800be58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	e000      	b.n	8003d06 <HAL_PCD_IRQHandler+0x938>
      return;
 8003d04:	bf00      	nop
    }
  }
}
 8003d06:	3734      	adds	r7, #52	; 0x34
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd90      	pop	{r4, r7, pc}

08003d0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_PCD_SetAddress+0x1a>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e013      	b.n	8003d4e <HAL_PCD_SetAddress+0x42>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	78fa      	ldrb	r2, [r7, #3]
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f002 fde0 	bl	8006904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	4608      	mov	r0, r1
 8003d60:	4611      	mov	r1, r2
 8003d62:	461a      	mov	r2, r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	70fb      	strb	r3, [r7, #3]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	803b      	strh	r3, [r7, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	da0f      	bge.n	8003d9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	3338      	adds	r3, #56	; 0x38
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	3304      	adds	r3, #4
 8003d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	705a      	strb	r2, [r3, #1]
 8003d9a:	e00f      	b.n	8003dbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 020f 	and.w	r2, r3, #15
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	3304      	adds	r3, #4
 8003db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dc8:	883a      	ldrh	r2, [r7, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	78ba      	ldrb	r2, [r7, #2]
 8003dd2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003de6:	78bb      	ldrb	r3, [r7, #2]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d102      	bne.n	8003df2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_PCD_EP_Open+0xaa>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e00e      	b.n	8003e1e <HAL_PCD_EP_Open+0xc8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68f9      	ldr	r1, [r7, #12]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 fe60 	bl	8005ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da0f      	bge.n	8003e5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	3338      	adds	r3, #56	; 0x38
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3304      	adds	r3, #4
 8003e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	705a      	strb	r2, [r3, #1]
 8003e58:	e00f      	b.n	8003e7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 020f 	and.w	r2, r3, #15
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	3304      	adds	r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_PCD_EP_Close+0x6e>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e00e      	b.n	8003eb2 <HAL_PCD_EP_Close+0x8c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fe9e 	bl	8005be4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b086      	sub	sp, #24
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eca:	7afb      	ldrb	r3, [r7, #11]
 8003ecc:	f003 020f 	and.w	r2, r3, #15
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003efc:	7afb      	ldrb	r3, [r7, #11]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d102      	bne.n	8003f16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f16:	7afb      	ldrb	r3, [r7, #11]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6979      	ldr	r1, [r7, #20]
 8003f2e:	f002 f97d 	bl	800622c <USB_EP0StartXfer>
 8003f32:	e008      	b.n	8003f46 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	6979      	ldr	r1, [r7, #20]
 8003f42:	f001 ff2b 	bl	8005d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	f003 020f 	and.w	r2, r3, #15
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	3338      	adds	r3, #56	; 0x38
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	3304      	adds	r3, #4
 8003f76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2200      	movs	r2, #0
 8003f88:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d102      	bne.n	8003faa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003faa:	7afb      	ldrb	r3, [r7, #11]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6979      	ldr	r1, [r7, #20]
 8003fc2:	f002 f933 	bl	800622c <USB_EP0StartXfer>
 8003fc6:	e008      	b.n	8003fda <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6979      	ldr	r1, [r7, #20]
 8003fd6:	f001 fee1 	bl	8005d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 020f 	and.w	r2, r3, #15
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d901      	bls.n	8004002 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e050      	b.n	80040a4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004006:	2b00      	cmp	r3, #0
 8004008:	da0f      	bge.n	800402a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	f003 020f 	and.w	r2, r3, #15
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	3338      	adds	r3, #56	; 0x38
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	3304      	adds	r3, #4
 8004020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	705a      	strb	r2, [r3, #1]
 8004028:	e00d      	b.n	8004046 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	3304      	adds	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	b2da      	uxtb	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_PCD_EP_SetStall+0x82>
 8004062:	2302      	movs	r3, #2
 8004064:	e01e      	b.n	80040a4 <HAL_PCD_EP_SetStall+0xc0>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68f9      	ldr	r1, [r7, #12]
 8004074:	4618      	mov	r0, r3
 8004076:	f002 fb71 	bl	800675c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	b2d9      	uxtb	r1, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004094:	461a      	mov	r2, r3
 8004096:	f002 fd61 	bl	8006b5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d901      	bls.n	80040ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e042      	b.n	8004150 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da0f      	bge.n	80040f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 020f 	and.w	r2, r3, #15
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	3338      	adds	r3, #56	; 0x38
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	3304      	adds	r3, #4
 80040e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	705a      	strb	r2, [r3, #1]
 80040f0:	e00f      	b.n	8004112 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	f003 020f 	and.w	r2, r3, #15
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	3304      	adds	r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_PCD_EP_ClrStall+0x86>
 800412e:	2302      	movs	r3, #2
 8004130:	e00e      	b.n	8004150 <HAL_PCD_EP_ClrStall+0xa4>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	4618      	mov	r0, r3
 8004142:	f002 fb79 	bl	8006838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004168:	2b00      	cmp	r3, #0
 800416a:	da0c      	bge.n	8004186 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 020f 	and.w	r2, r3, #15
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	3338      	adds	r3, #56	; 0x38
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	3304      	adds	r3, #4
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e00c      	b.n	80041a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	3304      	adds	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 f998 	bl	80064dc <USB_EPStopXfer>
 80041ac:	4603      	mov	r3, r0
 80041ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041b0:	7afb      	ldrb	r3, [r7, #11]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08a      	sub	sp, #40	; 0x28
 80041be:	af02      	add	r7, sp, #8
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	3338      	adds	r3, #56	; 0x38
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	3304      	adds	r3, #4
 80041e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1a      	ldr	r2, [r3, #32]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d901      	bls.n	80041f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e06c      	b.n	80042cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	429a      	cmp	r2, r3
 8004206:	d902      	bls.n	800420e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3303      	adds	r3, #3
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004216:	e02b      	b.n	8004270 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	429a      	cmp	r2, r3
 800422c:	d902      	bls.n	8004234 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	3303      	adds	r3, #3
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6919      	ldr	r1, [r3, #16]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800424c:	b2db      	uxtb	r3, r3
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	4603      	mov	r3, r0
 8004252:	6978      	ldr	r0, [r7, #20]
 8004254:	f002 f9ec 	bl	8006630 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	441a      	add	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1a      	ldr	r2, [r3, #32]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	441a      	add	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	b29b      	uxth	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	429a      	cmp	r2, r3
 8004284:	d809      	bhi.n	800429a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1a      	ldr	r2, [r3, #32]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800428e:	429a      	cmp	r2, r3
 8004290:	d203      	bcs.n	800429a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1be      	bne.n	8004218 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d811      	bhi.n	80042ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	2201      	movs	r2, #1
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	43db      	mvns	r3, r3
 80042c0:	6939      	ldr	r1, [r7, #16]
 80042c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c6:	4013      	ands	r3, r2
 80042c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	333c      	adds	r3, #60	; 0x3c
 80042ec:	3304      	adds	r3, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d17b      	bne.n	8004402 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f003 0308 	and.w	r3, r3, #8
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4a61      	ldr	r2, [pc, #388]	; (800449c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	f240 80b9 	bls.w	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80b3 	beq.w	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433c:	6093      	str	r3, [r2, #8]
 800433e:	e0a7      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	2320      	movs	r3, #32
 800435a:	6093      	str	r3, [r2, #8]
 800435c:	e098      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 8093 	bne.w	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	4a4b      	ldr	r2, [pc, #300]	; (800449c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d90f      	bls.n	8004392 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438e:	6093      	str	r3, [r2, #8]
 8004390:	e07e      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	3304      	adds	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	440b      	add	r3, r1
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043be:	1ad2      	subs	r2, r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d114      	bne.n	80043f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043dc:	461a      	mov	r2, r3
 80043de:	2101      	movs	r1, #1
 80043e0:	f002 fbbc 	bl	8006b5c <USB_EP0_OutStart>
 80043e4:	e006      	b.n	80043f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	441a      	add	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f007 fc64 	bl	800bcc8 <HAL_PCD_DataOutStageCallback>
 8004400:	e046      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d124      	bne.n	8004454 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	6093      	str	r3, [r2, #8]
 8004428:	e032      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004440:	461a      	mov	r2, r3
 8004442:	2320      	movs	r3, #32
 8004444:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f007 fc3b 	bl	800bcc8 <HAL_PCD_DataOutStageCallback>
 8004452:	e01d      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d114      	bne.n	8004484 <PCD_EP_OutXfrComplete_int+0x1b0>
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	4613      	mov	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d108      	bne.n	8004484 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800447c:	461a      	mov	r2, r3
 800447e:	2100      	movs	r1, #0
 8004480:	f002 fb6c 	bl	8006b5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f007 fc1c 	bl	800bcc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	4f54300a 	.word	0x4f54300a
 80044a0:	4f54310a 	.word	0x4f54310a

080044a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	333c      	adds	r3, #60	; 0x3c
 80044bc:	3304      	adds	r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a15      	ldr	r2, [pc, #84]	; (800452c <PCD_EP_OutSetupPacket_int+0x88>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d90e      	bls.n	80044f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d009      	beq.n	80044f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	461a      	mov	r2, r3
 80044f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f007 fbd3 	bl	800bca4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a0a      	ldr	r2, [pc, #40]	; (800452c <PCD_EP_OutSetupPacket_int+0x88>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d90c      	bls.n	8004520 <PCD_EP_OutSetupPacket_int+0x7c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d108      	bne.n	8004520 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004518:	461a      	mov	r2, r3
 800451a:	2101      	movs	r1, #1
 800451c:	f002 fb1e 	bl	8006b5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	4f54300a 	.word	0x4f54300a

08004530 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
 800453c:	4613      	mov	r3, r2
 800453e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d107      	bne.n	800455e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800454e:	883b      	ldrh	r3, [r7, #0]
 8004550:	0419      	lsls	r1, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	430a      	orrs	r2, r1
 800455a:	629a      	str	r2, [r3, #40]	; 0x28
 800455c:	e028      	b.n	80045b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4413      	add	r3, r2
 800456a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800456c:	2300      	movs	r3, #0
 800456e:	73fb      	strb	r3, [r7, #15]
 8004570:	e00d      	b.n	800458e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	3340      	adds	r3, #64	; 0x40
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4413      	add	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	3301      	adds	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	3b01      	subs	r3, #1
 8004594:	429a      	cmp	r2, r3
 8004596:	d3ec      	bcc.n	8004572 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004598:	883b      	ldrh	r3, [r7, #0]
 800459a:	0418      	lsls	r0, r3, #16
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	4302      	orrs	r2, r0
 80045a8:	3340      	adds	r3, #64	; 0x40
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e267      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d075      	beq.n	8004702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004616:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b04      	cmp	r3, #4
 8004620:	d00c      	beq.n	800463c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004622:	4b85      	ldr	r3, [pc, #532]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800462a:	2b08      	cmp	r3, #8
 800462c:	d112      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800462e:	4b82      	ldr	r3, [pc, #520]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463a:	d10b      	bne.n	8004654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	4b7e      	ldr	r3, [pc, #504]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05b      	beq.n	8004700 <HAL_RCC_OscConfig+0x108>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d157      	bne.n	8004700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e242      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d106      	bne.n	800466c <HAL_RCC_OscConfig+0x74>
 800465e:	4b76      	ldr	r3, [pc, #472]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a75      	ldr	r2, [pc, #468]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	e01d      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x98>
 8004676:	4b70      	ldr	r3, [pc, #448]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6f      	ldr	r2, [pc, #444]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800467c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004680:	6013      	str	r3, [r2, #0]
 8004682:	4b6d      	ldr	r3, [pc, #436]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6c      	ldr	r2, [pc, #432]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0xb0>
 8004690:	4b69      	ldr	r3, [pc, #420]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a68      	ldr	r2, [pc, #416]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b66      	ldr	r3, [pc, #408]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fd fb0c 	bl	8001ccc <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fd fb08 	bl	8001ccc <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e207      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0xc0>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fd faf8 	bl	8001ccc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fd faf4 	bl	8001ccc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1f3      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f2:	4b51      	ldr	r3, [pc, #324]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0xe8>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d063      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800470e:	4b4a      	ldr	r3, [pc, #296]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471a:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004722:	2b08      	cmp	r3, #8
 8004724:	d11c      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004726:	4b44      	ldr	r3, [pc, #272]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e1c7      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4937      	ldr	r1, [pc, #220]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	e03a      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_RCC_OscConfig+0x244>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd faad 	bl	8001ccc <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004776:	f7fd faa9 	bl	8001ccc <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e1a8      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b28      	ldr	r3, [pc, #160]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4925      	ldr	r1, [pc, #148]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_OscConfig+0x244>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fd fa8c 	bl	8001ccc <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fd fa88 	bl	8001ccc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e187      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d036      	beq.n	8004850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_RCC_OscConfig+0x248>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fd fa6c 	bl	8001ccc <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fd fa68 	bl	8001ccc <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e167      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_OscConfig+0x240>)
 800480c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x200>
 8004816:	e01b      	b.n	8004850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_OscConfig+0x248>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fd fa55 	bl	8001ccc <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	e00e      	b.n	8004844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004826:	f7fd fa51 	bl	8001ccc <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d907      	bls.n	8004844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e150      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
 8004838:	40023800 	.word	0x40023800
 800483c:	42470000 	.word	0x42470000
 8004840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004844:	4b88      	ldr	r3, [pc, #544]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1ea      	bne.n	8004826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8097 	beq.w	800498c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004862:	4b81      	ldr	r3, [pc, #516]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	4b7d      	ldr	r3, [pc, #500]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a7c      	ldr	r2, [pc, #496]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b7a      	ldr	r3, [pc, #488]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d118      	bne.n	80048cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489a:	4b74      	ldr	r3, [pc, #464]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a73      	ldr	r2, [pc, #460]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7fd fa11 	bl	8001ccc <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ae:	f7fd fa0d 	bl	8001ccc <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e10c      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <HAL_RCC_OscConfig+0x474>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d106      	bne.n	80048e2 <HAL_RCC_OscConfig+0x2ea>
 80048d4:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4a63      	ldr	r2, [pc, #396]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6713      	str	r3, [r2, #112]	; 0x70
 80048e0:	e01c      	b.n	800491c <HAL_RCC_OscConfig+0x324>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x30c>
 80048ea:	4b5f      	ldr	r3, [pc, #380]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a5e      	ldr	r2, [pc, #376]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
 80048f6:	4b5c      	ldr	r3, [pc, #368]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4a5b      	ldr	r2, [pc, #364]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6713      	str	r3, [r2, #112]	; 0x70
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0x324>
 8004904:	4b58      	ldr	r3, [pc, #352]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4a57      	ldr	r2, [pc, #348]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6713      	str	r3, [r2, #112]	; 0x70
 8004910:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a54      	ldr	r2, [pc, #336]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004916:	f023 0304 	bic.w	r3, r3, #4
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d015      	beq.n	8004950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fd f9d2 	bl	8001ccc <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	e00a      	b.n	8004942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fd f9ce 	bl	8001ccc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0cb      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ee      	beq.n	800492c <HAL_RCC_OscConfig+0x334>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004950:	f7fd f9bc 	bl	8001ccc <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fd f9b8 	bl	8001ccc <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0b5      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496e:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1ee      	bne.n	8004958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004980:	4b39      	ldr	r3, [pc, #228]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	4a38      	ldr	r2, [pc, #224]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80a1 	beq.w	8004ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004996:	4b34      	ldr	r3, [pc, #208]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d05c      	beq.n	8004a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d141      	bne.n	8004a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049aa:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fd f98c 	bl	8001ccc <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fd f988 	bl	8001ccc <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e087      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	3b01      	subs	r3, #1
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	491b      	ldr	r1, [pc, #108]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fd f961 	bl	8001ccc <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fd f95d 	bl	8001ccc <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e05c      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x416>
 8004a2c:	e054      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_RCC_OscConfig+0x478>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fd f94a 	bl	8001ccc <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3c:	f7fd f946 	bl	8001ccc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e045      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <HAL_RCC_OscConfig+0x470>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x444>
 8004a5a:	e03d      	b.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e038      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_OscConfig+0x4ec>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d028      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d121      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d11a      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d111      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	3b01      	subs	r3, #1
 8004abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d107      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800

08004ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0cc      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004afc:	4b68      	ldr	r3, [pc, #416]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d90c      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b65      	ldr	r3, [pc, #404]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0b8      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b3c:	4b59      	ldr	r3, [pc, #356]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b54:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a52      	ldr	r2, [pc, #328]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	494d      	ldr	r1, [pc, #308]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d044      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d119      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e07f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba6:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e06f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e067      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bc6:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f023 0203 	bic.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4934      	ldr	r1, [pc, #208]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd8:	f7fd f878 	bl	8001ccc <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be0:	f7fd f874 	bl	8001ccc <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e04f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 020c 	and.w	r2, r3, #12
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1eb      	bne.n	8004be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c08:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d20c      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e032      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4916      	ldr	r1, [pc, #88]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	490e      	ldr	r1, [pc, #56]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c6e:	f000 f821 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004c72:	4602      	mov	r2, r0
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	490a      	ldr	r1, [pc, #40]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8004c80:	5ccb      	ldrb	r3, [r1, r3]
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fc ff04 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023c00 	.word	0x40023c00
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	0800ca3c 	.word	0x0800ca3c
 8004cac:	2000011c 	.word	0x2000011c
 8004cb0:	20000120 	.word	0x20000120

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cb8:	b090      	sub	sp, #64	; 0x40
 8004cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ccc:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d00d      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	f200 80a1 	bhi.w	8004e20 <HAL_RCC_GetSysClockFreq+0x16c>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d003      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x3a>
 8004ce6:	e09b      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce8:	4b53      	ldr	r3, [pc, #332]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004cec:	e09b      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cee:	4b53      	ldr	r3, [pc, #332]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004cf2:	e098      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf4:	4b4f      	ldr	r3, [pc, #316]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cfe:	4b4d      	ldr	r3, [pc, #308]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d028      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0a:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	2200      	movs	r2, #0
 8004d12:	623b      	str	r3, [r7, #32]
 8004d14:	627a      	str	r2, [r7, #36]	; 0x24
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8004d20:	fb03 f201 	mul.w	r2, r3, r1
 8004d24:	2300      	movs	r3, #0
 8004d26:	fb00 f303 	mul.w	r3, r0, r3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	4a43      	ldr	r2, [pc, #268]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8004d2e:	fba0 1202 	umull	r1, r2, r0, r2
 8004d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d34:	460a      	mov	r2, r1
 8004d36:	62ba      	str	r2, [r7, #40]	; 0x28
 8004d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3a:	4413      	add	r3, r2
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	2200      	movs	r2, #0
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	61fa      	str	r2, [r7, #28]
 8004d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004d4e:	f7fb fedb 	bl	8000b08 <__aeabi_uldivmod>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4613      	mov	r3, r2
 8004d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d5a:	e053      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5c:	4b35      	ldr	r3, [pc, #212]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	2200      	movs	r2, #0
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	617a      	str	r2, [r7, #20]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d6e:	f04f 0b00 	mov.w	fp, #0
 8004d72:	4652      	mov	r2, sl
 8004d74:	465b      	mov	r3, fp
 8004d76:	f04f 0000 	mov.w	r0, #0
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	0159      	lsls	r1, r3, #5
 8004d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d84:	0150      	lsls	r0, r2, #5
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	ebb2 080a 	subs.w	r8, r2, sl
 8004d8e:	eb63 090b 	sbc.w	r9, r3, fp
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004da2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004da6:	ebb2 0408 	subs.w	r4, r2, r8
 8004daa:	eb63 0509 	sbc.w	r5, r3, r9
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	00eb      	lsls	r3, r5, #3
 8004db8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dbc:	00e2      	lsls	r2, r4, #3
 8004dbe:	4614      	mov	r4, r2
 8004dc0:	461d      	mov	r5, r3
 8004dc2:	eb14 030a 	adds.w	r3, r4, sl
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	eb45 030b 	adc.w	r3, r5, fp
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dda:	4629      	mov	r1, r5
 8004ddc:	028b      	lsls	r3, r1, #10
 8004dde:	4621      	mov	r1, r4
 8004de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004de4:	4621      	mov	r1, r4
 8004de6:	028a      	lsls	r2, r1, #10
 8004de8:	4610      	mov	r0, r2
 8004dea:	4619      	mov	r1, r3
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	2200      	movs	r2, #0
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	60fa      	str	r2, [r7, #12]
 8004df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004df8:	f7fb fe86 	bl	8000b08 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4613      	mov	r3, r2
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	0c1b      	lsrs	r3, r3, #16
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e1e:	e002      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3740      	adds	r7, #64	; 0x40
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
 8004e38:	00f42400 	.word	0x00f42400
 8004e3c:	017d7840 	.word	0x017d7840

08004e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e44:	4b03      	ldr	r3, [pc, #12]	; (8004e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e46:	681b      	ldr	r3, [r3, #0]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	2000011c 	.word	0x2000011c

08004e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e5c:	f7ff fff0 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0b5b      	lsrs	r3, r3, #13
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4903      	ldr	r1, [pc, #12]	; (8004e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	0800ca4c 	.word	0x0800ca4c

08004e80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	220f      	movs	r2, #15
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e90:	4b12      	ldr	r3, [pc, #72]	; (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0203 	and.w	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004eb4:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_RCC_GetClockConfig+0x5c>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	08db      	lsrs	r3, r3, #3
 8004eba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <HAL_RCC_GetClockConfig+0x60>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0207 	and.w	r2, r3, #7
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	40023c00 	.word	0x40023c00

08004ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e041      	b.n	8004f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f839 	bl	8004f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f000 f9ca 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d001      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e044      	b.n	800503a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d018      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x6c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fda:	d013      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x6c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1a      	ldr	r2, [pc, #104]	; (800504c <HAL_TIM_Base_Start_IT+0xb4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x6c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a19      	ldr	r2, [pc, #100]	; (8005050 <HAL_TIM_Base_Start_IT+0xb8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x6c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a17      	ldr	r2, [pc, #92]	; (8005054 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x6c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a16      	ldr	r2, [pc, #88]	; (8005058 <HAL_TIM_Base_Start_IT+0xc0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d111      	bne.n	8005028 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b06      	cmp	r3, #6
 8005014:	d010      	beq.n	8005038 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	e007      	b.n	8005038 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40010000 	.word	0x40010000
 800504c:	40000400 	.word	0x40000400
 8005050:	40000800 	.word	0x40000800
 8005054:	40000c00 	.word	0x40000c00
 8005058:	40014000 	.word	0x40014000

0800505c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b02      	cmp	r3, #2
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0202 	mvn.w	r2, #2
 8005088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f8ee 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f8e0 	bl	800526c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f8f1 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d122      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11b      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0204 	mvn.w	r2, #4
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8c4 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f8b6 	bl	800526c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8c7 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b08      	cmp	r3, #8
 8005118:	d122      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0208 	mvn.w	r2, #8
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f89a 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f88c 	bl	800526c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f89d 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d122      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2208      	movs	r2, #8
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f870 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f862 	bl	800526c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f873 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0201 	mvn.w	r2, #1
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fba4 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	2b80      	cmp	r3, #128	; 0x80
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f8e2 	bl	80053d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d10e      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d107      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f838 	bl	80052a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b20      	cmp	r3, #32
 8005244:	d10e      	bne.n	8005264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b20      	cmp	r3, #32
 8005252:	d107      	bne.n	8005264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0220 	mvn.w	r2, #32
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8ac 	bl	80053bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a34      	ldr	r2, [pc, #208]	; (80053a0 <TIM_Base_SetConfig+0xe4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a31      	ldr	r2, [pc, #196]	; (80053a4 <TIM_Base_SetConfig+0xe8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <TIM_Base_SetConfig+0xec>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x38>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a2f      	ldr	r2, [pc, #188]	; (80053ac <TIM_Base_SetConfig+0xf0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <TIM_Base_SetConfig+0xe4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01b      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d017      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <TIM_Base_SetConfig+0xe8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a21      	ldr	r2, [pc, #132]	; (80053a8 <TIM_Base_SetConfig+0xec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00f      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a20      	ldr	r2, [pc, #128]	; (80053ac <TIM_Base_SetConfig+0xf0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00b      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <TIM_Base_SetConfig+0xf4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1e      	ldr	r2, [pc, #120]	; (80053b4 <TIM_Base_SetConfig+0xf8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d003      	beq.n	8005346 <TIM_Base_SetConfig+0x8a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1d      	ldr	r2, [pc, #116]	; (80053b8 <TIM_Base_SetConfig+0xfc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d108      	bne.n	8005358 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <TIM_Base_SetConfig+0xe4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d103      	bne.n	800538c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	615a      	str	r2, [r3, #20]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800

080053bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e4:	b084      	sub	sp, #16
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	f107 001c 	add.w	r0, r7, #28
 80053f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d122      	bne.n	8005442 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d105      	bne.n	8005436 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fbee 	bl	8006c18 <USB_CoreReset>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e01a      	b.n	8005478 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f001 fbe2 	bl	8006c18 <USB_CoreReset>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
 800546a:	e005      	b.n	8005478 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10b      	bne.n	8005496 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f043 0206 	orr.w	r2, r3, #6
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a2:	b004      	add	sp, #16
 80054a4:	4770      	bx	lr
	...

080054a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d165      	bne.n	8005588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a41      	ldr	r2, [pc, #260]	; (80055c4 <USB_SetTurnaroundTime+0x11c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d906      	bls.n	80054d2 <USB_SetTurnaroundTime+0x2a>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a40      	ldr	r2, [pc, #256]	; (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d202      	bcs.n	80054d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054cc:	230f      	movs	r3, #15
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e062      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a3c      	ldr	r2, [pc, #240]	; (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d306      	bcc.n	80054e8 <USB_SetTurnaroundTime+0x40>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a3b      	ldr	r2, [pc, #236]	; (80055cc <USB_SetTurnaroundTime+0x124>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d202      	bcs.n	80054e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054e2:	230e      	movs	r3, #14
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e057      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a38      	ldr	r2, [pc, #224]	; (80055cc <USB_SetTurnaroundTime+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d306      	bcc.n	80054fe <USB_SetTurnaroundTime+0x56>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a37      	ldr	r2, [pc, #220]	; (80055d0 <USB_SetTurnaroundTime+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d202      	bcs.n	80054fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054f8:	230d      	movs	r3, #13
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e04c      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4a33      	ldr	r2, [pc, #204]	; (80055d0 <USB_SetTurnaroundTime+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d306      	bcc.n	8005514 <USB_SetTurnaroundTime+0x6c>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a32      	ldr	r2, [pc, #200]	; (80055d4 <USB_SetTurnaroundTime+0x12c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d802      	bhi.n	8005514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800550e:	230c      	movs	r3, #12
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e041      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a2f      	ldr	r2, [pc, #188]	; (80055d4 <USB_SetTurnaroundTime+0x12c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d906      	bls.n	800552a <USB_SetTurnaroundTime+0x82>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a2e      	ldr	r2, [pc, #184]	; (80055d8 <USB_SetTurnaroundTime+0x130>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d802      	bhi.n	800552a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005524:	230b      	movs	r3, #11
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e036      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <USB_SetTurnaroundTime+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d906      	bls.n	8005540 <USB_SetTurnaroundTime+0x98>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4a29      	ldr	r2, [pc, #164]	; (80055dc <USB_SetTurnaroundTime+0x134>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d802      	bhi.n	8005540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800553a:	230a      	movs	r3, #10
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e02b      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4a26      	ldr	r2, [pc, #152]	; (80055dc <USB_SetTurnaroundTime+0x134>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d906      	bls.n	8005556 <USB_SetTurnaroundTime+0xae>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <USB_SetTurnaroundTime+0x138>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d202      	bcs.n	8005556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005550:	2309      	movs	r3, #9
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e020      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <USB_SetTurnaroundTime+0x138>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d306      	bcc.n	800556c <USB_SetTurnaroundTime+0xc4>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a20      	ldr	r2, [pc, #128]	; (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d802      	bhi.n	800556c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005566:	2308      	movs	r3, #8
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e015      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d906      	bls.n	8005582 <USB_SetTurnaroundTime+0xda>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <USB_SetTurnaroundTime+0x140>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d202      	bcs.n	8005582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800557c:	2307      	movs	r3, #7
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e00a      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005582:	2306      	movs	r3, #6
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e007      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800558e:	2309      	movs	r3, #9
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	e001      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005594:	2309      	movs	r3, #9
 8005596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	00d8acbf 	.word	0x00d8acbf
 80055c8:	00e4e1c0 	.word	0x00e4e1c0
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	01067380 	.word	0x01067380
 80055d4:	011a499f 	.word	0x011a499f
 80055d8:	01312cff 	.word	0x01312cff
 80055dc:	014ca43f 	.word	0x014ca43f
 80055e0:	016e3600 	.word	0x016e3600
 80055e4:	01a6ab1f 	.word	0x01a6ab1f
 80055e8:	01e84800 	.word	0x01e84800

080055ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d115      	bne.n	800567e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800565e:	2001      	movs	r0, #1
 8005660:	f7fc fb40 	bl	8001ce4 <HAL_Delay>
      ms++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 fa45 	bl	8006afa <USB_GetMode>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d01e      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b31      	cmp	r3, #49	; 0x31
 800567a:	d9f0      	bls.n	800565e <USB_SetCurrentMode+0x2e>
 800567c:	e01a      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d115      	bne.n	80056b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005690:	2001      	movs	r0, #1
 8005692:	f7fc fb27 	bl	8001ce4 <HAL_Delay>
      ms++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 fa2c 	bl	8006afa <USB_GetMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b31      	cmp	r3, #49	; 0x31
 80056ac:	d9f0      	bls.n	8005690 <USB_SetCurrentMode+0x60>
 80056ae:	e001      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e005      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b32      	cmp	r3, #50	; 0x32
 80056b8:	d101      	bne.n	80056be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c8:	b084      	sub	sp, #16
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e009      	b.n	80056fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	3340      	adds	r3, #64	; 0x40
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	3301      	adds	r3, #1
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b0e      	cmp	r3, #14
 8005700:	d9f2      	bls.n	80056e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11c      	bne.n	8005742 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005716:	f043 0302 	orr.w	r3, r3, #2
 800571a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
 8005740:	e00b      	b.n	800575a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005760:	461a      	mov	r2, r3
 8005762:	2300      	movs	r3, #0
 8005764:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	4619      	mov	r1, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	461a      	mov	r2, r3
 8005776:	680b      	ldr	r3, [r1, #0]
 8005778:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10c      	bne.n	800579a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005786:	2100      	movs	r1, #0
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f965 	bl	8005a58 <USB_SetDevSpeed>
 800578e:	e008      	b.n	80057a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005790:	2101      	movs	r1, #1
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f960 	bl	8005a58 <USB_SetDevSpeed>
 8005798:	e003      	b.n	80057a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800579a:	2103      	movs	r1, #3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f95b 	bl	8005a58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057a2:	2110      	movs	r1, #16
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8f3 	bl	8005990 <USB_FlushTxFifo>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f91f 	bl	80059f8 <USB_FlushRxFifo>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	461a      	mov	r2, r3
 80057cc:	2300      	movs	r3, #0
 80057ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d6:	461a      	mov	r2, r3
 80057d8:	2300      	movs	r3, #0
 80057da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	461a      	mov	r2, r3
 80057e4:	2300      	movs	r3, #0
 80057e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	e043      	b.n	8005876 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005804:	d118      	bne.n	8005838 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	461a      	mov	r2, r3
 800581a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e013      	b.n	800584a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	461a      	mov	r2, r3
 8005830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e008      	b.n	800584a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	461a      	mov	r2, r3
 8005846:	2300      	movs	r3, #0
 8005848:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	461a      	mov	r2, r3
 8005858:	2300      	movs	r3, #0
 800585a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	461a      	mov	r2, r3
 800586a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800586e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	3301      	adds	r3, #1
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	429a      	cmp	r2, r3
 800587c:	d3b7      	bcc.n	80057ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e043      	b.n	800590c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800589a:	d118      	bne.n	80058ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	461a      	mov	r2, r3
 80058b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e013      	b.n	80058e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	461a      	mov	r2, r3
 80058c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e008      	b.n	80058e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	461a      	mov	r2, r3
 80058dc:	2300      	movs	r3, #0
 80058de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	461a      	mov	r2, r3
 80058ee:	2300      	movs	r3, #0
 80058f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fe:	461a      	mov	r2, r3
 8005900:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005904:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3301      	adds	r3, #1
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d3b7      	bcc.n	8005884 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005926:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005934:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f043 0210 	orr.w	r2, r3, #16
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	4b0f      	ldr	r3, [pc, #60]	; (800598c <USB_DevInit+0x2c4>)
 800594e:	4313      	orrs	r3, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f043 0208 	orr.w	r2, r3, #8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d107      	bne.n	800597c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005974:	f043 0304 	orr.w	r3, r3, #4
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005988:	b004      	add	sp, #16
 800598a:	4770      	bx	lr
 800598c:	803c3800 	.word	0x803c3800

08005990 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <USB_FlushTxFifo+0x64>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e01b      	b.n	80059e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	daf2      	bge.n	800599e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	019b      	lsls	r3, r3, #6
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <USB_FlushTxFifo+0x64>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e006      	b.n	80059e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d0f0      	beq.n	80059c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	00030d40 	.word	0x00030d40

080059f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4a11      	ldr	r2, [pc, #68]	; (8005a54 <USB_FlushRxFifo+0x5c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e018      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	daf2      	bge.n	8005a04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2210      	movs	r2, #16
 8005a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a08      	ldr	r2, [pc, #32]	; (8005a54 <USB_FlushRxFifo+0x5c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e006      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d0f0      	beq.n	8005a28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	00030d40 	.word	0x00030d40

08005a58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0306 	and.w	r3, r3, #6
 8005aa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	75fb      	strb	r3, [r7, #23]
 8005aae:	e00a      	b.n	8005ac6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d002      	beq.n	8005abc <USB_GetDevSpeed+0x32>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d102      	bne.n	8005ac2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005abc:	2302      	movs	r3, #2
 8005abe:	75fb      	strb	r3, [r7, #23]
 8005ac0:	e001      	b.n	8005ac6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ac2:	230f      	movs	r3, #15
 8005ac4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d13a      	bne.n	8005b66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	2101      	movs	r1, #1
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	68f9      	ldr	r1, [r7, #12]
 8005b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d155      	bne.n	8005bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	059b      	lsls	r3, r3, #22
 8005b4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	e036      	b.n	8005bd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	2101      	movs	r1, #1
 8005b78:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11a      	bne.n	8005bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	791b      	ldrb	r3, [r3, #4]
 8005bb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d161      	bne.n	8005cc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c16:	d11f      	bne.n	8005c58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c78:	4013      	ands	r3, r2
 8005c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	0159      	lsls	r1, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4b35      	ldr	r3, [pc, #212]	; (8005d94 <USB_DeactivateEndpoint+0x1b0>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]
 8005cc2:	e060      	b.n	8005d86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cda:	d11f      	bne.n	8005d1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	43db      	mvns	r3, r3
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	2101      	movs	r1, #1
 8005d52:	fa01 f303 	lsl.w	r3, r1, r3
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d60:	4013      	ands	r3, r2
 8005d62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	0159      	lsls	r1, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	440b      	add	r3, r1
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <USB_DeactivateEndpoint+0x1b4>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	ec337800 	.word	0xec337800
 8005d98:	eff37800 	.word	0xeff37800

08005d9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	f040 815c 	bne.w	8006076 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d132      	bne.n	8005e2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005de4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e24:	0cdb      	lsrs	r3, r3, #19
 8005e26:	04db      	lsls	r3, r3, #19
 8005e28:	6113      	str	r3, [r2, #16]
 8005e2a:	e074      	b.n	8005f16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e46:	0cdb      	lsrs	r3, r3, #19
 8005e48:	04db      	lsls	r3, r3, #19
 8005e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6999      	ldr	r1, [r3, #24]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	440b      	add	r3, r1
 8005e88:	1e59      	subs	r1, r3, #1
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e94:	4b9d      	ldr	r3, [pc, #628]	; (800610c <USB_EPStartXfer+0x370>)
 8005e96:	400b      	ands	r3, r1
 8005e98:	69b9      	ldr	r1, [r7, #24]
 8005e9a:	0148      	lsls	r0, r1, #5
 8005e9c:	69f9      	ldr	r1, [r7, #28]
 8005e9e:	4401      	add	r1, r0
 8005ea0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ebe:	69b9      	ldr	r1, [r7, #24]
 8005ec0:	0148      	lsls	r0, r1, #5
 8005ec2:	69f9      	ldr	r1, [r7, #28]
 8005ec4:	4401      	add	r1, r0
 8005ec6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d11f      	bne.n	8005f16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ef4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d14b      	bne.n	8005fb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	461a      	mov	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	791b      	ldrb	r3, [r3, #4]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d128      	bne.n	8005f92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d110      	bne.n	8005f72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e00f      	b.n	8005f92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e133      	b.n	800621c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d015      	beq.n	8006008 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 811b 	beq.w	800621c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006002:	4313      	orrs	r3, r2
 8006004:	634b      	str	r3, [r1, #52]	; 0x34
 8006006:	e109      	b.n	800621c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d110      	bne.n	800603a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	e00f      	b.n	800605a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006058:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6919      	ldr	r1, [r3, #16]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	b298      	uxth	r0, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4603      	mov	r3, r0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fade 	bl	8006630 <USB_WritePacket>
 8006074:	e0d2      	b.n	800621c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006090:	0cdb      	lsrs	r3, r3, #19
 8006092:	04db      	lsls	r3, r3, #19
 8006094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d126      	bne.n	8006110 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d8:	69b9      	ldr	r1, [r7, #24]
 80060da:	0148      	lsls	r0, r1, #5
 80060dc:	69f9      	ldr	r1, [r7, #28]
 80060de:	4401      	add	r1, r0
 80060e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060e4:	4313      	orrs	r3, r2
 80060e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006106:	6113      	str	r3, [r2, #16]
 8006108:	e03a      	b.n	8006180 <USB_EPStartXfer+0x3e4>
 800610a:	bf00      	nop
 800610c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4413      	add	r3, r2
 800611a:	1e5a      	subs	r2, r3, #1
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	8afa      	ldrh	r2, [r7, #22]
 800612c:	fb03 f202 	mul.w	r2, r3, r2
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	8afb      	ldrh	r3, [r7, #22]
 8006144:	04d9      	lsls	r1, r3, #19
 8006146:	4b38      	ldr	r3, [pc, #224]	; (8006228 <USB_EPStartXfer+0x48c>)
 8006148:	400b      	ands	r3, r1
 800614a:	69b9      	ldr	r1, [r7, #24]
 800614c:	0148      	lsls	r0, r1, #5
 800614e:	69f9      	ldr	r1, [r7, #28]
 8006150:	4401      	add	r1, r0
 8006152:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006156:	4313      	orrs	r3, r2
 8006158:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	0148      	lsls	r0, r1, #5
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	4401      	add	r1, r0
 8006178:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800617c:	4313      	orrs	r3, r2
 800617e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d10d      	bne.n	80061a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6919      	ldr	r1, [r3, #16]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	460a      	mov	r2, r1
 80061a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	791b      	ldrb	r3, [r3, #4]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d128      	bne.n	80061fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d110      	bne.n	80061dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	e00f      	b.n	80061fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800621a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	1ff80000 	.word	0x1ff80000

0800622c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2b01      	cmp	r3, #1
 800624a:	f040 80ce 	bne.w	80063ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d132      	bne.n	80062bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006298:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b4:	0cdb      	lsrs	r3, r3, #19
 80062b6:	04db      	lsls	r3, r3, #19
 80062b8:	6113      	str	r3, [r2, #16]
 80062ba:	e04e      	b.n	800635a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d6:	0cdb      	lsrs	r3, r3, #19
 80062d8:	04db      	lsls	r3, r3, #19
 80062da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d903      	bls.n	8006314 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634a:	6939      	ldr	r1, [r7, #16]
 800634c:	0148      	lsls	r0, r1, #5
 800634e:	6979      	ldr	r1, [r7, #20]
 8006350:	4401      	add	r1, r0
 8006352:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006356:	4313      	orrs	r3, r2
 8006358:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d11e      	bne.n	800639e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e097      	b.n	80064ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8083 	beq.w	80064ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	2101      	movs	r1, #1
 80063da:	fa01 f303 	lsl.w	r3, r1, r3
 80063de:	6979      	ldr	r1, [r7, #20]
 80063e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e4:	4313      	orrs	r3, r2
 80063e6:	634b      	str	r3, [r1, #52]	; 0x34
 80063e8:	e071      	b.n	80064ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006404:	0cdb      	lsrs	r3, r3, #19
 8006406:	04db      	lsls	r3, r3, #19
 8006408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800642c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647c:	6939      	ldr	r1, [r7, #16]
 800647e:	0148      	lsls	r0, r1, #5
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	4401      	add	r1, r0
 8006484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006488:	4313      	orrs	r3, r2
 800648a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10d      	bne.n	80064ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6919      	ldr	r1, [r3, #16]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	460a      	mov	r2, r1
 80064ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d14a      	bne.n	8006590 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800650e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006512:	f040 8086 	bne.w	8006622 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	7812      	ldrb	r2, [r2, #0]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006538:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800655c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3301      	adds	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f242 7210 	movw	r2, #10000	; 0x2710
 800656a:	4293      	cmp	r3, r2
 800656c:	d902      	bls.n	8006574 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
          break;
 8006572:	e056      	b.n	8006622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658c:	d0e7      	beq.n	800655e <USB_EPStopXfer+0x82>
 800658e:	e048      	b.n	8006622 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a8:	d13b      	bne.n	8006622 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	7812      	ldrb	r2, [r2, #0]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80065fe:	4293      	cmp	r3, r2
 8006600:	d902      	bls.n	8006608 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
          break;
 8006606:	e00c      	b.n	8006622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800661c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006620:	d0e7      	beq.n	80065f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006622:	7dfb      	ldrb	r3, [r7, #23]
}
 8006624:	4618      	mov	r0, r3
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006630:	b480      	push	{r7}
 8006632:	b089      	sub	sp, #36	; 0x24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	460b      	mov	r3, r1
 8006640:	71fb      	strb	r3, [r7, #7]
 8006642:	4613      	mov	r3, r2
 8006644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800664e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006652:	2b00      	cmp	r3, #0
 8006654:	d123      	bne.n	800669e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006656:	88bb      	ldrh	r3, [r7, #4]
 8006658:	3303      	adds	r3, #3
 800665a:	089b      	lsrs	r3, r3, #2
 800665c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	e018      	b.n	8006696 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	031a      	lsls	r2, r3, #12
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	4413      	add	r3, r2
 800666c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006670:	461a      	mov	r2, r3
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3301      	adds	r3, #1
 800667c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	3301      	adds	r3, #1
 8006682:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3301      	adds	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	3301      	adds	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	3301      	adds	r3, #1
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	429a      	cmp	r2, r3
 800669c:	d3e2      	bcc.n	8006664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3724      	adds	r7, #36	; 0x24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b08b      	sub	sp, #44	; 0x2c
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	089b      	lsrs	r3, r3, #2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066d2:	2300      	movs	r3, #0
 80066d4:	623b      	str	r3, [r7, #32]
 80066d6:	e014      	b.n	8006702 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	3301      	adds	r3, #1
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	3301      	adds	r3, #1
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	3301      	adds	r3, #1
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	3301      	adds	r3, #1
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	3301      	adds	r3, #1
 8006700:	623b      	str	r3, [r7, #32]
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	429a      	cmp	r2, r3
 8006708:	d3e6      	bcc.n	80066d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800670a:	8bfb      	ldrh	r3, [r7, #30]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01e      	beq.n	800674e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	461a      	mov	r2, r3
 800671c:	f107 0310 	add.w	r3, r7, #16
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	b2da      	uxtb	r2, r3
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	701a      	strb	r2, [r3, #0]
      i++;
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	3301      	adds	r3, #1
 800673a:	623b      	str	r3, [r7, #32]
      pDest++;
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	3301      	adds	r3, #1
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006742:	8bfb      	ldrh	r3, [r7, #30]
 8006744:	3b01      	subs	r3, #1
 8006746:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006748:	8bfb      	ldrh	r3, [r7, #30]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1ea      	bne.n	8006724 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006750:	4618      	mov	r0, r3
 8006752:	372c      	adds	r7, #44	; 0x2c
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d12c      	bne.n	80067d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	db12      	blt.n	80067b0 <USB_EPSetStall+0x54>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00f      	beq.n	80067b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	e02b      	b.n	800682a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	db12      	blt.n	800680a <USB_EPSetStall+0xae>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00f      	beq.n	800680a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d128      	bne.n	80068a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	791b      	ldrb	r3, [r3, #4]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d003      	beq.n	8006884 <USB_EPClearStall+0x4c>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	791b      	ldrb	r3, [r3, #4]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d138      	bne.n	80068f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	e027      	b.n	80068f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	791b      	ldrb	r3, [r3, #4]
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d003      	beq.n	80068d6 <USB_EPClearStall+0x9e>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	791b      	ldrb	r3, [r3, #4]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d10f      	bne.n	80068f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006922:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006938:	68f9      	ldr	r1, [r7, #12]
 800693a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697e:	f023 0302 	bic.w	r3, r3, #2
 8006982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069ac:	f023 0303 	bic.w	r3, r3, #3
 80069b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c0:	f043 0302 	orr.w	r3, r3, #2
 80069c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4013      	ands	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	0c1b      	lsrs	r3, r3, #16
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	b29b      	uxth	r3, r3
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a90:	68bb      	ldr	r3, [r7, #8]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b087      	sub	sp, #28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	01db      	lsls	r3, r3, #7
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006aec:	68bb      	ldr	r3, [r7, #8]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0301 	and.w	r3, r3, #1
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b34:	f023 0307 	bic.w	r3, r3, #7
 8006b38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	460b      	mov	r3, r1
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	333c      	adds	r3, #60	; 0x3c
 8006b72:	3304      	adds	r3, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <USB_EP0_OutStart+0xb8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d90a      	bls.n	8006b96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b90:	d101      	bne.n	8006b96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e037      	b.n	8006c06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc4:	f043 0318 	orr.w	r3, r3, #24
 8006bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006bdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d10f      	bne.n	8006c04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	461a      	mov	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	4f54300a 	.word	0x4f54300a

08006c18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a13      	ldr	r2, [pc, #76]	; (8006c7c <USB_CoreReset+0x64>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e01b      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	daf2      	bge.n	8006c24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f043 0201 	orr.w	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <USB_CoreReset+0x64>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d901      	bls.n	8006c60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e006      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d0f0      	beq.n	8006c4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	00030d40 	.word	0x00030d40

08006c80 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006c8c:	2018      	movs	r0, #24
 8006c8e:	f005 fa69 	bl	800c164 <USBD_static_malloc>
 8006c92:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	32b0      	adds	r2, #176	; 0xb0
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006caa:	2302      	movs	r3, #2
 8006cac:	e08a      	b.n	8006dc4 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	32b0      	adds	r2, #176	; 0xb0
 8006cb8:	68f9      	ldr	r1, [r7, #12]
 8006cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	32b0      	adds	r2, #176	; 0xb0
 8006cc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7c1b      	ldrb	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d11b      	bne.n	8006d12 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006cda:	4b3c      	ldr	r3, [pc, #240]	; (8006dcc <USBD_CUSTOM_HID_Init+0x14c>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	f003 020f 	and.w	r2, r3, #15
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	3326      	adds	r3, #38	; 0x26
 8006cf0:	2205      	movs	r2, #5
 8006cf2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006cf4:	4b36      	ldr	r3, [pc, #216]	; (8006dd0 <USBD_CUSTOM_HID_Init+0x150>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 020f 	and.w	r2, r3, #15
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006d0c:	2205      	movs	r2, #5
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	e01a      	b.n	8006d48 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d12:	4b2e      	ldr	r3, [pc, #184]	; (8006dcc <USBD_CUSTOM_HID_Init+0x14c>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f003 020f 	and.w	r2, r3, #15
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	440b      	add	r3, r1
 8006d26:	3326      	adds	r3, #38	; 0x26
 8006d28:	2201      	movs	r2, #1
 8006d2a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d2c:	4b28      	ldr	r3, [pc, #160]	; (8006dd0 <USBD_CUSTOM_HID_Init+0x150>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f003 020f 	and.w	r2, r3, #15
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006d44:	2201      	movs	r2, #1
 8006d46:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006d48:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <USBD_CUSTOM_HID_Init+0x14c>)
 8006d4a:	7819      	ldrb	r1, [r3, #0]
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	2203      	movs	r2, #3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f005 f8f6 	bl	800bf42 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006d56:	4b1d      	ldr	r3, [pc, #116]	; (8006dcc <USBD_CUSTOM_HID_Init+0x14c>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f003 020f 	and.w	r2, r3, #15
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	3324      	adds	r3, #36	; 0x24
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006d70:	4b17      	ldr	r3, [pc, #92]	; (8006dd0 <USBD_CUSTOM_HID_Init+0x150>)
 8006d72:	7819      	ldrb	r1, [r3, #0]
 8006d74:	2302      	movs	r3, #2
 8006d76:	2203      	movs	r2, #3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f005 f8e2 	bl	800bf42 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <USBD_CUSTOM_HID_Init+0x150>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f003 020f 	and.w	r2, r3, #15
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d96:	2201      	movs	r2, #1
 8006d98:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	33b0      	adds	r3, #176	; 0xb0
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4413      	add	r3, r2
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006db4:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <USBD_CUSTOM_HID_Init+0x150>)
 8006db6:	7819      	ldrb	r1, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	2302      	movs	r3, #2
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f005 f9af 	bl	800c120 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	200001a2 	.word	0x200001a2
 8006dd0:	200001a3 	.word	0x200001a3

08006dd4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006de0:	4b37      	ldr	r3, [pc, #220]	; (8006ec0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f005 f8d1 	bl	800bf8e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006dec:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	f003 020f 	and.w	r2, r3, #15
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	2200      	movs	r2, #0
 8006e04:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006e06:	4b2e      	ldr	r3, [pc, #184]	; (8006ec0 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	f003 020f 	and.w	r2, r3, #15
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	3326      	adds	r3, #38	; 0x26
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006e20:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f005 f8b1 	bl	800bf8e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006e2c:	4b25      	ldr	r3, [pc, #148]	; (8006ec4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	f003 020f 	and.w	r2, r3, #15
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e44:	2200      	movs	r2, #0
 8006e46:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006e48:	4b1e      	ldr	r3, [pc, #120]	; (8006ec4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	f003 020f 	and.w	r2, r3, #15
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	4613      	mov	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006e60:	2200      	movs	r2, #0
 8006e62:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	32b0      	adds	r2, #176	; 0xb0
 8006e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d01f      	beq.n	8006eb6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	33b0      	adds	r3, #176	; 0xb0
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	32b0      	adds	r2, #176	; 0xb0
 8006e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f005 f971 	bl	800c180 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	32b0      	adds	r2, #176	; 0xb0
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	200001a2 	.word	0x200001a2
 8006ec4:	200001a3 	.word	0x200001a3

08006ec8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	32b0      	adds	r2, #176	; 0xb0
 8006edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e0f8      	b.n	80070ee <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d056      	beq.n	8006fb6 <USBD_CUSTOM_HID_Setup+0xee>
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	f040 80e8 	bne.w	80070de <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	3b02      	subs	r3, #2
 8006f14:	2b09      	cmp	r3, #9
 8006f16:	d846      	bhi.n	8006fa6 <USBD_CUSTOM_HID_Setup+0xde>
 8006f18:	a201      	add	r2, pc, #4	; (adr r2, 8006f20 <USBD_CUSTOM_HID_Setup+0x58>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f79 	.word	0x08006f79
 8006f24:	08006f57 	.word	0x08006f57
 8006f28:	08006fa7 	.word	0x08006fa7
 8006f2c:	08006fa7 	.word	0x08006fa7
 8006f30:	08006fa7 	.word	0x08006fa7
 8006f34:	08006fa7 	.word	0x08006fa7
 8006f38:	08006fa7 	.word	0x08006fa7
 8006f3c:	08006f89 	.word	0x08006f89
 8006f40:	08006f67 	.word	0x08006f67
 8006f44:	08006f49 	.word	0x08006f49
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	885b      	ldrh	r3, [r3, #2]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	605a      	str	r2, [r3, #4]
          break;
 8006f54:	e02e      	b.n	8006fb4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fccc 	bl	80088fc <USBD_CtlSendData>
          break;
 8006f64:	e026      	b.n	8006fb4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	885b      	ldrh	r3, [r3, #2]
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	609a      	str	r2, [r3, #8]
          break;
 8006f76:	e01d      	b.n	8006fb4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fcbb 	bl	80088fc <USBD_CtlSendData>
          break;
 8006f86:	e015      	b.n	8006fb4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006f8e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	88db      	ldrh	r3, [r3, #6]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	bf28      	it	cs
 8006f98:	2302      	movcs	r3, #2
 8006f9a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fcd8 	bl	8008954 <USBD_CtlPrepareRx>
          break;
 8006fa4:	e006      	b.n	8006fb4 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 fc36 	bl	800881a <USBD_CtlError>
          ret = USBD_FAIL;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006fb2:	bf00      	nop
      }
      break;
 8006fb4:	e09a      	b.n	80070ec <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	2b0b      	cmp	r3, #11
 8006fbc:	f200 8086 	bhi.w	80070cc <USBD_CUSTOM_HID_Setup+0x204>
 8006fc0:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <USBD_CUSTOM_HID_Setup+0x100>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	08006ff9 	.word	0x08006ff9
 8006fcc:	080070db 	.word	0x080070db
 8006fd0:	080070cd 	.word	0x080070cd
 8006fd4:	080070cd 	.word	0x080070cd
 8006fd8:	080070cd 	.word	0x080070cd
 8006fdc:	080070cd 	.word	0x080070cd
 8006fe0:	08007023 	.word	0x08007023
 8006fe4:	080070cd 	.word	0x080070cd
 8006fe8:	080070cd 	.word	0x080070cd
 8006fec:	080070cd 	.word	0x080070cd
 8006ff0:	0800707b 	.word	0x0800707b
 8006ff4:	080070a5 	.word	0x080070a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b03      	cmp	r3, #3
 8007002:	d107      	bne.n	8007014 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007004:	f107 030e 	add.w	r3, r7, #14
 8007008:	2202      	movs	r2, #2
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f001 fc75 	bl	80088fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007012:	e063      	b.n	80070dc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 fbff 	bl	800881a <USBD_CtlError>
            ret = USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	75fb      	strb	r3, [r7, #23]
          break;
 8007020:	e05c      	b.n	80070dc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	885b      	ldrh	r3, [r3, #2]
 8007026:	0a1b      	lsrs	r3, r3, #8
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b22      	cmp	r3, #34	; 0x22
 800702c:	d110      	bne.n	8007050 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	88db      	ldrh	r3, [r3, #6]
 8007032:	2b65      	cmp	r3, #101	; 0x65
 8007034:	bf28      	it	cs
 8007036:	2365      	movcs	r3, #101	; 0x65
 8007038:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	33b0      	adds	r3, #176	; 0xb0
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	61bb      	str	r3, [r7, #24]
 800704e:	e00d      	b.n	800706c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	885b      	ldrh	r3, [r3, #2]
 8007054:	0a1b      	lsrs	r3, r3, #8
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b21      	cmp	r3, #33	; 0x21
 800705a:	d107      	bne.n	800706c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800705c:	4b26      	ldr	r3, [pc, #152]	; (80070f8 <USBD_CUSTOM_HID_Setup+0x230>)
 800705e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	88db      	ldrh	r3, [r3, #6]
 8007064:	2b09      	cmp	r3, #9
 8007066:	bf28      	it	cs
 8007068:	2309      	movcs	r3, #9
 800706a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800706c:	8bfb      	ldrh	r3, [r7, #30]
 800706e:	461a      	mov	r2, r3
 8007070:	69b9      	ldr	r1, [r7, #24]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 fc42 	bl	80088fc <USBD_CtlSendData>
          break;
 8007078:	e030      	b.n	80070dc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d107      	bne.n	8007096 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	330c      	adds	r3, #12
 800708a:	2201      	movs	r2, #1
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 fc34 	bl	80088fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007094:	e022      	b.n	80070dc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 fbbe 	bl	800881a <USBD_CtlError>
            ret = USBD_FAIL;
 800709e:	2303      	movs	r3, #3
 80070a0:	75fb      	strb	r3, [r7, #23]
          break;
 80070a2:	e01b      	b.n	80070dc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d106      	bne.n	80070be <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	885b      	ldrh	r3, [r3, #2]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070bc:	e00e      	b.n	80070dc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 fbaa 	bl	800881a <USBD_CtlError>
            ret = USBD_FAIL;
 80070c6:	2303      	movs	r3, #3
 80070c8:	75fb      	strb	r3, [r7, #23]
          break;
 80070ca:	e007      	b.n	80070dc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fba3 	bl	800881a <USBD_CtlError>
          ret = USBD_FAIL;
 80070d4:	2303      	movs	r3, #3
 80070d6:	75fb      	strb	r3, [r7, #23]
          break;
 80070d8:	e000      	b.n	80070dc <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80070da:	bf00      	nop
      }
      break;
 80070dc:	e006      	b.n	80070ec <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fb9a 	bl	800881a <USBD_CtlError>
      ret = USBD_FAIL;
 80070e6:	2303      	movs	r3, #3
 80070e8:	75fb      	strb	r3, [r7, #23]
      break;
 80070ea:	bf00      	nop
  }
  return (uint8_t)ret;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3720      	adds	r7, #32
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	2000018c 	.word	0x2000018c

080070fc <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	32b0      	adds	r2, #176	; 0xb0
 8007114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800711c:	2303      	movs	r3, #3
 800711e:	e01f      	b.n	8007160 <USBD_CUSTOM_HID_SendReport+0x64>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	32b0      	adds	r2, #176	; 0xb0
 800712a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b03      	cmp	r3, #3
 800713a:	d110      	bne.n	800715e <USBD_CUSTOM_HID_SendReport+0x62>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	7d1b      	ldrb	r3, [r3, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <USBD_CUSTOM_HID_SendReport+0x5e>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2201      	movs	r2, #1
 8007148:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800714a:	4b07      	ldr	r3, [pc, #28]	; (8007168 <USBD_CUSTOM_HID_SendReport+0x6c>)
 800714c:	7819      	ldrb	r1, [r3, #0]
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f004 ffc3 	bl	800c0de <USBD_LL_Transmit>
 8007158:	e001      	b.n	800715e <USBD_CUSTOM_HID_SendReport+0x62>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <USBD_CUSTOM_HID_SendReport+0x64>
    }
  }
  return (uint8_t)USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	200001a2 	.word	0x200001a2

0800716c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8007174:	2181      	movs	r1, #129	; 0x81
 8007176:	4815      	ldr	r0, [pc, #84]	; (80071cc <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007178:	f000 fd17 	bl	8007baa <USBD_GetEpDesc>
 800717c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800717e:	2101      	movs	r1, #1
 8007180:	4812      	ldr	r0, [pc, #72]	; (80071cc <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8007182:	f000 fd12 	bl	8007baa <USBD_GetEpDesc>
 8007186:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d009      	beq.n	80071a2 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f042 0202 	orr.w	r2, r2, #2
 8007196:	711a      	strb	r2, [r3, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d009      	beq.n	80071bc <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f042 0202 	orr.w	r2, r2, #2
 80071b0:	711a      	strb	r2, [r3, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2201      	movs	r2, #1
 80071ba:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2229      	movs	r2, #41	; 0x29
 80071c0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80071c2:	4b02      	ldr	r3, [pc, #8]	; (80071cc <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20000160 	.word	0x20000160

080071d0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80071d8:	2181      	movs	r1, #129	; 0x81
 80071da:	4815      	ldr	r0, [pc, #84]	; (8007230 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80071dc:	f000 fce5 	bl	8007baa <USBD_GetEpDesc>
 80071e0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80071e2:	2101      	movs	r1, #1
 80071e4:	4812      	ldr	r0, [pc, #72]	; (8007230 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80071e6:	f000 fce0 	bl	8007baa <USBD_GetEpDesc>
 80071ea:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d009      	beq.n	8007206 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f042 0202 	orr.w	r2, r2, #2
 80071fa:	711a      	strb	r2, [r3, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2205      	movs	r2, #5
 8007204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d009      	beq.n	8007220 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2200      	movs	r2, #0
 8007210:	f042 0202 	orr.w	r2, r2, #2
 8007214:	711a      	strb	r2, [r3, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2205      	movs	r2, #5
 800721e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2229      	movs	r2, #41	; 0x29
 8007224:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007226:	4b02      	ldr	r3, [pc, #8]	; (8007230 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000160 	.word	0x20000160

08007234 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800723c:	2181      	movs	r1, #129	; 0x81
 800723e:	4815      	ldr	r0, [pc, #84]	; (8007294 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8007240:	f000 fcb3 	bl	8007baa <USBD_GetEpDesc>
 8007244:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007246:	2101      	movs	r1, #1
 8007248:	4812      	ldr	r0, [pc, #72]	; (8007294 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800724a:	f000 fcae 	bl	8007baa <USBD_GetEpDesc>
 800724e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f042 0202 	orr.w	r2, r2, #2
 800725e:	711a      	strb	r2, [r3, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d009      	beq.n	8007284 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2200      	movs	r2, #0
 8007274:	f042 0202 	orr.w	r2, r2, #2
 8007278:	711a      	strb	r2, [r3, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2201      	movs	r2, #1
 8007282:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2229      	movs	r2, #41	; 0x29
 8007288:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800728a:	4b02      	ldr	r3, [pc, #8]	; (8007294 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000160 	.word	0x20000160

08007298 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	32b0      	adds	r2, #176	; 0xb0
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	2200      	movs	r2, #0
 80072b4:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	32b0      	adds	r2, #176	; 0xb0
 80072da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e017      	b.n	8007316 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	32b0      	adds	r2, #176	; 0xb0
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	33b0      	adds	r3, #176	; 0xb0
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	7810      	ldrb	r0, [r2, #0]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	7852      	ldrb	r2, [r2, #1]
 8007310:	4611      	mov	r1, r2
 8007312:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	32b0      	adds	r2, #176	; 0xb0
 8007332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800733a:	2303      	movs	r3, #3
 800733c:	e00f      	b.n	800735e <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	32b0      	adds	r2, #176	; 0xb0
 8007348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8007350:	7819      	ldrb	r1, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	2302      	movs	r3, #2
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f004 fee2 	bl	800c120 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	200001a3 	.word	0x200001a3

0800736c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	32b0      	adds	r2, #176	; 0xb0
 800737e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007382:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	e016      	b.n	80073bc <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d111      	bne.n	80073ba <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	33b0      	adds	r3, #176	; 0xb0
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	7810      	ldrb	r0, [r2, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	7852      	ldrb	r2, [r2, #1]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	220a      	movs	r2, #10
 80073d0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80073d2:	4b03      	ldr	r3, [pc, #12]	; (80073e0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	20000198 	.word	0x20000198

080073e4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e009      	b.n	800740c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	33b0      	adds	r3, #176	; 0xb0
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800742c:	2303      	movs	r3, #3
 800742e:	e01f      	b.n	8007470 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	79fa      	ldrb	r2, [r7, #7]
 8007462:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f004 fd05 	bl	800be74 <USBD_LL_Init>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800746e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800748c:	2303      	movs	r3, #3
 800748e:	e025      	b.n	80074dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	32ae      	adds	r2, #174	; 0xae
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00f      	beq.n	80074cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	32ae      	adds	r2, #174	; 0xae
 80074b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	f107 020e 	add.w	r2, r7, #14
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	4602      	mov	r2, r0
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f004 fd0d 	bl	800bf0c <USBD_LL_Start>
 80074f2:	4603      	mov	r3, r0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007504:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d009      	beq.n	8007540 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	4611      	mov	r1, r2
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f908 	bl	80087a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075a4:	461a      	mov	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d01a      	beq.n	80075f0 <USBD_LL_SetupStage+0x72>
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d822      	bhi.n	8007604 <USBD_LL_SetupStage+0x86>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <USBD_LL_SetupStage+0x4a>
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d00a      	beq.n	80075dc <USBD_LL_SetupStage+0x5e>
 80075c6:	e01d      	b.n	8007604 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fb5f 	bl	8007c94 <USBD_StdDevReq>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73fb      	strb	r3, [r7, #15]
      break;
 80075da:	e020      	b.n	800761e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fbc7 	bl	8007d78 <USBD_StdItfReq>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]
      break;
 80075ee:	e016      	b.n	800761e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fc29 	bl	8007e50 <USBD_StdEPReq>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]
      break;
 8007602:	e00c      	b.n	800761e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800760a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800760e:	b2db      	uxtb	r3, r3
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f004 fcda 	bl	800bfcc <USBD_LL_StallEP>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
      break;
 800761c:	bf00      	nop
  }

  return ret;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	460b      	mov	r3, r1
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800763a:	7afb      	ldrb	r3, [r7, #11]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d16e      	bne.n	800771e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007646:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800764e:	2b03      	cmp	r3, #3
 8007650:	f040 8098 	bne.w	8007784 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	429a      	cmp	r2, r3
 800765e:	d913      	bls.n	8007688 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	1ad2      	subs	r2, r2, r3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	4293      	cmp	r3, r2
 8007678:	bf28      	it	cs
 800767a:	4613      	movcs	r3, r2
 800767c:	461a      	mov	r2, r3
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f001 f984 	bl	800898e <USBD_CtlContinueRx>
 8007686:	e07d      	b.n	8007784 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	2b02      	cmp	r3, #2
 8007694:	d014      	beq.n	80076c0 <USBD_LL_DataOutStage+0x98>
 8007696:	2b02      	cmp	r3, #2
 8007698:	d81d      	bhi.n	80076d6 <USBD_LL_DataOutStage+0xae>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <USBD_LL_DataOutStage+0x7c>
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d003      	beq.n	80076aa <USBD_LL_DataOutStage+0x82>
 80076a2:	e018      	b.n	80076d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75bb      	strb	r3, [r7, #22]
            break;
 80076a8:	e018      	b.n	80076dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 fa5e 	bl	8007b76 <USBD_CoreFindIF>
 80076ba:	4603      	mov	r3, r0
 80076bc:	75bb      	strb	r3, [r7, #22]
            break;
 80076be:	e00d      	b.n	80076dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 fa60 	bl	8007b90 <USBD_CoreFindEP>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75bb      	strb	r3, [r7, #22]
            break;
 80076d4:	e002      	b.n	80076dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75bb      	strb	r3, [r7, #22]
            break;
 80076da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80076dc:	7dbb      	ldrb	r3, [r7, #22]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d119      	bne.n	8007716 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d113      	bne.n	8007716 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076ee:	7dba      	ldrb	r2, [r7, #22]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	32ae      	adds	r2, #174	; 0xae
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076fe:	7dba      	ldrb	r2, [r7, #22]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007706:	7dba      	ldrb	r2, [r7, #22]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	32ae      	adds	r2, #174	; 0xae
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f001 f94a 	bl	80089b0 <USBD_CtlSendStatus>
 800771c:	e032      	b.n	8007784 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fa31 	bl	8007b90 <USBD_CoreFindEP>
 800772e:	4603      	mov	r3, r0
 8007730:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007732:	7dbb      	ldrb	r3, [r7, #22]
 8007734:	2bff      	cmp	r3, #255	; 0xff
 8007736:	d025      	beq.n	8007784 <USBD_LL_DataOutStage+0x15c>
 8007738:	7dbb      	ldrb	r3, [r7, #22]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d122      	bne.n	8007784 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b03      	cmp	r3, #3
 8007748:	d117      	bne.n	800777a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800774a:	7dba      	ldrb	r2, [r7, #22]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	32ae      	adds	r2, #174	; 0xae
 8007750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00f      	beq.n	800777a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800775a:	7dba      	ldrb	r2, [r7, #22]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007762:	7dba      	ldrb	r2, [r7, #22]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	32ae      	adds	r2, #174	; 0xae
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	7afa      	ldrb	r2, [r7, #11]
 8007770:	4611      	mov	r1, r2
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	4798      	blx	r3
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	e000      	b.n	8007786 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b086      	sub	sp, #24
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	460b      	mov	r3, r1
 8007798:	607a      	str	r2, [r7, #4]
 800779a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d16f      	bne.n	8007882 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3314      	adds	r3, #20
 80077a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d15a      	bne.n	8007868 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d914      	bls.n	80077e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	461a      	mov	r2, r3
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f001 f8ac 	bl	8008932 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077da:	2300      	movs	r3, #0
 80077dc:	2200      	movs	r2, #0
 80077de:	2100      	movs	r1, #0
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f004 fc9d 	bl	800c120 <USBD_LL_PrepareReceive>
 80077e6:	e03f      	b.n	8007868 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d11c      	bne.n	800782e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d316      	bcc.n	800782e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800780a:	429a      	cmp	r2, r3
 800780c:	d20f      	bcs.n	800782e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800780e:	2200      	movs	r2, #0
 8007810:	2100      	movs	r1, #0
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f001 f88d 	bl	8008932 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007820:	2300      	movs	r3, #0
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f004 fc7a 	bl	800c120 <USBD_LL_PrepareReceive>
 800782c:	e01c      	b.n	8007868 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b03      	cmp	r3, #3
 8007838:	d10f      	bne.n	800785a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d009      	beq.n	800785a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f004 fbb5 	bl	800bfcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f001 f8b7 	bl	80089d6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d03a      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7ff fe42 	bl	80074fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007880:	e032      	b.n	80078e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007888:	b2db      	uxtb	r3, r3
 800788a:	4619      	mov	r1, r3
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f97f 	bl	8007b90 <USBD_CoreFindEP>
 8007892:	4603      	mov	r3, r0
 8007894:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	2bff      	cmp	r3, #255	; 0xff
 800789a:	d025      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d122      	bne.n	80078e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d11c      	bne.n	80078e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078ae:	7dfa      	ldrb	r2, [r7, #23]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	32ae      	adds	r2, #174	; 0xae
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d014      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078be:	7dfa      	ldrb	r2, [r7, #23]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078c6:	7dfa      	ldrb	r2, [r7, #23]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	32ae      	adds	r2, #174	; 0xae
 80078cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	7afa      	ldrb	r2, [r7, #11]
 80078d4:	4611      	mov	r1, r2
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	4798      	blx	r3
 80078da:	4603      	mov	r3, r0
 80078dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80078de:	7dbb      	ldrb	r3, [r7, #22]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80078e4:	7dbb      	ldrb	r3, [r7, #22]
 80078e6:	e000      	b.n	80078ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d014      	beq.n	8007958 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00e      	beq.n	8007958 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6852      	ldr	r2, [r2, #4]
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	4611      	mov	r1, r2
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	4798      	blx	r3
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007954:	2303      	movs	r3, #3
 8007956:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007958:	2340      	movs	r3, #64	; 0x40
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f004 faef 	bl	800bf42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2240      	movs	r2, #64	; 0x40
 8007970:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	2200      	movs	r2, #0
 8007978:	2180      	movs	r1, #128	; 0x80
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f004 fae1 	bl	800bf42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2240      	movs	r2, #64	; 0x40
 800798a:	621a      	str	r2, [r3, #32]

  return ret;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2204      	movs	r2, #4
 80079d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d106      	bne.n	8007a04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d110      	bne.n	8007a48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	32ae      	adds	r2, #174	; 0xae
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e01c      	b.n	8007aae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d115      	bne.n	8007aac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	32ae      	adds	r2, #174	; 0xae
 8007a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32ae      	adds	r2, #174	; 0xae
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	32ae      	adds	r2, #174	; 0xae
 8007acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e01c      	b.n	8007b12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d115      	bne.n	8007b10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	32ae      	adds	r2, #174	; 0xae
 8007aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32ae      	adds	r2, #174	; 0xae
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	78fa      	ldrb	r2, [r7, #3]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00e      	beq.n	8007b6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6852      	ldr	r2, [r2, #4]
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	885b      	ldrh	r3, [r3, #2]
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d920      	bls.n	8007c14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007bda:	e013      	b.n	8007c04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007bdc:	f107 030a 	add.w	r3, r7, #10
 8007be0:	4619      	mov	r1, r3
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f000 f81b 	bl	8007c1e <USBD_GetNextDesc>
 8007be8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	785b      	ldrb	r3, [r3, #1]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d108      	bne.n	8007c04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	789b      	ldrb	r3, [r3, #2]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d008      	beq.n	8007c12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	885b      	ldrh	r3, [r3, #2]
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	897b      	ldrh	r3, [r7, #10]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d8e5      	bhi.n	8007bdc <USBD_GetEpDesc+0x32>
 8007c10:	e000      	b.n	8007c14 <USBD_GetEpDesc+0x6a>
          break;
 8007c12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c14:	693b      	ldr	r3, [r7, #16]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	881a      	ldrh	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	4413      	add	r3, r2
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4413      	add	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c76:	8a3b      	ldrh	r3, [r7, #16]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	b21a      	sxth	r2, r3
 8007c7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	b21b      	sxth	r3, r3
 8007c84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c86:	89fb      	ldrh	r3, [r7, #14]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d005      	beq.n	8007cba <USBD_StdDevReq+0x26>
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d857      	bhi.n	8007d62 <USBD_StdDevReq+0xce>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00f      	beq.n	8007cd6 <USBD_StdDevReq+0x42>
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d153      	bne.n	8007d62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	32ae      	adds	r2, #174	; 0xae
 8007cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd4:	e04a      	b.n	8007d6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	2b09      	cmp	r3, #9
 8007cdc:	d83b      	bhi.n	8007d56 <USBD_StdDevReq+0xc2>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USBD_StdDevReq+0x50>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d39 	.word	0x08007d39
 8007ce8:	08007d4d 	.word	0x08007d4d
 8007cec:	08007d57 	.word	0x08007d57
 8007cf0:	08007d43 	.word	0x08007d43
 8007cf4:	08007d57 	.word	0x08007d57
 8007cf8:	08007d17 	.word	0x08007d17
 8007cfc:	08007d0d 	.word	0x08007d0d
 8007d00:	08007d57 	.word	0x08007d57
 8007d04:	08007d2f 	.word	0x08007d2f
 8007d08:	08007d21 	.word	0x08007d21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa3c 	bl	800818c <USBD_GetDescriptor>
          break;
 8007d14:	e024      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fba1 	bl	8008460 <USBD_SetAddress>
          break;
 8007d1e:	e01f      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fbe0 	bl	80084e8 <USBD_SetConfig>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
          break;
 8007d2c:	e018      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc83 	bl	800863c <USBD_GetConfig>
          break;
 8007d36:	e013      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fcb4 	bl	80086a8 <USBD_GetStatus>
          break;
 8007d40:	e00e      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d42:	6839      	ldr	r1, [r7, #0]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fce3 	bl	8008710 <USBD_SetFeature>
          break;
 8007d4a:	e009      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fd07 	bl	8008762 <USBD_ClrFeature>
          break;
 8007d54:	e004      	b.n	8007d60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fd5e 	bl	800881a <USBD_CtlError>
          break;
 8007d5e:	bf00      	nop
      }
      break;
 8007d60:	e004      	b.n	8007d6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fd58 	bl	800881a <USBD_CtlError>
      break;
 8007d6a:	bf00      	nop
  }

  return ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop

08007d78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d005      	beq.n	8007d9e <USBD_StdItfReq+0x26>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d852      	bhi.n	8007e3c <USBD_StdItfReq+0xc4>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <USBD_StdItfReq+0x26>
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d14e      	bne.n	8007e3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d840      	bhi.n	8007e2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	889b      	ldrh	r3, [r3, #4]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d836      	bhi.n	8007e24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	889b      	ldrh	r3, [r3, #4]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff fed9 	bl	8007b76 <USBD_CoreFindIF>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2bff      	cmp	r3, #255	; 0xff
 8007dcc:	d01d      	beq.n	8007e0a <USBD_StdItfReq+0x92>
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d11a      	bne.n	8007e0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007dd4:	7bba      	ldrb	r2, [r7, #14]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32ae      	adds	r2, #174	; 0xae
 8007dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00f      	beq.n	8007e04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007de4:	7bba      	ldrb	r2, [r7, #14]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007dec:	7bba      	ldrb	r2, [r7, #14]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	32ae      	adds	r2, #174	; 0xae
 8007df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
 8007dfe:	4603      	mov	r3, r0
 8007e00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e02:	e004      	b.n	8007e0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e08:	e001      	b.n	8007e0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d110      	bne.n	8007e38 <USBD_StdItfReq+0xc0>
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10d      	bne.n	8007e38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fdc7 	bl	80089b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e22:	e009      	b.n	8007e38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fcf7 	bl	800881a <USBD_CtlError>
          break;
 8007e2c:	e004      	b.n	8007e38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fcf2 	bl	800881a <USBD_CtlError>
          break;
 8007e36:	e000      	b.n	8007e3a <USBD_StdItfReq+0xc2>
          break;
 8007e38:	bf00      	nop
      }
      break;
 8007e3a:	e004      	b.n	8007e46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fceb 	bl	800881a <USBD_CtlError>
      break;
 8007e44:	bf00      	nop
  }

  return ret;
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	889b      	ldrh	r3, [r3, #4]
 8007e62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e6c:	2b40      	cmp	r3, #64	; 0x40
 8007e6e:	d007      	beq.n	8007e80 <USBD_StdEPReq+0x30>
 8007e70:	2b40      	cmp	r3, #64	; 0x40
 8007e72:	f200 817f 	bhi.w	8008174 <USBD_StdEPReq+0x324>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d02a      	beq.n	8007ed0 <USBD_StdEPReq+0x80>
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	f040 817a 	bne.w	8008174 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff fe83 	bl	8007b90 <USBD_CoreFindEP>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e8e:	7b7b      	ldrb	r3, [r7, #13]
 8007e90:	2bff      	cmp	r3, #255	; 0xff
 8007e92:	f000 8174 	beq.w	800817e <USBD_StdEPReq+0x32e>
 8007e96:	7b7b      	ldrb	r3, [r7, #13]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 8170 	bne.w	800817e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e9e:	7b7a      	ldrb	r2, [r7, #13]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ea6:	7b7a      	ldrb	r2, [r7, #13]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	32ae      	adds	r2, #174	; 0xae
 8007eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 8163 	beq.w	800817e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007eb8:	7b7a      	ldrb	r2, [r7, #13]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	32ae      	adds	r2, #174	; 0xae
 8007ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ece:	e156      	b.n	800817e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d008      	beq.n	8007eea <USBD_StdEPReq+0x9a>
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	f300 8145 	bgt.w	8008168 <USBD_StdEPReq+0x318>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 809b 	beq.w	800801a <USBD_StdEPReq+0x1ca>
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d03c      	beq.n	8007f62 <USBD_StdEPReq+0x112>
 8007ee8:	e13e      	b.n	8008168 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d002      	beq.n	8007efc <USBD_StdEPReq+0xac>
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d016      	beq.n	8007f28 <USBD_StdEPReq+0xd8>
 8007efa:	e02c      	b.n	8007f56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00d      	beq.n	8007f1e <USBD_StdEPReq+0xce>
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b80      	cmp	r3, #128	; 0x80
 8007f06:	d00a      	beq.n	8007f1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f004 f85d 	bl	800bfcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f12:	2180      	movs	r1, #128	; 0x80
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f004 f859 	bl	800bfcc <USBD_LL_StallEP>
 8007f1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f1c:	e020      	b.n	8007f60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc7a 	bl	800881a <USBD_CtlError>
              break;
 8007f26:	e01b      	b.n	8007f60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	885b      	ldrh	r3, [r3, #2]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10e      	bne.n	8007f4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f30:	7bbb      	ldrb	r3, [r7, #14]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00b      	beq.n	8007f4e <USBD_StdEPReq+0xfe>
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b80      	cmp	r3, #128	; 0x80
 8007f3a:	d008      	beq.n	8007f4e <USBD_StdEPReq+0xfe>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	88db      	ldrh	r3, [r3, #6]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f004 f83f 	bl	800bfcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fd2e 	bl	80089b0 <USBD_CtlSendStatus>

              break;
 8007f54:	e004      	b.n	8007f60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fc5e 	bl	800881a <USBD_CtlError>
              break;
 8007f5e:	bf00      	nop
          }
          break;
 8007f60:	e107      	b.n	8008172 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d002      	beq.n	8007f74 <USBD_StdEPReq+0x124>
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d016      	beq.n	8007fa0 <USBD_StdEPReq+0x150>
 8007f72:	e04b      	b.n	800800c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00d      	beq.n	8007f96 <USBD_StdEPReq+0x146>
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b80      	cmp	r3, #128	; 0x80
 8007f7e:	d00a      	beq.n	8007f96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f004 f821 	bl	800bfcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f8a:	2180      	movs	r1, #128	; 0x80
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f004 f81d 	bl	800bfcc <USBD_LL_StallEP>
 8007f92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f94:	e040      	b.n	8008018 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc3e 	bl	800881a <USBD_CtlError>
              break;
 8007f9e:	e03b      	b.n	8008018 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	885b      	ldrh	r3, [r3, #2]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d136      	bne.n	8008016 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
 8007faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f004 f827 	bl	800c00a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fcf7 	bl	80089b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7ff fde2 	bl	8007b90 <USBD_CoreFindEP>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fd0:	7b7b      	ldrb	r3, [r7, #13]
 8007fd2:	2bff      	cmp	r3, #255	; 0xff
 8007fd4:	d01f      	beq.n	8008016 <USBD_StdEPReq+0x1c6>
 8007fd6:	7b7b      	ldrb	r3, [r7, #13]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d11c      	bne.n	8008016 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007fdc:	7b7a      	ldrb	r2, [r7, #13]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007fe4:	7b7a      	ldrb	r2, [r7, #13]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	32ae      	adds	r2, #174	; 0xae
 8007fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d010      	beq.n	8008016 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ff4:	7b7a      	ldrb	r2, [r7, #13]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	32ae      	adds	r2, #174	; 0xae
 8007ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
 8008006:	4603      	mov	r3, r0
 8008008:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800800a:	e004      	b.n	8008016 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fc03 	bl	800881a <USBD_CtlError>
              break;
 8008014:	e000      	b.n	8008018 <USBD_StdEPReq+0x1c8>
              break;
 8008016:	bf00      	nop
          }
          break;
 8008018:	e0ab      	b.n	8008172 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d002      	beq.n	800802c <USBD_StdEPReq+0x1dc>
 8008026:	2b03      	cmp	r3, #3
 8008028:	d032      	beq.n	8008090 <USBD_StdEPReq+0x240>
 800802a:	e097      	b.n	800815c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <USBD_StdEPReq+0x1f2>
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	2b80      	cmp	r3, #128	; 0x80
 8008036:	d004      	beq.n	8008042 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fbed 	bl	800881a <USBD_CtlError>
                break;
 8008040:	e091      	b.n	8008166 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	da0b      	bge.n	8008062 <USBD_StdEPReq+0x212>
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	3310      	adds	r3, #16
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	4413      	add	r3, r2
 800805e:	3304      	adds	r3, #4
 8008060:	e00b      	b.n	800807a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	4413      	add	r3, r2
 8008078:	3304      	adds	r3, #4
 800807a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2202      	movs	r2, #2
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc37 	bl	80088fc <USBD_CtlSendData>
              break;
 800808e:	e06a      	b.n	8008166 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008094:	2b00      	cmp	r3, #0
 8008096:	da11      	bge.n	80080bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	f003 020f 	and.w	r2, r3, #15
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	3324      	adds	r3, #36	; 0x24
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d117      	bne.n	80080e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fbb0 	bl	800881a <USBD_CtlError>
                  break;
 80080ba:	e054      	b.n	8008166 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	f003 020f 	and.w	r2, r3, #15
 80080c2:	6879      	ldr	r1, [r7, #4]
 80080c4:	4613      	mov	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4413      	add	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	440b      	add	r3, r1
 80080ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fb9d 	bl	800881a <USBD_CtlError>
                  break;
 80080e0:	e041      	b.n	8008166 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da0b      	bge.n	8008102 <USBD_StdEPReq+0x2b2>
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	3310      	adds	r3, #16
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	3304      	adds	r3, #4
 8008100:	e00b      	b.n	800811a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4413      	add	r3, r2
 8008118:	3304      	adds	r3, #4
 800811a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <USBD_StdEPReq+0x2d8>
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b80      	cmp	r3, #128	; 0x80
 8008126:	d103      	bne.n	8008130 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e00e      	b.n	800814e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008130:	7bbb      	ldrb	r3, [r7, #14]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f003 ff87 	bl	800c048 <USBD_LL_IsStallEP>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2201      	movs	r2, #1
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	e002      	b.n	800814e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2202      	movs	r2, #2
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fbd1 	bl	80088fc <USBD_CtlSendData>
              break;
 800815a:	e004      	b.n	8008166 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fb5b 	bl	800881a <USBD_CtlError>
              break;
 8008164:	bf00      	nop
          }
          break;
 8008166:	e004      	b.n	8008172 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fb55 	bl	800881a <USBD_CtlError>
          break;
 8008170:	bf00      	nop
      }
      break;
 8008172:	e005      	b.n	8008180 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fb4f 	bl	800881a <USBD_CtlError>
      break;
 800817c:	e000      	b.n	8008180 <USBD_StdEPReq+0x330>
      break;
 800817e:	bf00      	nop
  }

  return ret;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	885b      	ldrh	r3, [r3, #2]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	2b06      	cmp	r3, #6
 80081ae:	f200 8128 	bhi.w	8008402 <USBD_GetDescriptor+0x276>
 80081b2:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <USBD_GetDescriptor+0x2c>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	080081d5 	.word	0x080081d5
 80081bc:	080081ed 	.word	0x080081ed
 80081c0:	0800822d 	.word	0x0800822d
 80081c4:	08008403 	.word	0x08008403
 80081c8:	08008403 	.word	0x08008403
 80081cc:	080083a3 	.word	0x080083a3
 80081d0:	080083cf 	.word	0x080083cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	7c12      	ldrb	r2, [r2, #16]
 80081e0:	f107 0108 	add.w	r1, r7, #8
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
 80081e8:	60f8      	str	r0, [r7, #12]
      break;
 80081ea:	e112      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7c1b      	ldrb	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10d      	bne.n	8008210 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fc:	f107 0208 	add.w	r2, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	2202      	movs	r2, #2
 800820c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800820e:	e100      	b.n	8008412 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	f107 0208 	add.w	r2, r7, #8
 800821c:	4610      	mov	r0, r2
 800821e:	4798      	blx	r3
 8008220:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	2202      	movs	r2, #2
 8008228:	701a      	strb	r2, [r3, #0]
      break;
 800822a:	e0f2      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	885b      	ldrh	r3, [r3, #2]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b05      	cmp	r3, #5
 8008234:	f200 80ac 	bhi.w	8008390 <USBD_GetDescriptor+0x204>
 8008238:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <USBD_GetDescriptor+0xb4>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008259 	.word	0x08008259
 8008244:	0800828d 	.word	0x0800828d
 8008248:	080082c1 	.word	0x080082c1
 800824c:	080082f5 	.word	0x080082f5
 8008250:	08008329 	.word	0x08008329
 8008254:	0800835d 	.word	0x0800835d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827a:	e091      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 facb 	bl	800881a <USBD_CtlError>
            err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
          break;
 800828a:	e089      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	7c12      	ldrb	r2, [r2, #16]
 80082a4:	f107 0108 	add.w	r1, r7, #8
 80082a8:	4610      	mov	r0, r2
 80082aa:	4798      	blx	r3
 80082ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ae:	e077      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fab1 	bl	800881a <USBD_CtlError>
            err++;
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	3301      	adds	r3, #1
 80082bc:	72fb      	strb	r3, [r7, #11]
          break;
 80082be:	e06f      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7c12      	ldrb	r2, [r2, #16]
 80082d8:	f107 0108 	add.w	r1, r7, #8
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
 80082e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e2:	e05d      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa97 	bl	800881a <USBD_CtlError>
            err++;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	3301      	adds	r3, #1
 80082f0:	72fb      	strb	r3, [r7, #11]
          break;
 80082f2:	e055      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008316:	e043      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa7d 	bl	800881a <USBD_CtlError>
            err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
          break;
 8008326:	e03b      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834a:	e029      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa63 	bl	800881a <USBD_CtlError>
            err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
          break;
 800835a:	e021      	b.n	80083a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	7c12      	ldrb	r2, [r2, #16]
 8008374:	f107 0108 	add.w	r1, r7, #8
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837e:	e00f      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa49 	bl	800881a <USBD_CtlError>
            err++;
 8008388:	7afb      	ldrb	r3, [r7, #11]
 800838a:	3301      	adds	r3, #1
 800838c:	72fb      	strb	r3, [r7, #11]
          break;
 800838e:	e007      	b.n	80083a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa41 	bl	800881a <USBD_CtlError>
          err++;
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	3301      	adds	r3, #1
 800839c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800839e:	bf00      	nop
      }
      break;
 80083a0:	e037      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7c1b      	ldrb	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	f107 0208 	add.w	r2, r7, #8
 80083b6:	4610      	mov	r0, r2
 80083b8:	4798      	blx	r3
 80083ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083bc:	e029      	b.n	8008412 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fa2a 	bl	800881a <USBD_CtlError>
        err++;
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	3301      	adds	r3, #1
 80083ca:	72fb      	strb	r3, [r7, #11]
      break;
 80083cc:	e021      	b.n	8008412 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	7c1b      	ldrb	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10d      	bne.n	80083f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	f107 0208 	add.w	r2, r7, #8
 80083e2:	4610      	mov	r0, r2
 80083e4:	4798      	blx	r3
 80083e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3301      	adds	r3, #1
 80083ec:	2207      	movs	r2, #7
 80083ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083f0:	e00f      	b.n	8008412 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fa10 	bl	800881a <USBD_CtlError>
        err++;
 80083fa:	7afb      	ldrb	r3, [r7, #11]
 80083fc:	3301      	adds	r3, #1
 80083fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008400:	e007      	b.n	8008412 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa08 	bl	800881a <USBD_CtlError>
      err++;
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	3301      	adds	r3, #1
 800840e:	72fb      	strb	r3, [r7, #11]
      break;
 8008410:	bf00      	nop
  }

  if (err != 0U)
 8008412:	7afb      	ldrb	r3, [r7, #11]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11e      	bne.n	8008456 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	88db      	ldrh	r3, [r3, #6]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d016      	beq.n	800844e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008420:	893b      	ldrh	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00e      	beq.n	8008444 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	88da      	ldrh	r2, [r3, #6]
 800842a:	893b      	ldrh	r3, [r7, #8]
 800842c:	4293      	cmp	r3, r2
 800842e:	bf28      	it	cs
 8008430:	4613      	movcs	r3, r2
 8008432:	b29b      	uxth	r3, r3
 8008434:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008436:	893b      	ldrh	r3, [r7, #8]
 8008438:	461a      	mov	r2, r3
 800843a:	68f9      	ldr	r1, [r7, #12]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fa5d 	bl	80088fc <USBD_CtlSendData>
 8008442:	e009      	b.n	8008458 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f9e7 	bl	800881a <USBD_CtlError>
 800844c:	e004      	b.n	8008458 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 faae 	bl	80089b0 <USBD_CtlSendStatus>
 8008454:	e000      	b.n	8008458 <USBD_GetDescriptor+0x2cc>
    return;
 8008456:	bf00      	nop
  }
}
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop

08008460 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d131      	bne.n	80084d6 <USBD_SetAddress+0x76>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	88db      	ldrh	r3, [r3, #6]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d12d      	bne.n	80084d6 <USBD_SetAddress+0x76>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	2b7f      	cmp	r3, #127	; 0x7f
 8008480:	d829      	bhi.n	80084d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	885b      	ldrh	r3, [r3, #2]
 8008486:	b2db      	uxtb	r3, r3
 8008488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b03      	cmp	r3, #3
 8008498:	d104      	bne.n	80084a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f9bc 	bl	800881a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a2:	e01d      	b.n	80084e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	7bfa      	ldrb	r2, [r7, #15]
 80084a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f003 fdf5 	bl	800c0a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa7a 	bl	80089b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2202      	movs	r2, #2
 80084c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	e009      	b.n	80084e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d4:	e004      	b.n	80084e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f99e 	bl	800881a <USBD_CtlError>
  }
}
 80084de:	bf00      	nop
 80084e0:	bf00      	nop
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	4b4e      	ldr	r3, [pc, #312]	; (8008638 <USBD_SetConfig+0x150>)
 80084fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008500:	4b4d      	ldr	r3, [pc, #308]	; (8008638 <USBD_SetConfig+0x150>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d905      	bls.n	8008514 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f985 	bl	800881a <USBD_CtlError>
    return USBD_FAIL;
 8008510:	2303      	movs	r3, #3
 8008512:	e08c      	b.n	800862e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d002      	beq.n	8008526 <USBD_SetConfig+0x3e>
 8008520:	2b03      	cmp	r3, #3
 8008522:	d029      	beq.n	8008578 <USBD_SetConfig+0x90>
 8008524:	e075      	b.n	8008612 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008526:	4b44      	ldr	r3, [pc, #272]	; (8008638 <USBD_SetConfig+0x150>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d020      	beq.n	8008570 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800852e:	4b42      	ldr	r3, [pc, #264]	; (8008638 <USBD_SetConfig+0x150>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008538:	4b3f      	ldr	r3, [pc, #252]	; (8008638 <USBD_SetConfig+0x150>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7fe ffe7 	bl	8007512 <USBD_SetClassConfig>
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d008      	beq.n	8008560 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f962 	bl	800881a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800855e:	e065      	b.n	800862c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fa25 	bl	80089b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2203      	movs	r2, #3
 800856a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800856e:	e05d      	b.n	800862c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fa1d 	bl	80089b0 <USBD_CtlSendStatus>
      break;
 8008576:	e059      	b.n	800862c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008578:	4b2f      	ldr	r3, [pc, #188]	; (8008638 <USBD_SetConfig+0x150>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d112      	bne.n	80085a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008588:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <USBD_SetConfig+0x150>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008592:	4b29      	ldr	r3, [pc, #164]	; (8008638 <USBD_SetConfig+0x150>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7fe ffd6 	bl	800754a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fa06 	bl	80089b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085a4:	e042      	b.n	800862c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085a6:	4b24      	ldr	r3, [pc, #144]	; (8008638 <USBD_SetConfig+0x150>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d02a      	beq.n	800860a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7fe ffc4 	bl	800754a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085c2:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <USBD_SetConfig+0x150>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085cc:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <USBD_SetConfig+0x150>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7fe ff9d 	bl	8007512 <USBD_SetClassConfig>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00f      	beq.n	8008602 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f918 	bl	800881a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7fe ffa9 	bl	800754a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008600:	e014      	b.n	800862c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f9d4 	bl	80089b0 <USBD_CtlSendStatus>
      break;
 8008608:	e010      	b.n	800862c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f9d0 	bl	80089b0 <USBD_CtlSendStatus>
      break;
 8008610:	e00c      	b.n	800862c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f900 	bl	800881a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800861a:	4b07      	ldr	r3, [pc, #28]	; (8008638 <USBD_SetConfig+0x150>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7fe ff92 	bl	800754a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008626:	2303      	movs	r3, #3
 8008628:	73fb      	strb	r3, [r7, #15]
      break;
 800862a:	bf00      	nop
  }

  return ret;
 800862c:	7bfb      	ldrb	r3, [r7, #15]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20000430 	.word	0x20000430

0800863c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	88db      	ldrh	r3, [r3, #6]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d004      	beq.n	8008658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f8e2 	bl	800881a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008656:	e023      	b.n	80086a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	dc02      	bgt.n	800866a <USBD_GetConfig+0x2e>
 8008664:	2b00      	cmp	r3, #0
 8008666:	dc03      	bgt.n	8008670 <USBD_GetConfig+0x34>
 8008668:	e015      	b.n	8008696 <USBD_GetConfig+0x5a>
 800866a:	2b03      	cmp	r3, #3
 800866c:	d00b      	beq.n	8008686 <USBD_GetConfig+0x4a>
 800866e:	e012      	b.n	8008696 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3308      	adds	r3, #8
 800867a:	2201      	movs	r2, #1
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f93c 	bl	80088fc <USBD_CtlSendData>
        break;
 8008684:	e00c      	b.n	80086a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3304      	adds	r3, #4
 800868a:	2201      	movs	r2, #1
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f934 	bl	80088fc <USBD_CtlSendData>
        break;
 8008694:	e004      	b.n	80086a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f8be 	bl	800881a <USBD_CtlError>
        break;
 800869e:	bf00      	nop
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	3b01      	subs	r3, #1
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d81e      	bhi.n	80086fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	88db      	ldrh	r3, [r3, #6]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d004      	beq.n	80086d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f8a5 	bl	800881a <USBD_CtlError>
        break;
 80086d0:	e01a      	b.n	8008708 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f043 0202 	orr.w	r2, r3, #2
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	330c      	adds	r3, #12
 80086f2:	2202      	movs	r2, #2
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f900 	bl	80088fc <USBD_CtlSendData>
      break;
 80086fc:	e004      	b.n	8008708 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f88a 	bl	800881a <USBD_CtlError>
      break;
 8008706:	bf00      	nop
  }
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	885b      	ldrh	r3, [r3, #2]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d107      	bne.n	8008732 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f940 	bl	80089b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008730:	e013      	b.n	800875a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	885b      	ldrh	r3, [r3, #2]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d10b      	bne.n	8008752 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	889b      	ldrh	r3, [r3, #4]
 800873e:	0a1b      	lsrs	r3, r3, #8
 8008740:	b29b      	uxth	r3, r3
 8008742:	b2da      	uxtb	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f930 	bl	80089b0 <USBD_CtlSendStatus>
}
 8008750:	e003      	b.n	800875a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f860 	bl	800881a <USBD_CtlError>
}
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	2b02      	cmp	r3, #2
 8008778:	d80b      	bhi.n	8008792 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	885b      	ldrh	r3, [r3, #2]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d10c      	bne.n	800879c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f910 	bl	80089b0 <USBD_CtlSendStatus>
      }
      break;
 8008790:	e004      	b.n	800879c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f840 	bl	800881a <USBD_CtlError>
      break;
 800879a:	e000      	b.n	800879e <USBD_ClrFeature+0x3c>
      break;
 800879c:	bf00      	nop
  }
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3301      	adds	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	781a      	ldrb	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3301      	adds	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff fa41 	bl	8007c58 <SWAPBYTE>
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3301      	adds	r3, #1
 80087e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	3301      	adds	r3, #1
 80087e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff fa34 	bl	8007c58 <SWAPBYTE>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3301      	adds	r3, #1
 80087fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff fa27 	bl	8007c58 <SWAPBYTE>
 800880a:	4603      	mov	r3, r0
 800880c:	461a      	mov	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	80da      	strh	r2, [r3, #6]
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008824:	2180      	movs	r1, #128	; 0x80
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f003 fbd0 	bl	800bfcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800882c:	2100      	movs	r1, #0
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f003 fbcc 	bl	800bfcc <USBD_LL_StallEP>
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d036      	beq.n	80088c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008856:	6938      	ldr	r0, [r7, #16]
 8008858:	f000 f836 	bl	80088c8 <USBD_GetLen>
 800885c:	4603      	mov	r3, r0
 800885e:	3301      	adds	r3, #1
 8008860:	b29b      	uxth	r3, r3
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	4413      	add	r3, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	7812      	ldrb	r2, [r2, #0]
 8008874:	701a      	strb	r2, [r3, #0]
  idx++;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	3301      	adds	r3, #1
 800887a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	4413      	add	r3, r2
 8008882:	2203      	movs	r2, #3
 8008884:	701a      	strb	r2, [r3, #0]
  idx++;
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	3301      	adds	r3, #1
 800888a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800888c:	e013      	b.n	80088b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	4413      	add	r3, r2
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3301      	adds	r3, #1
 800889e:	613b      	str	r3, [r7, #16]
    idx++;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	3301      	adds	r3, #1
 80088a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	4413      	add	r3, r2
 80088ac:	2200      	movs	r2, #0
 80088ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	3301      	adds	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e7      	bne.n	800888e <USBD_GetString+0x52>
 80088be:	e000      	b.n	80088c2 <USBD_GetString+0x86>
    return;
 80088c0:	bf00      	nop
  }
}
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088d8:	e005      	b.n	80088e6 <USBD_GetLen+0x1e>
  {
    len++;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	3301      	adds	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	3301      	adds	r3, #1
 80088e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f5      	bne.n	80088da <USBD_GetLen+0x12>
  }

  return len;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2202      	movs	r2, #2
 800890c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	2100      	movs	r1, #0
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f003 fbdb 	bl	800c0de <USBD_LL_Transmit>

  return USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	2100      	movs	r1, #0
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f003 fbca 	bl	800c0de <USBD_LL_Transmit>

  return USBD_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2203      	movs	r2, #3
 8008964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	2100      	movs	r1, #0
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f003 fbce 	bl	800c120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	2100      	movs	r1, #0
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f003 fbbd 	bl	800c120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2204      	movs	r2, #4
 80089bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089c0:	2300      	movs	r3, #0
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f003 fb89 	bl	800c0de <USBD_LL_Transmit>

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2205      	movs	r2, #5
 80089e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089e6:	2300      	movs	r3, #0
 80089e8:	2200      	movs	r2, #0
 80089ea:	2100      	movs	r1, #0
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f003 fb97 	bl	800c120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <__NVIC_SetPriority>:
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	6039      	str	r1, [r7, #0]
 8008a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	db0a      	blt.n	8008a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	490c      	ldr	r1, [pc, #48]	; (8008a48 <__NVIC_SetPriority+0x4c>)
 8008a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a1a:	0112      	lsls	r2, r2, #4
 8008a1c:	b2d2      	uxtb	r2, r2
 8008a1e:	440b      	add	r3, r1
 8008a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008a24:	e00a      	b.n	8008a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	4908      	ldr	r1, [pc, #32]	; (8008a4c <__NVIC_SetPriority+0x50>)
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	3b04      	subs	r3, #4
 8008a34:	0112      	lsls	r2, r2, #4
 8008a36:	b2d2      	uxtb	r2, r2
 8008a38:	440b      	add	r3, r1
 8008a3a:	761a      	strb	r2, [r3, #24]
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	e000e100 	.word	0xe000e100
 8008a4c:	e000ed00 	.word	0xe000ed00

08008a50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008a54:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <SysTick_Handler+0x1c>)
 8008a56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008a58:	f001 fe1e 	bl	800a698 <xTaskGetSchedulerState>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d001      	beq.n	8008a66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008a62:	f002 fce9 	bl	800b438 <xPortSysTickHandler>
  }
}
 8008a66:	bf00      	nop
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	e000e010 	.word	0xe000e010

08008a70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008a74:	2100      	movs	r1, #0
 8008a76:	f06f 0004 	mvn.w	r0, #4
 8008a7a:	f7ff ffbf 	bl	80089fc <__NVIC_SetPriority>
#endif
}
 8008a7e:	bf00      	nop
 8008a80:	bd80      	pop	{r7, pc}
	...

08008a84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a8a:	f3ef 8305 	mrs	r3, IPSR
 8008a8e:	603b      	str	r3, [r7, #0]
  return(result);
 8008a90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008a96:	f06f 0305 	mvn.w	r3, #5
 8008a9a:	607b      	str	r3, [r7, #4]
 8008a9c:	e00c      	b.n	8008ab8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <osKernelInitialize+0x44>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d105      	bne.n	8008ab2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008aa6:	4b08      	ldr	r3, [pc, #32]	; (8008ac8 <osKernelInitialize+0x44>)
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	607b      	str	r3, [r7, #4]
 8008ab0:	e002      	b.n	8008ab8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ab8:	687b      	ldr	r3, [r7, #4]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	20000434 	.word	0x20000434

08008acc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ad2:	f3ef 8305 	mrs	r3, IPSR
 8008ad6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ad8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008ade:	f06f 0305 	mvn.w	r3, #5
 8008ae2:	607b      	str	r3, [r7, #4]
 8008ae4:	e010      	b.n	8008b08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <osKernelStart+0x48>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d109      	bne.n	8008b02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008aee:	f7ff ffbf 	bl	8008a70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008af2:	4b08      	ldr	r3, [pc, #32]	; (8008b14 <osKernelStart+0x48>)
 8008af4:	2202      	movs	r2, #2
 8008af6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008af8:	f001 f972 	bl	8009de0 <vTaskStartScheduler>
      stat = osOK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	607b      	str	r3, [r7, #4]
 8008b00:	e002      	b.n	8008b08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008b02:	f04f 33ff 	mov.w	r3, #4294967295
 8008b06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b08:	687b      	ldr	r3, [r7, #4]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20000434 	.word	0x20000434

08008b18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08e      	sub	sp, #56	; 0x38
 8008b1c:	af04      	add	r7, sp, #16
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b28:	f3ef 8305 	mrs	r3, IPSR
 8008b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d17e      	bne.n	8008c32 <osThreadNew+0x11a>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d07b      	beq.n	8008c32 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008b3a:	2380      	movs	r3, #128	; 0x80
 8008b3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008b3e:	2318      	movs	r3, #24
 8008b40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008b46:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d045      	beq.n	8008bde <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <osThreadNew+0x48>
        name = attr->name;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d008      	beq.n	8008b86 <osThreadNew+0x6e>
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	2b38      	cmp	r3, #56	; 0x38
 8008b78:	d805      	bhi.n	8008b86 <osThreadNew+0x6e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d001      	beq.n	8008b8a <osThreadNew+0x72>
        return (NULL);
 8008b86:	2300      	movs	r3, #0
 8008b88:	e054      	b.n	8008c34 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	089b      	lsrs	r3, r3, #2
 8008b98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00e      	beq.n	8008bc0 <osThreadNew+0xa8>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2bbb      	cmp	r3, #187	; 0xbb
 8008ba8:	d90a      	bls.n	8008bc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d006      	beq.n	8008bc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <osThreadNew+0xa8>
        mem = 1;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	61bb      	str	r3, [r7, #24]
 8008bbe:	e010      	b.n	8008be2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10c      	bne.n	8008be2 <osThreadNew+0xca>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d108      	bne.n	8008be2 <osThreadNew+0xca>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <osThreadNew+0xca>
          mem = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61bb      	str	r3, [r7, #24]
 8008bdc:	e001      	b.n	8008be2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d110      	bne.n	8008c0a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008bf0:	9202      	str	r2, [sp, #8]
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	6a3a      	ldr	r2, [r7, #32]
 8008bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 ff02 	bl	8009a08 <xTaskCreateStatic>
 8008c04:	4603      	mov	r3, r0
 8008c06:	613b      	str	r3, [r7, #16]
 8008c08:	e013      	b.n	8008c32 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d110      	bne.n	8008c32 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	f107 0310 	add.w	r3, r7, #16
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 ff4d 	bl	8009ac2 <xTaskCreate>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d001      	beq.n	8008c32 <osThreadNew+0x11a>
            hTask = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008c32:	693b      	ldr	r3, [r7, #16]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3728      	adds	r7, #40	; 0x28
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c44:	f3ef 8305 	mrs	r3, IPSR
 8008c48:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <osDelay+0x1c>
    stat = osErrorISR;
 8008c50:	f06f 0305 	mvn.w	r3, #5
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	e007      	b.n	8008c68 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 f888 	bl	8009d78 <vTaskDelay>
    }
  }

  return (stat);
 8008c68:	68fb      	ldr	r3, [r7, #12]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f002 f9fd 	bl	800b07a <pvTimerGetTimerID>
 8008c80:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d005      	beq.n	8008c94 <TimerCallback+0x22>
    callb->func (callb->arg);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	6852      	ldr	r2, [r2, #4]
 8008c90:	4610      	mov	r0, r2
 8008c92:	4798      	blx	r3
  }
}
 8008c94:	bf00      	nop
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08c      	sub	sp, #48	; 0x30
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	607a      	str	r2, [r7, #4]
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cb0:	f3ef 8305 	mrs	r3, IPSR
 8008cb4:	613b      	str	r3, [r7, #16]
  return(result);
 8008cb6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d163      	bne.n	8008d84 <osTimerNew+0xe8>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d060      	beq.n	8008d84 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008cc2:	2008      	movs	r0, #8
 8008cc4:	f002 fc48 	bl	800b558 <pvPortMalloc>
 8008cc8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d059      	beq.n	8008d84 <osTimerNew+0xe8>
      callb->func = func;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d102      	bne.n	8008ce8 <osTimerNew+0x4c>
        reload = pdFALSE;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	e001      	b.n	8008cec <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008cec:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d01c      	beq.n	8008d36 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <osTimerNew+0x6e>
          name = attr->name;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d006      	beq.n	8008d20 <osTimerNew+0x84>
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	2b2b      	cmp	r3, #43	; 0x2b
 8008d18:	d902      	bls.n	8008d20 <osTimerNew+0x84>
          mem = 1;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	61bb      	str	r3, [r7, #24]
 8008d1e:	e00c      	b.n	8008d3a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d108      	bne.n	8008d3a <osTimerNew+0x9e>
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d104      	bne.n	8008d3a <osTimerNew+0x9e>
            mem = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61bb      	str	r3, [r7, #24]
 8008d34:	e001      	b.n	8008d3a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d10c      	bne.n	8008d5a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <osTimerNew+0xf4>)
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	2101      	movs	r1, #1
 8008d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d52:	f001 fdea 	bl	800a92a <xTimerCreateStatic>
 8008d56:	6238      	str	r0, [r7, #32]
 8008d58:	e00b      	b.n	8008d72 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d108      	bne.n	8008d72 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <osTimerNew+0xf4>)
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	2101      	movs	r1, #1
 8008d6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d6c:	f001 fdbc 	bl	800a8e8 <xTimerCreate>
 8008d70:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8008d72:	6a3b      	ldr	r3, [r7, #32]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d105      	bne.n	8008d84 <osTimerNew+0xe8>
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <osTimerNew+0xe8>
        vPortFree (callb);
 8008d7e:	6978      	ldr	r0, [r7, #20]
 8008d80:	f002 fcb6 	bl	800b6f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008d84:	6a3b      	ldr	r3, [r7, #32]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3728      	adds	r7, #40	; 0x28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	08008c73 	.word	0x08008c73

08008d94 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af02      	add	r7, sp, #8
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da2:	f3ef 8305 	mrs	r3, IPSR
 8008da6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008da8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <osTimerStart+0x22>
    stat = osErrorISR;
 8008dae:	f06f 0305 	mvn.w	r3, #5
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	e017      	b.n	8008de6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <osTimerStart+0x30>
    stat = osErrorParameter;
 8008dbc:	f06f 0303 	mvn.w	r3, #3
 8008dc0:	617b      	str	r3, [r7, #20]
 8008dc2:	e010      	b.n	8008de6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	2104      	movs	r1, #4
 8008dce:	6938      	ldr	r0, [r7, #16]
 8008dd0:	f001 fe24 	bl	800aa1c <xTimerGenericCommand>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d102      	bne.n	8008de0 <osTimerStart+0x4c>
      stat = osOK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	e002      	b.n	8008de6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8008de0:	f06f 0302 	mvn.w	r3, #2
 8008de4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008de6:	697b      	ldr	r3, [r7, #20]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dfc:	f3ef 8305 	mrs	r3, IPSR
 8008e00:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e02:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <osTimerStop+0x20>
    stat = osErrorISR;
 8008e08:	f06f 0305 	mvn.w	r3, #5
 8008e0c:	617b      	str	r3, [r7, #20]
 8008e0e:	e021      	b.n	8008e54 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d103      	bne.n	8008e1e <osTimerStop+0x2e>
    stat = osErrorParameter;
 8008e16:	f06f 0303 	mvn.w	r3, #3
 8008e1a:	617b      	str	r3, [r7, #20]
 8008e1c:	e01a      	b.n	8008e54 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8008e1e:	6938      	ldr	r0, [r7, #16]
 8008e20:	f002 f902 	bl	800b028 <xTimerIsTimerActive>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d103      	bne.n	8008e32 <osTimerStop+0x42>
      stat = osErrorResource;
 8008e2a:	f06f 0302 	mvn.w	r3, #2
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	e010      	b.n	8008e54 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8008e32:	2300      	movs	r3, #0
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	2300      	movs	r3, #0
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2103      	movs	r1, #3
 8008e3c:	6938      	ldr	r0, [r7, #16]
 8008e3e:	f001 fded 	bl	800aa1c <xTimerGenericCommand>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d102      	bne.n	8008e4e <osTimerStop+0x5e>
        stat = osOK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	e002      	b.n	8008e54 <osTimerStop+0x64>
      } else {
        stat = osError;
 8008e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e52:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008e54:	697b      	ldr	r3, [r7, #20]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4a07      	ldr	r2, [pc, #28]	; (8008e8c <vApplicationGetIdleTaskMemory+0x2c>)
 8008e70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	4a06      	ldr	r2, [pc, #24]	; (8008e90 <vApplicationGetIdleTaskMemory+0x30>)
 8008e76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2280      	movs	r2, #128	; 0x80
 8008e7c:	601a      	str	r2, [r3, #0]
}
 8008e7e:	bf00      	nop
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	20000438 	.word	0x20000438
 8008e90:	200004f4 	.word	0x200004f4

08008e94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4a07      	ldr	r2, [pc, #28]	; (8008ec0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ea4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	4a06      	ldr	r2, [pc, #24]	; (8008ec4 <vApplicationGetTimerTaskMemory+0x30>)
 8008eaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008eb2:	601a      	str	r2, [r3, #0]
}
 8008eb4:	bf00      	nop
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	200006f4 	.word	0x200006f4
 8008ec4:	200007b0 	.word	0x200007b0

08008ec8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f103 0208 	add.w	r2, r3, #8
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f103 0208 	add.w	r2, r3, #8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f103 0208 	add.w	r2, r3, #8
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	601a      	str	r2, [r3, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d103      	bne.n	8008f8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	e00c      	b.n	8008fa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	e002      	b.n	8008f98 <vListInsert+0x2e>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d2f6      	bcs.n	8008f92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	601a      	str	r2, [r3, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6892      	ldr	r2, [r2, #8]
 8008ff2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	6852      	ldr	r2, [r2, #4]
 8008ffc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	429a      	cmp	r2, r3
 8009006:	d103      	bne.n	8009010 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	1e5a      	subs	r2, r3, #1
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10a      	bne.n	800905a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800905a:	f002 f95b 	bl	800b314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009066:	68f9      	ldr	r1, [r7, #12]
 8009068:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800906a:	fb01 f303 	mul.w	r3, r1, r3
 800906e:	441a      	add	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908a:	3b01      	subs	r3, #1
 800908c:	68f9      	ldr	r1, [r7, #12]
 800908e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009090:	fb01 f303 	mul.w	r3, r1, r3
 8009094:	441a      	add	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	22ff      	movs	r2, #255	; 0xff
 80090a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d114      	bne.n	80090da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01a      	beq.n	80090ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3310      	adds	r3, #16
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 f929 	bl	800a314 <xTaskRemoveFromEventList>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d012      	beq.n	80090ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090c8:	4b0c      	ldr	r3, [pc, #48]	; (80090fc <xQueueGenericReset+0xcc>)
 80090ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	e009      	b.n	80090ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3310      	adds	r3, #16
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff fef2 	bl	8008ec8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3324      	adds	r3, #36	; 0x24
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff feed 	bl	8008ec8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090ee:	f002 f941 	bl	800b374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090f2:	2301      	movs	r3, #1
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	e000ed04 	.word	0xe000ed04

08009100 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08e      	sub	sp, #56	; 0x38
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <xQueueGenericCreateStatic+0x52>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <xQueueGenericCreateStatic+0x56>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueGenericCreateStatic+0x58>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	623b      	str	r3, [r7, #32]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <xQueueGenericCreateStatic+0x7e>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <xQueueGenericCreateStatic+0x82>
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <xQueueGenericCreateStatic+0x84>
 8009182:	2300      	movs	r3, #0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	61fb      	str	r3, [r7, #28]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800919e:	2350      	movs	r3, #80	; 0x50
 80091a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b50      	cmp	r3, #80	; 0x50
 80091a6:	d00a      	beq.n	80091be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	61bb      	str	r3, [r7, #24]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00d      	beq.n	80091e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	4613      	mov	r3, r2
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	68b9      	ldr	r1, [r7, #8]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 f805 	bl	80091f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3730      	adds	r7, #48	; 0x30
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d103      	bne.n	800920c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	e002      	b.n	8009212 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800921e:	2101      	movs	r1, #1
 8009220:	69b8      	ldr	r0, [r7, #24]
 8009222:	f7ff ff05 	bl	8009030 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	78fa      	ldrb	r2, [r7, #3]
 800922a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08e      	sub	sp, #56	; 0x38
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009246:	2300      	movs	r3, #0
 8009248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <xQueueGenericSend+0x32>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d103      	bne.n	8009278 <xQueueGenericSend+0x40>
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <xQueueGenericSend+0x44>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <xQueueGenericSend+0x46>
 800927c:	2300      	movs	r3, #0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <xQueueGenericSend+0x60>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d103      	bne.n	80092a6 <xQueueGenericSend+0x6e>
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <xQueueGenericSend+0x72>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e000      	b.n	80092ac <xQueueGenericSend+0x74>
 80092aa:	2300      	movs	r3, #0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	623b      	str	r3, [r7, #32]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092c6:	f001 f9e7 	bl	800a698 <xTaskGetSchedulerState>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <xQueueGenericSend+0x9e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <xQueueGenericSend+0xa2>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e000      	b.n	80092dc <xQueueGenericSend+0xa4>
 80092da:	2300      	movs	r3, #0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	61fb      	str	r3, [r7, #28]
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092f6:	f002 f80d 	bl	800b314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	429a      	cmp	r2, r3
 8009304:	d302      	bcc.n	800930c <xQueueGenericSend+0xd4>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d129      	bne.n	8009360 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009312:	f000 fa0b 	bl	800972c <prvCopyDataToQueue>
 8009316:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	2b00      	cmp	r3, #0
 800931e:	d010      	beq.n	8009342 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009322:	3324      	adds	r3, #36	; 0x24
 8009324:	4618      	mov	r0, r3
 8009326:	f000 fff5 	bl	800a314 <xTaskRemoveFromEventList>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d013      	beq.n	8009358 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009330:	4b3f      	ldr	r3, [pc, #252]	; (8009430 <xQueueGenericSend+0x1f8>)
 8009332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	e00a      	b.n	8009358 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	2b00      	cmp	r3, #0
 8009346:	d007      	beq.n	8009358 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009348:	4b39      	ldr	r3, [pc, #228]	; (8009430 <xQueueGenericSend+0x1f8>)
 800934a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009358:	f002 f80c 	bl	800b374 <vPortExitCritical>
				return pdPASS;
 800935c:	2301      	movs	r3, #1
 800935e:	e063      	b.n	8009428 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d103      	bne.n	800936e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009366:	f002 f805 	bl	800b374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800936a:	2300      	movs	r3, #0
 800936c:	e05c      	b.n	8009428 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009370:	2b00      	cmp	r3, #0
 8009372:	d106      	bne.n	8009382 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009374:	f107 0314 	add.w	r3, r7, #20
 8009378:	4618      	mov	r0, r3
 800937a:	f001 f82f 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800937e:	2301      	movs	r3, #1
 8009380:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009382:	f001 fff7 	bl	800b374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009386:	f000 fd9b 	bl	8009ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800938a:	f001 ffc3 	bl	800b314 <vPortEnterCritical>
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009394:	b25b      	sxtb	r3, r3
 8009396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939a:	d103      	bne.n	80093a4 <xQueueGenericSend+0x16c>
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093aa:	b25b      	sxtb	r3, r3
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d103      	bne.n	80093ba <xQueueGenericSend+0x182>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093ba:	f001 ffdb 	bl	800b374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093be:	1d3a      	adds	r2, r7, #4
 80093c0:	f107 0314 	add.w	r3, r7, #20
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 f81e 	bl	800a408 <xTaskCheckForTimeOut>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d124      	bne.n	800941c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093d4:	f000 faa2 	bl	800991c <prvIsQueueFull>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d018      	beq.n	8009410 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	3310      	adds	r3, #16
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	4611      	mov	r1, r2
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 ff44 	bl	800a274 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ee:	f000 fa2d 	bl	800984c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093f2:	f000 fd73 	bl	8009edc <xTaskResumeAll>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f47f af7c 	bne.w	80092f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093fe:	4b0c      	ldr	r3, [pc, #48]	; (8009430 <xQueueGenericSend+0x1f8>)
 8009400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	e772      	b.n	80092f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009412:	f000 fa1b 	bl	800984c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009416:	f000 fd61 	bl	8009edc <xTaskResumeAll>
 800941a:	e76c      	b.n	80092f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800941c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800941e:	f000 fa15 	bl	800984c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009422:	f000 fd5b 	bl	8009edc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009428:	4618      	mov	r0, r3
 800942a:	3738      	adds	r7, #56	; 0x38
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b090      	sub	sp, #64	; 0x40
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d103      	bne.n	8009470 <xQueueGenericSendFromISR+0x3c>
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <xQueueGenericSendFromISR+0x40>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <xQueueGenericSendFromISR+0x42>
 8009474:	2300      	movs	r3, #0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10a      	bne.n	8009490 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800948c:	bf00      	nop
 800948e:	e7fe      	b.n	800948e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d103      	bne.n	800949e <xQueueGenericSendFromISR+0x6a>
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <xQueueGenericSendFromISR+0x6e>
 800949e:	2301      	movs	r3, #1
 80094a0:	e000      	b.n	80094a4 <xQueueGenericSendFromISR+0x70>
 80094a2:	2300      	movs	r3, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	623b      	str	r3, [r7, #32]
}
 80094ba:	bf00      	nop
 80094bc:	e7fe      	b.n	80094bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094be:	f002 f80b 	bl	800b4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094c2:	f3ef 8211 	mrs	r2, BASEPRI
 80094c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	61fa      	str	r2, [r7, #28]
 80094d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d302      	bcc.n	80094f0 <xQueueGenericSendFromISR+0xbc>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d12f      	bne.n	8009550 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009506:	f000 f911 	bl	800972c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800950a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800950e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009512:	d112      	bne.n	800953a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	d016      	beq.n	800954a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	3324      	adds	r3, #36	; 0x24
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fef7 	bl	800a314 <xTaskRemoveFromEventList>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00e      	beq.n	800954a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	e007      	b.n	800954a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800953a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800953e:	3301      	adds	r3, #1
 8009540:	b2db      	uxtb	r3, r3
 8009542:	b25a      	sxtb	r2, r3
 8009544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800954a:	2301      	movs	r3, #1
 800954c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800954e:	e001      	b.n	8009554 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009550:	2300      	movs	r3, #0
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009556:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800955e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009562:	4618      	mov	r0, r3
 8009564:	3740      	adds	r7, #64	; 0x40
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08c      	sub	sp, #48	; 0x30
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009578:	2300      	movs	r3, #0
 800957a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <xQueueReceive+0x30>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	623b      	str	r3, [r7, #32]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <xQueueReceive+0x3e>
 80095a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <xQueueReceive+0x42>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e000      	b.n	80095b0 <xQueueReceive+0x44>
 80095ae:	2300      	movs	r3, #0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10a      	bne.n	80095ca <xQueueReceive+0x5e>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	61fb      	str	r3, [r7, #28]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095ca:	f001 f865 	bl	800a698 <xTaskGetSchedulerState>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <xQueueReceive+0x6e>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <xQueueReceive+0x72>
 80095da:	2301      	movs	r3, #1
 80095dc:	e000      	b.n	80095e0 <xQueueReceive+0x74>
 80095de:	2300      	movs	r3, #0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xQueueReceive+0x8e>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	61bb      	str	r3, [r7, #24]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095fa:	f001 fe8b 	bl	800b314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	2b00      	cmp	r3, #0
 8009608:	d01f      	beq.n	800964a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800960e:	f000 f8f7 	bl	8009800 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	1e5a      	subs	r2, r3, #1
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00f      	beq.n	8009642 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009624:	3310      	adds	r3, #16
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fe74 	bl	800a314 <xTaskRemoveFromEventList>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d007      	beq.n	8009642 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009632:	4b3d      	ldr	r3, [pc, #244]	; (8009728 <xQueueReceive+0x1bc>)
 8009634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009638:	601a      	str	r2, [r3, #0]
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009642:	f001 fe97 	bl	800b374 <vPortExitCritical>
				return pdPASS;
 8009646:	2301      	movs	r3, #1
 8009648:	e069      	b.n	800971e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d103      	bne.n	8009658 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009650:	f001 fe90 	bl	800b374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009654:	2300      	movs	r3, #0
 8009656:	e062      	b.n	800971e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800965e:	f107 0310 	add.w	r3, r7, #16
 8009662:	4618      	mov	r0, r3
 8009664:	f000 feba 	bl	800a3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009668:	2301      	movs	r3, #1
 800966a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800966c:	f001 fe82 	bl	800b374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009670:	f000 fc26 	bl	8009ec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009674:	f001 fe4e 	bl	800b314 <vPortEnterCritical>
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800967e:	b25b      	sxtb	r3, r3
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009684:	d103      	bne.n	800968e <xQueueReceive+0x122>
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009694:	b25b      	sxtb	r3, r3
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d103      	bne.n	80096a4 <xQueueReceive+0x138>
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096a4:	f001 fe66 	bl	800b374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096a8:	1d3a      	adds	r2, r7, #4
 80096aa:	f107 0310 	add.w	r3, r7, #16
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 fea9 	bl	800a408 <xTaskCheckForTimeOut>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d123      	bne.n	8009704 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096be:	f000 f917 	bl	80098f0 <prvIsQueueEmpty>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d017      	beq.n	80096f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	3324      	adds	r3, #36	; 0x24
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4611      	mov	r1, r2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fdcf 	bl	800a274 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096d8:	f000 f8b8 	bl	800984c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096dc:	f000 fbfe 	bl	8009edc <xTaskResumeAll>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d189      	bne.n	80095fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80096e6:	4b10      	ldr	r3, [pc, #64]	; (8009728 <xQueueReceive+0x1bc>)
 80096e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	e780      	b.n	80095fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096fa:	f000 f8a7 	bl	800984c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096fe:	f000 fbed 	bl	8009edc <xTaskResumeAll>
 8009702:	e77a      	b.n	80095fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009706:	f000 f8a1 	bl	800984c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800970a:	f000 fbe7 	bl	8009edc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800970e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009710:	f000 f8ee 	bl	80098f0 <prvIsQueueEmpty>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	f43f af6f 	beq.w	80095fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800971c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800971e:	4618      	mov	r0, r3
 8009720:	3730      	adds	r7, #48	; 0x30
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009738:	2300      	movs	r3, #0
 800973a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10d      	bne.n	8009766 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d14d      	bne.n	80097ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 ffbc 	bl	800a6d4 <xTaskPriorityDisinherit>
 800975c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	609a      	str	r2, [r3, #8]
 8009764:	e043      	b.n	80097ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d119      	bne.n	80097a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6858      	ldr	r0, [r3, #4]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009774:	461a      	mov	r2, r3
 8009776:	68b9      	ldr	r1, [r7, #8]
 8009778:	f002 fd64 	bl	800c244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	441a      	add	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	429a      	cmp	r2, r3
 8009794:	d32b      	bcc.n	80097ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	e026      	b.n	80097ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	68d8      	ldr	r0, [r3, #12]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a8:	461a      	mov	r2, r3
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	f002 fd4a 	bl	800c244 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	425b      	negs	r3, r3
 80097ba:	441a      	add	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d207      	bcs.n	80097dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	425b      	negs	r3, r3
 80097d6:	441a      	add	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d105      	bne.n	80097ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80097f6:	697b      	ldr	r3, [r7, #20]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	d018      	beq.n	8009844 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981a:	441a      	add	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	429a      	cmp	r2, r3
 800982a:	d303      	bcc.n	8009834 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	68d9      	ldr	r1, [r3, #12]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983c:	461a      	mov	r2, r3
 800983e:	6838      	ldr	r0, [r7, #0]
 8009840:	f002 fd00 	bl	800c244 <memcpy>
	}
}
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009854:	f001 fd5e 	bl	800b314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800985e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009860:	e011      	b.n	8009886 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	d012      	beq.n	8009890 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3324      	adds	r3, #36	; 0x24
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fd50 	bl	800a314 <xTaskRemoveFromEventList>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d001      	beq.n	800987e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800987a:	f000 fe27 	bl	800a4cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	3b01      	subs	r3, #1
 8009882:	b2db      	uxtb	r3, r3
 8009884:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800988a:	2b00      	cmp	r3, #0
 800988c:	dce9      	bgt.n	8009862 <prvUnlockQueue+0x16>
 800988e:	e000      	b.n	8009892 <prvUnlockQueue+0x46>
					break;
 8009890:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	22ff      	movs	r2, #255	; 0xff
 8009896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800989a:	f001 fd6b 	bl	800b374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800989e:	f001 fd39 	bl	800b314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098aa:	e011      	b.n	80098d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d012      	beq.n	80098da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3310      	adds	r3, #16
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fd2b 	bl	800a314 <xTaskRemoveFromEventList>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80098c4:	f000 fe02 	bl	800a4cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80098d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dce9      	bgt.n	80098ac <prvUnlockQueue+0x60>
 80098d8:	e000      	b.n	80098dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80098da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	22ff      	movs	r2, #255	; 0xff
 80098e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80098e4:	f001 fd46 	bl	800b374 <vPortExitCritical>
}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80098f8:	f001 fd0c 	bl	800b314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	e001      	b.n	800990e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800990a:	2300      	movs	r3, #0
 800990c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800990e:	f001 fd31 	bl	800b374 <vPortExitCritical>

	return xReturn;
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009924:	f001 fcf6 	bl	800b314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009930:	429a      	cmp	r2, r3
 8009932:	d102      	bne.n	800993a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009934:	2301      	movs	r3, #1
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e001      	b.n	800993e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800993a:	2300      	movs	r3, #0
 800993c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800993e:	f001 fd19 	bl	800b374 <vPortExitCritical>

	return xReturn;
 8009942:	68fb      	ldr	r3, [r7, #12]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009956:	2300      	movs	r3, #0
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	e014      	b.n	8009986 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800995c:	4a0f      	ldr	r2, [pc, #60]	; (800999c <vQueueAddToRegistry+0x50>)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10b      	bne.n	8009980 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009968:	490c      	ldr	r1, [pc, #48]	; (800999c <vQueueAddToRegistry+0x50>)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009972:	4a0a      	ldr	r2, [pc, #40]	; (800999c <vQueueAddToRegistry+0x50>)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	4413      	add	r3, r2
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800997e:	e006      	b.n	800998e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3301      	adds	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b07      	cmp	r3, #7
 800998a:	d9e7      	bls.n	800995c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	20000bb0 	.word	0x20000bb0

080099a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80099b0:	f001 fcb0 	bl	800b314 <vPortEnterCritical>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099ba:	b25b      	sxtb	r3, r3
 80099bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c0:	d103      	bne.n	80099ca <vQueueWaitForMessageRestricted+0x2a>
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099d0:	b25b      	sxtb	r3, r3
 80099d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d6:	d103      	bne.n	80099e0 <vQueueWaitForMessageRestricted+0x40>
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099e0:	f001 fcc8 	bl	800b374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d106      	bne.n	80099fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	3324      	adds	r3, #36	; 0x24
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 fc61 	bl	800a2bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80099fa:	6978      	ldr	r0, [r7, #20]
 80099fc:	f7ff ff26 	bl	800984c <prvUnlockQueue>
	}
 8009a00:	bf00      	nop
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08e      	sub	sp, #56	; 0x38
 8009a0c:	af04      	add	r7, sp, #16
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	623b      	str	r3, [r7, #32]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <xTaskCreateStatic+0x46>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	61fb      	str	r3, [r7, #28]
}
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a4e:	23bc      	movs	r3, #188	; 0xbc
 8009a50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	2bbc      	cmp	r3, #188	; 0xbc
 8009a56:	d00a      	beq.n	8009a6e <xTaskCreateStatic+0x66>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	61bb      	str	r3, [r7, #24]
}
 8009a6a:	bf00      	nop
 8009a6c:	e7fe      	b.n	8009a6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009a6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d01e      	beq.n	8009ab4 <xTaskCreateStatic+0xac>
 8009a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01b      	beq.n	8009ab4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	2202      	movs	r2, #2
 8009a8a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9303      	str	r3, [sp, #12]
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	9302      	str	r3, [sp, #8]
 8009a96:	f107 0314 	add.w	r3, r7, #20
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 f850 	bl	8009b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009aae:	f000 f8f3 	bl	8009c98 <prvAddNewTaskToReadyList>
 8009ab2:	e001      	b.n	8009ab8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ab8:	697b      	ldr	r3, [r7, #20]
	}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3728      	adds	r7, #40	; 0x28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b08c      	sub	sp, #48	; 0x30
 8009ac6:	af04      	add	r7, sp, #16
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	603b      	str	r3, [r7, #0]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ad2:	88fb      	ldrh	r3, [r7, #6]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 fd3e 	bl	800b558 <pvPortMalloc>
 8009adc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00e      	beq.n	8009b02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ae4:	20bc      	movs	r0, #188	; 0xbc
 8009ae6:	f001 fd37 	bl	800b558 <pvPortMalloc>
 8009aea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	631a      	str	r2, [r3, #48]	; 0x30
 8009af8:	e005      	b.n	8009b06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009afa:	6978      	ldr	r0, [r7, #20]
 8009afc:	f001 fdf8 	bl	800b6f0 <vPortFree>
 8009b00:	e001      	b.n	8009b06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d017      	beq.n	8009b3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b14:	88fa      	ldrh	r2, [r7, #6]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9303      	str	r3, [sp, #12]
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	9302      	str	r3, [sp, #8]
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 f80e 	bl	8009b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b30:	69f8      	ldr	r0, [r7, #28]
 8009b32:	f000 f8b1 	bl	8009c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b36:	2301      	movs	r3, #1
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	e002      	b.n	8009b42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b42:	69bb      	ldr	r3, [r7, #24]
	}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3720      	adds	r7, #32
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	461a      	mov	r2, r3
 8009b64:	21a5      	movs	r1, #165	; 0xa5
 8009b66:	f002 fb7b 	bl	800c260 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009b74:	3b01      	subs	r3, #1
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	f023 0307 	bic.w	r3, r3, #7
 8009b82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	617b      	str	r3, [r7, #20]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d01f      	beq.n	8009bea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009baa:	2300      	movs	r3, #0
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	e012      	b.n	8009bd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	7819      	ldrb	r1, [r3, #0]
 8009bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3334      	adds	r3, #52	; 0x34
 8009bc0:	460a      	mov	r2, r1
 8009bc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	4413      	add	r3, r2
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d006      	beq.n	8009bde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	2b0f      	cmp	r3, #15
 8009bda:	d9e9      	bls.n	8009bb0 <prvInitialiseNewTask+0x64>
 8009bdc:	e000      	b.n	8009be0 <prvInitialiseNewTask+0x94>
			{
				break;
 8009bde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009be8:	e003      	b.n	8009bf2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf4:	2b37      	cmp	r3, #55	; 0x37
 8009bf6:	d901      	bls.n	8009bfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009bf8:	2337      	movs	r3, #55	; 0x37
 8009bfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	3304      	adds	r3, #4
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff f978 	bl	8008f08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	3318      	adds	r3, #24
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff f973 	bl	8008f08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	2200      	movs	r2, #0
 8009c44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	3354      	adds	r3, #84	; 0x54
 8009c4c:	2260      	movs	r2, #96	; 0x60
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f002 fb05 	bl	800c260 <memset>
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	4a0c      	ldr	r2, [pc, #48]	; (8009c8c <prvInitialiseNewTask+0x140>)
 8009c5a:	659a      	str	r2, [r3, #88]	; 0x58
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5e:	4a0c      	ldr	r2, [pc, #48]	; (8009c90 <prvInitialiseNewTask+0x144>)
 8009c60:	65da      	str	r2, [r3, #92]	; 0x5c
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	4a0b      	ldr	r2, [pc, #44]	; (8009c94 <prvInitialiseNewTask+0x148>)
 8009c66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	69b8      	ldr	r0, [r7, #24]
 8009c6e:	f001 fa25 	bl	800b0bc <pxPortInitialiseStack>
 8009c72:	4602      	mov	r2, r0
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c84:	bf00      	nop
 8009c86:	3720      	adds	r7, #32
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	0800ca7c 	.word	0x0800ca7c
 8009c90:	0800ca9c 	.word	0x0800ca9c
 8009c94:	0800ca5c 	.word	0x0800ca5c

08009c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ca0:	f001 fb38 	bl	800b314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ca4:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <prvAddNewTaskToReadyList+0xc4>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	4a2c      	ldr	r2, [pc, #176]	; (8009d5c <prvAddNewTaskToReadyList+0xc4>)
 8009cac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009cae:	4b2c      	ldr	r3, [pc, #176]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d109      	bne.n	8009cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009cb6:	4a2a      	ldr	r2, [pc, #168]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cbc:	4b27      	ldr	r3, [pc, #156]	; (8009d5c <prvAddNewTaskToReadyList+0xc4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d110      	bne.n	8009ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cc4:	f000 fc26 	bl	800a514 <prvInitialiseTaskLists>
 8009cc8:	e00d      	b.n	8009ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cca:	4b26      	ldr	r3, [pc, #152]	; (8009d64 <prvAddNewTaskToReadyList+0xcc>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d109      	bne.n	8009ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009cd2:	4b23      	ldr	r3, [pc, #140]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d802      	bhi.n	8009ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ce0:	4a1f      	ldr	r2, [pc, #124]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ce6:	4b20      	ldr	r3, [pc, #128]	; (8009d68 <prvAddNewTaskToReadyList+0xd0>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	4a1e      	ldr	r2, [pc, #120]	; (8009d68 <prvAddNewTaskToReadyList+0xd0>)
 8009cee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009cf0:	4b1d      	ldr	r3, [pc, #116]	; (8009d68 <prvAddNewTaskToReadyList+0xd0>)
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	; (8009d6c <prvAddNewTaskToReadyList+0xd4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d903      	bls.n	8009d0c <prvAddNewTaskToReadyList+0x74>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	4a18      	ldr	r2, [pc, #96]	; (8009d6c <prvAddNewTaskToReadyList+0xd4>)
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d10:	4613      	mov	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4a15      	ldr	r2, [pc, #84]	; (8009d70 <prvAddNewTaskToReadyList+0xd8>)
 8009d1a:	441a      	add	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	4619      	mov	r1, r3
 8009d22:	4610      	mov	r0, r2
 8009d24:	f7ff f8fd 	bl	8008f22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d28:	f001 fb24 	bl	800b374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d2c:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <prvAddNewTaskToReadyList+0xcc>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00e      	beq.n	8009d52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <prvAddNewTaskToReadyList+0xc8>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d207      	bcs.n	8009d52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d42:	4b0c      	ldr	r3, [pc, #48]	; (8009d74 <prvAddNewTaskToReadyList+0xdc>)
 8009d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d52:	bf00      	nop
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	200010c4 	.word	0x200010c4
 8009d60:	20000bf0 	.word	0x20000bf0
 8009d64:	200010d0 	.word	0x200010d0
 8009d68:	200010e0 	.word	0x200010e0
 8009d6c:	200010cc 	.word	0x200010cc
 8009d70:	20000bf4 	.word	0x20000bf4
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d017      	beq.n	8009dba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009d8a:	4b13      	ldr	r3, [pc, #76]	; (8009dd8 <vTaskDelay+0x60>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00a      	beq.n	8009da8 <vTaskDelay+0x30>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	60bb      	str	r3, [r7, #8]
}
 8009da4:	bf00      	nop
 8009da6:	e7fe      	b.n	8009da6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009da8:	f000 f88a 	bl	8009ec0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009dac:	2100      	movs	r1, #0
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fcfe 	bl	800a7b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009db4:	f000 f892 	bl	8009edc <xTaskResumeAll>
 8009db8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d107      	bne.n	8009dd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009dc0:	4b06      	ldr	r3, [pc, #24]	; (8009ddc <vTaskDelay+0x64>)
 8009dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dd0:	bf00      	nop
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	200010ec 	.word	0x200010ec
 8009ddc:	e000ed04 	.word	0xe000ed04

08009de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08a      	sub	sp, #40	; 0x28
 8009de4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009dea:	2300      	movs	r3, #0
 8009dec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009dee:	463a      	mov	r2, r7
 8009df0:	1d39      	adds	r1, r7, #4
 8009df2:	f107 0308 	add.w	r3, r7, #8
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff f832 	bl	8008e60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	9202      	str	r2, [sp, #8]
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	2300      	movs	r3, #0
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	460a      	mov	r2, r1
 8009e0e:	4924      	ldr	r1, [pc, #144]	; (8009ea0 <vTaskStartScheduler+0xc0>)
 8009e10:	4824      	ldr	r0, [pc, #144]	; (8009ea4 <vTaskStartScheduler+0xc4>)
 8009e12:	f7ff fdf9 	bl	8009a08 <xTaskCreateStatic>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4a23      	ldr	r2, [pc, #140]	; (8009ea8 <vTaskStartScheduler+0xc8>)
 8009e1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e1c:	4b22      	ldr	r3, [pc, #136]	; (8009ea8 <vTaskStartScheduler+0xc8>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e24:	2301      	movs	r3, #1
 8009e26:	617b      	str	r3, [r7, #20]
 8009e28:	e001      	b.n	8009e2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d102      	bne.n	8009e3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e34:	f000 fd10 	bl	800a858 <xTimerCreateTimerTask>
 8009e38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d11b      	bne.n	8009e78 <vTaskStartScheduler+0x98>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	613b      	str	r3, [r7, #16]
}
 8009e52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e54:	4b15      	ldr	r3, [pc, #84]	; (8009eac <vTaskStartScheduler+0xcc>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	3354      	adds	r3, #84	; 0x54
 8009e5a:	4a15      	ldr	r2, [pc, #84]	; (8009eb0 <vTaskStartScheduler+0xd0>)
 8009e5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e5e:	4b15      	ldr	r3, [pc, #84]	; (8009eb4 <vTaskStartScheduler+0xd4>)
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e66:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <vTaskStartScheduler+0xd8>)
 8009e68:	2201      	movs	r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009e6c:	4b13      	ldr	r3, [pc, #76]	; (8009ebc <vTaskStartScheduler+0xdc>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009e72:	f001 f9ad 	bl	800b1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009e76:	e00e      	b.n	8009e96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7e:	d10a      	bne.n	8009e96 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	60fb      	str	r3, [r7, #12]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <vTaskStartScheduler+0xb4>
}
 8009e96:	bf00      	nop
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	0800c95c 	.word	0x0800c95c
 8009ea4:	0800a4e5 	.word	0x0800a4e5
 8009ea8:	200010e8 	.word	0x200010e8
 8009eac:	20000bf0 	.word	0x20000bf0
 8009eb0:	20000270 	.word	0x20000270
 8009eb4:	200010e4 	.word	0x200010e4
 8009eb8:	200010d0 	.word	0x200010d0
 8009ebc:	200010c8 	.word	0x200010c8

08009ec0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ec4:	4b04      	ldr	r3, [pc, #16]	; (8009ed8 <vTaskSuspendAll+0x18>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	4a03      	ldr	r2, [pc, #12]	; (8009ed8 <vTaskSuspendAll+0x18>)
 8009ecc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ece:	bf00      	nop
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	200010ec 	.word	0x200010ec

08009edc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009eea:	4b42      	ldr	r3, [pc, #264]	; (8009ff4 <xTaskResumeAll+0x118>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10a      	bne.n	8009f08 <xTaskResumeAll+0x2c>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	f383 8811 	msr	BASEPRI, r3
 8009efa:	f3bf 8f6f 	isb	sy
 8009efe:	f3bf 8f4f 	dsb	sy
 8009f02:	603b      	str	r3, [r7, #0]
}
 8009f04:	bf00      	nop
 8009f06:	e7fe      	b.n	8009f06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f08:	f001 fa04 	bl	800b314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f0c:	4b39      	ldr	r3, [pc, #228]	; (8009ff4 <xTaskResumeAll+0x118>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	4a38      	ldr	r2, [pc, #224]	; (8009ff4 <xTaskResumeAll+0x118>)
 8009f14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f16:	4b37      	ldr	r3, [pc, #220]	; (8009ff4 <xTaskResumeAll+0x118>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d162      	bne.n	8009fe4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f1e:	4b36      	ldr	r3, [pc, #216]	; (8009ff8 <xTaskResumeAll+0x11c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d05e      	beq.n	8009fe4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f26:	e02f      	b.n	8009f88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f28:	4b34      	ldr	r3, [pc, #208]	; (8009ffc <xTaskResumeAll+0x120>)
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	3318      	adds	r3, #24
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7ff f851 	bl	8008fdc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff f84c 	bl	8008fdc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f48:	4b2d      	ldr	r3, [pc, #180]	; (800a000 <xTaskResumeAll+0x124>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d903      	bls.n	8009f58 <xTaskResumeAll+0x7c>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	4a2a      	ldr	r2, [pc, #168]	; (800a000 <xTaskResumeAll+0x124>)
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4a27      	ldr	r2, [pc, #156]	; (800a004 <xTaskResumeAll+0x128>)
 8009f66:	441a      	add	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7fe ffd7 	bl	8008f22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f78:	4b23      	ldr	r3, [pc, #140]	; (800a008 <xTaskResumeAll+0x12c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d302      	bcc.n	8009f88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009f82:	4b22      	ldr	r3, [pc, #136]	; (800a00c <xTaskResumeAll+0x130>)
 8009f84:	2201      	movs	r2, #1
 8009f86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f88:	4b1c      	ldr	r3, [pc, #112]	; (8009ffc <xTaskResumeAll+0x120>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1cb      	bne.n	8009f28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009f96:	f000 fb5f 	bl	800a658 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009f9a:	4b1d      	ldr	r3, [pc, #116]	; (800a010 <xTaskResumeAll+0x134>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d010      	beq.n	8009fc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009fa6:	f000 f847 	bl	800a038 <xTaskIncrementTick>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009fb0:	4b16      	ldr	r3, [pc, #88]	; (800a00c <xTaskResumeAll+0x130>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1f1      	bne.n	8009fa6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009fc2:	4b13      	ldr	r3, [pc, #76]	; (800a010 <xTaskResumeAll+0x134>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009fc8:	4b10      	ldr	r3, [pc, #64]	; (800a00c <xTaskResumeAll+0x130>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d009      	beq.n	8009fe4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009fd4:	4b0f      	ldr	r3, [pc, #60]	; (800a014 <xTaskResumeAll+0x138>)
 8009fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fe4:	f001 f9c6 	bl	800b374 <vPortExitCritical>

	return xAlreadyYielded;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200010ec 	.word	0x200010ec
 8009ff8:	200010c4 	.word	0x200010c4
 8009ffc:	20001084 	.word	0x20001084
 800a000:	200010cc 	.word	0x200010cc
 800a004:	20000bf4 	.word	0x20000bf4
 800a008:	20000bf0 	.word	0x20000bf0
 800a00c:	200010d8 	.word	0x200010d8
 800a010:	200010d4 	.word	0x200010d4
 800a014:	e000ed04 	.word	0xe000ed04

0800a018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a01e:	4b05      	ldr	r3, [pc, #20]	; (800a034 <xTaskGetTickCount+0x1c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a024:	687b      	ldr	r3, [r7, #4]
}
 800a026:	4618      	mov	r0, r3
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	200010c8 	.word	0x200010c8

0800a038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a03e:	2300      	movs	r3, #0
 800a040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a042:	4b4f      	ldr	r3, [pc, #316]	; (800a180 <xTaskIncrementTick+0x148>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f040 808f 	bne.w	800a16a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a04c:	4b4d      	ldr	r3, [pc, #308]	; (800a184 <xTaskIncrementTick+0x14c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3301      	adds	r3, #1
 800a052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a054:	4a4b      	ldr	r2, [pc, #300]	; (800a184 <xTaskIncrementTick+0x14c>)
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d120      	bne.n	800a0a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a060:	4b49      	ldr	r3, [pc, #292]	; (800a188 <xTaskIncrementTick+0x150>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00a      	beq.n	800a080 <xTaskIncrementTick+0x48>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	603b      	str	r3, [r7, #0]
}
 800a07c:	bf00      	nop
 800a07e:	e7fe      	b.n	800a07e <xTaskIncrementTick+0x46>
 800a080:	4b41      	ldr	r3, [pc, #260]	; (800a188 <xTaskIncrementTick+0x150>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	4b41      	ldr	r3, [pc, #260]	; (800a18c <xTaskIncrementTick+0x154>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a3f      	ldr	r2, [pc, #252]	; (800a188 <xTaskIncrementTick+0x150>)
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	4a3f      	ldr	r2, [pc, #252]	; (800a18c <xTaskIncrementTick+0x154>)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	4b3e      	ldr	r3, [pc, #248]	; (800a190 <xTaskIncrementTick+0x158>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	3301      	adds	r3, #1
 800a09a:	4a3d      	ldr	r2, [pc, #244]	; (800a190 <xTaskIncrementTick+0x158>)
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	f000 fadb 	bl	800a658 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a0a2:	4b3c      	ldr	r3, [pc, #240]	; (800a194 <xTaskIncrementTick+0x15c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d349      	bcc.n	800a140 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ac:	4b36      	ldr	r3, [pc, #216]	; (800a188 <xTaskIncrementTick+0x150>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d104      	bne.n	800a0c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b6:	4b37      	ldr	r3, [pc, #220]	; (800a194 <xTaskIncrementTick+0x15c>)
 800a0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0bc:	601a      	str	r2, [r3, #0]
					break;
 800a0be:	e03f      	b.n	800a140 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c0:	4b31      	ldr	r3, [pc, #196]	; (800a188 <xTaskIncrementTick+0x150>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d203      	bcs.n	800a0e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a0d8:	4a2e      	ldr	r2, [pc, #184]	; (800a194 <xTaskIncrementTick+0x15c>)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0de:	e02f      	b.n	800a140 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fe ff79 	bl	8008fdc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	3318      	adds	r3, #24
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe ff70 	bl	8008fdc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a100:	4b25      	ldr	r3, [pc, #148]	; (800a198 <xTaskIncrementTick+0x160>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	429a      	cmp	r2, r3
 800a106:	d903      	bls.n	800a110 <xTaskIncrementTick+0xd8>
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	4a22      	ldr	r2, [pc, #136]	; (800a198 <xTaskIncrementTick+0x160>)
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4a1f      	ldr	r2, [pc, #124]	; (800a19c <xTaskIncrementTick+0x164>)
 800a11e:	441a      	add	r2, r3
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	3304      	adds	r3, #4
 800a124:	4619      	mov	r1, r3
 800a126:	4610      	mov	r0, r2
 800a128:	f7fe fefb 	bl	8008f22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a130:	4b1b      	ldr	r3, [pc, #108]	; (800a1a0 <xTaskIncrementTick+0x168>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	429a      	cmp	r2, r3
 800a138:	d3b8      	bcc.n	800a0ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a13a:	2301      	movs	r3, #1
 800a13c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a13e:	e7b5      	b.n	800a0ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a140:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <xTaskIncrementTick+0x168>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a146:	4915      	ldr	r1, [pc, #84]	; (800a19c <xTaskIncrementTick+0x164>)
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d901      	bls.n	800a15c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a15c:	4b11      	ldr	r3, [pc, #68]	; (800a1a4 <xTaskIncrementTick+0x16c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d007      	beq.n	800a174 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a164:	2301      	movs	r3, #1
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	e004      	b.n	800a174 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a16a:	4b0f      	ldr	r3, [pc, #60]	; (800a1a8 <xTaskIncrementTick+0x170>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3301      	adds	r3, #1
 800a170:	4a0d      	ldr	r2, [pc, #52]	; (800a1a8 <xTaskIncrementTick+0x170>)
 800a172:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a174:	697b      	ldr	r3, [r7, #20]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3718      	adds	r7, #24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	200010ec 	.word	0x200010ec
 800a184:	200010c8 	.word	0x200010c8
 800a188:	2000107c 	.word	0x2000107c
 800a18c:	20001080 	.word	0x20001080
 800a190:	200010dc 	.word	0x200010dc
 800a194:	200010e4 	.word	0x200010e4
 800a198:	200010cc 	.word	0x200010cc
 800a19c:	20000bf4 	.word	0x20000bf4
 800a1a0:	20000bf0 	.word	0x20000bf0
 800a1a4:	200010d8 	.word	0x200010d8
 800a1a8:	200010d4 	.word	0x200010d4

0800a1ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1b2:	4b2a      	ldr	r3, [pc, #168]	; (800a25c <vTaskSwitchContext+0xb0>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d003      	beq.n	800a1c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a1ba:	4b29      	ldr	r3, [pc, #164]	; (800a260 <vTaskSwitchContext+0xb4>)
 800a1bc:	2201      	movs	r2, #1
 800a1be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a1c0:	e046      	b.n	800a250 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a1c2:	4b27      	ldr	r3, [pc, #156]	; (800a260 <vTaskSwitchContext+0xb4>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1c8:	4b26      	ldr	r3, [pc, #152]	; (800a264 <vTaskSwitchContext+0xb8>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60fb      	str	r3, [r7, #12]
 800a1ce:	e010      	b.n	800a1f2 <vTaskSwitchContext+0x46>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10a      	bne.n	800a1ec <vTaskSwitchContext+0x40>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	607b      	str	r3, [r7, #4]
}
 800a1e8:	bf00      	nop
 800a1ea:	e7fe      	b.n	800a1ea <vTaskSwitchContext+0x3e>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	491d      	ldr	r1, [pc, #116]	; (800a268 <vTaskSwitchContext+0xbc>)
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d0e4      	beq.n	800a1d0 <vTaskSwitchContext+0x24>
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4a15      	ldr	r2, [pc, #84]	; (800a268 <vTaskSwitchContext+0xbc>)
 800a212:	4413      	add	r3, r2
 800a214:	60bb      	str	r3, [r7, #8]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	605a      	str	r2, [r3, #4]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	3308      	adds	r3, #8
 800a228:	429a      	cmp	r2, r3
 800a22a:	d104      	bne.n	800a236 <vTaskSwitchContext+0x8a>
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	605a      	str	r2, [r3, #4]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	4a0b      	ldr	r2, [pc, #44]	; (800a26c <vTaskSwitchContext+0xc0>)
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	4a08      	ldr	r2, [pc, #32]	; (800a264 <vTaskSwitchContext+0xb8>)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a246:	4b09      	ldr	r3, [pc, #36]	; (800a26c <vTaskSwitchContext+0xc0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3354      	adds	r3, #84	; 0x54
 800a24c:	4a08      	ldr	r2, [pc, #32]	; (800a270 <vTaskSwitchContext+0xc4>)
 800a24e:	6013      	str	r3, [r2, #0]
}
 800a250:	bf00      	nop
 800a252:	3714      	adds	r7, #20
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	200010ec 	.word	0x200010ec
 800a260:	200010d8 	.word	0x200010d8
 800a264:	200010cc 	.word	0x200010cc
 800a268:	20000bf4 	.word	0x20000bf4
 800a26c:	20000bf0 	.word	0x20000bf0
 800a270:	20000270 	.word	0x20000270

0800a274 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10a      	bne.n	800a29a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	60fb      	str	r3, [r7, #12]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a29a:	4b07      	ldr	r3, [pc, #28]	; (800a2b8 <vTaskPlaceOnEventList+0x44>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3318      	adds	r3, #24
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7fe fe61 	bl	8008f6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	6838      	ldr	r0, [r7, #0]
 800a2ac:	f000 fa80 	bl	800a7b0 <prvAddCurrentTaskToDelayedList>
}
 800a2b0:	bf00      	nop
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	20000bf0 	.word	0x20000bf0

0800a2bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	617b      	str	r3, [r7, #20]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <vTaskPlaceOnEventListRestricted+0x54>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3318      	adds	r3, #24
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7fe fe18 	bl	8008f22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	68b8      	ldr	r0, [r7, #8]
 800a302:	f000 fa55 	bl	800a7b0 <prvAddCurrentTaskToDelayedList>
	}
 800a306:	bf00      	nop
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20000bf0 	.word	0x20000bf0

0800a314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	60fb      	str	r3, [r7, #12]
}
 800a33c:	bf00      	nop
 800a33e:	e7fe      	b.n	800a33e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	3318      	adds	r3, #24
 800a344:	4618      	mov	r0, r3
 800a346:	f7fe fe49 	bl	8008fdc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a34a:	4b1e      	ldr	r3, [pc, #120]	; (800a3c4 <xTaskRemoveFromEventList+0xb0>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d11d      	bne.n	800a38e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3304      	adds	r3, #4
 800a356:	4618      	mov	r0, r3
 800a358:	f7fe fe40 	bl	8008fdc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a360:	4b19      	ldr	r3, [pc, #100]	; (800a3c8 <xTaskRemoveFromEventList+0xb4>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	429a      	cmp	r2, r3
 800a366:	d903      	bls.n	800a370 <xTaskRemoveFromEventList+0x5c>
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36c:	4a16      	ldr	r2, [pc, #88]	; (800a3c8 <xTaskRemoveFromEventList+0xb4>)
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a374:	4613      	mov	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4a13      	ldr	r2, [pc, #76]	; (800a3cc <xTaskRemoveFromEventList+0xb8>)
 800a37e:	441a      	add	r2, r3
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3304      	adds	r3, #4
 800a384:	4619      	mov	r1, r3
 800a386:	4610      	mov	r0, r2
 800a388:	f7fe fdcb 	bl	8008f22 <vListInsertEnd>
 800a38c:	e005      	b.n	800a39a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	3318      	adds	r3, #24
 800a392:	4619      	mov	r1, r3
 800a394:	480e      	ldr	r0, [pc, #56]	; (800a3d0 <xTaskRemoveFromEventList+0xbc>)
 800a396:	f7fe fdc4 	bl	8008f22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39e:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <xTaskRemoveFromEventList+0xc0>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d905      	bls.n	800a3b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <xTaskRemoveFromEventList+0xc4>)
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	e001      	b.n	800a3b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a3b8:	697b      	ldr	r3, [r7, #20]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	200010ec 	.word	0x200010ec
 800a3c8:	200010cc 	.word	0x200010cc
 800a3cc:	20000bf4 	.word	0x20000bf4
 800a3d0:	20001084 	.word	0x20001084
 800a3d4:	20000bf0 	.word	0x20000bf0
 800a3d8:	200010d8 	.word	0x200010d8

0800a3dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <vTaskInternalSetTimeOutState+0x24>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3ec:	4b05      	ldr	r3, [pc, #20]	; (800a404 <vTaskInternalSetTimeOutState+0x28>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	605a      	str	r2, [r3, #4]
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	200010dc 	.word	0x200010dc
 800a404:	200010c8 	.word	0x200010c8

0800a408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	613b      	str	r3, [r7, #16]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	60fb      	str	r3, [r7, #12]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a44a:	f000 ff63 	bl	800b314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a44e:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <xTaskCheckForTimeOut+0xbc>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	69ba      	ldr	r2, [r7, #24]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a466:	d102      	bne.n	800a46e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a468:	2300      	movs	r3, #0
 800a46a:	61fb      	str	r3, [r7, #28]
 800a46c:	e023      	b.n	800a4b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	4b15      	ldr	r3, [pc, #84]	; (800a4c8 <xTaskCheckForTimeOut+0xc0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d007      	beq.n	800a48a <xTaskCheckForTimeOut+0x82>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	429a      	cmp	r2, r3
 800a482:	d302      	bcc.n	800a48a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	61fb      	str	r3, [r7, #28]
 800a488:	e015      	b.n	800a4b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	429a      	cmp	r2, r3
 800a492:	d20b      	bcs.n	800a4ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	1ad2      	subs	r2, r2, r3
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff ff9b 	bl	800a3dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61fb      	str	r3, [r7, #28]
 800a4aa:	e004      	b.n	800a4b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4b6:	f000 ff5d 	bl	800b374 <vPortExitCritical>

	return xReturn;
 800a4ba:	69fb      	ldr	r3, [r7, #28]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3720      	adds	r7, #32
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	200010c8 	.word	0x200010c8
 800a4c8:	200010dc 	.word	0x200010dc

0800a4cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4d0:	4b03      	ldr	r3, [pc, #12]	; (800a4e0 <vTaskMissedYield+0x14>)
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
}
 800a4d6:	bf00      	nop
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	200010d8 	.word	0x200010d8

0800a4e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4ec:	f000 f852 	bl	800a594 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <prvIdleTask+0x28>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d9f9      	bls.n	800a4ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4f8:	4b05      	ldr	r3, [pc, #20]	; (800a510 <prvIdleTask+0x2c>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a508:	e7f0      	b.n	800a4ec <prvIdleTask+0x8>
 800a50a:	bf00      	nop
 800a50c:	20000bf4 	.word	0x20000bf4
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a51a:	2300      	movs	r3, #0
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	e00c      	b.n	800a53a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	4613      	mov	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4a12      	ldr	r2, [pc, #72]	; (800a574 <prvInitialiseTaskLists+0x60>)
 800a52c:	4413      	add	r3, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe fcca 	bl	8008ec8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	3301      	adds	r3, #1
 800a538:	607b      	str	r3, [r7, #4]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b37      	cmp	r3, #55	; 0x37
 800a53e:	d9ef      	bls.n	800a520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a540:	480d      	ldr	r0, [pc, #52]	; (800a578 <prvInitialiseTaskLists+0x64>)
 800a542:	f7fe fcc1 	bl	8008ec8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a546:	480d      	ldr	r0, [pc, #52]	; (800a57c <prvInitialiseTaskLists+0x68>)
 800a548:	f7fe fcbe 	bl	8008ec8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a54c:	480c      	ldr	r0, [pc, #48]	; (800a580 <prvInitialiseTaskLists+0x6c>)
 800a54e:	f7fe fcbb 	bl	8008ec8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a552:	480c      	ldr	r0, [pc, #48]	; (800a584 <prvInitialiseTaskLists+0x70>)
 800a554:	f7fe fcb8 	bl	8008ec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a558:	480b      	ldr	r0, [pc, #44]	; (800a588 <prvInitialiseTaskLists+0x74>)
 800a55a:	f7fe fcb5 	bl	8008ec8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a55e:	4b0b      	ldr	r3, [pc, #44]	; (800a58c <prvInitialiseTaskLists+0x78>)
 800a560:	4a05      	ldr	r2, [pc, #20]	; (800a578 <prvInitialiseTaskLists+0x64>)
 800a562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <prvInitialiseTaskLists+0x7c>)
 800a566:	4a05      	ldr	r2, [pc, #20]	; (800a57c <prvInitialiseTaskLists+0x68>)
 800a568:	601a      	str	r2, [r3, #0]
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000bf4 	.word	0x20000bf4
 800a578:	20001054 	.word	0x20001054
 800a57c:	20001068 	.word	0x20001068
 800a580:	20001084 	.word	0x20001084
 800a584:	20001098 	.word	0x20001098
 800a588:	200010b0 	.word	0x200010b0
 800a58c:	2000107c 	.word	0x2000107c
 800a590:	20001080 	.word	0x20001080

0800a594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a59a:	e019      	b.n	800a5d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a59c:	f000 feba 	bl	800b314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a0:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <prvCheckTasksWaitingTermination+0x50>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fd15 	bl	8008fdc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5b2:	4b0d      	ldr	r3, [pc, #52]	; (800a5e8 <prvCheckTasksWaitingTermination+0x54>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	4a0b      	ldr	r2, [pc, #44]	; (800a5e8 <prvCheckTasksWaitingTermination+0x54>)
 800a5ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5bc:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <prvCheckTasksWaitingTermination+0x58>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	4a0a      	ldr	r2, [pc, #40]	; (800a5ec <prvCheckTasksWaitingTermination+0x58>)
 800a5c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5c6:	f000 fed5 	bl	800b374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f810 	bl	800a5f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <prvCheckTasksWaitingTermination+0x58>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e1      	bne.n	800a59c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20001098 	.word	0x20001098
 800a5e8:	200010c4 	.word	0x200010c4
 800a5ec:	200010ac 	.word	0x200010ac

0800a5f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3354      	adds	r3, #84	; 0x54
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f001 fe45 	bl	800c28c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d108      	bne.n	800a61e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a610:	4618      	mov	r0, r3
 800a612:	f001 f86d 	bl	800b6f0 <vPortFree>
				vPortFree( pxTCB );
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 f86a 	bl	800b6f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a61c:	e018      	b.n	800a650 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a624:	2b01      	cmp	r3, #1
 800a626:	d103      	bne.n	800a630 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 f861 	bl	800b6f0 <vPortFree>
	}
 800a62e:	e00f      	b.n	800a650 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a636:	2b02      	cmp	r3, #2
 800a638:	d00a      	beq.n	800a650 <prvDeleteTCB+0x60>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	60fb      	str	r3, [r7, #12]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <prvDeleteTCB+0x5e>
	}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a65e:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <prvResetNextTaskUnblockTime+0x38>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d104      	bne.n	800a672 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <prvResetNextTaskUnblockTime+0x3c>)
 800a66a:	f04f 32ff 	mov.w	r2, #4294967295
 800a66e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a670:	e008      	b.n	800a684 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a672:	4b07      	ldr	r3, [pc, #28]	; (800a690 <prvResetNextTaskUnblockTime+0x38>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	4a04      	ldr	r2, [pc, #16]	; (800a694 <prvResetNextTaskUnblockTime+0x3c>)
 800a682:	6013      	str	r3, [r2, #0]
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr
 800a690:	2000107c 	.word	0x2000107c
 800a694:	200010e4 	.word	0x200010e4

0800a698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a69e:	4b0b      	ldr	r3, [pc, #44]	; (800a6cc <xTaskGetSchedulerState+0x34>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	607b      	str	r3, [r7, #4]
 800a6aa:	e008      	b.n	800a6be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ac:	4b08      	ldr	r3, [pc, #32]	; (800a6d0 <xTaskGetSchedulerState+0x38>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	e001      	b.n	800a6be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6be:	687b      	ldr	r3, [r7, #4]
	}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	200010d0 	.word	0x200010d0
 800a6d0:	200010ec 	.word	0x200010ec

0800a6d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d056      	beq.n	800a798 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6ea:	4b2e      	ldr	r3, [pc, #184]	; (800a7a4 <xTaskPriorityDisinherit+0xd0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d00a      	beq.n	800a70a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	60fb      	str	r3, [r7, #12]
}
 800a706:	bf00      	nop
 800a708:	e7fe      	b.n	800a708 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10a      	bne.n	800a728 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	60bb      	str	r3, [r7, #8]
}
 800a724:	bf00      	nop
 800a726:	e7fe      	b.n	800a726 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72c:	1e5a      	subs	r2, r3, #1
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d02c      	beq.n	800a798 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a742:	2b00      	cmp	r3, #0
 800a744:	d128      	bne.n	800a798 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	3304      	adds	r3, #4
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fc46 	bl	8008fdc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a768:	4b0f      	ldr	r3, [pc, #60]	; (800a7a8 <xTaskPriorityDisinherit+0xd4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d903      	bls.n	800a778 <xTaskPriorityDisinherit+0xa4>
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a774:	4a0c      	ldr	r2, [pc, #48]	; (800a7a8 <xTaskPriorityDisinherit+0xd4>)
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77c:	4613      	mov	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4a09      	ldr	r2, [pc, #36]	; (800a7ac <xTaskPriorityDisinherit+0xd8>)
 800a786:	441a      	add	r2, r3
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4619      	mov	r1, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	f7fe fbc7 	bl	8008f22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a798:	697b      	ldr	r3, [r7, #20]
	}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20000bf0 	.word	0x20000bf0
 800a7a8:	200010cc 	.word	0x200010cc
 800a7ac:	20000bf4 	.word	0x20000bf4

0800a7b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7ba:	4b21      	ldr	r3, [pc, #132]	; (800a840 <prvAddCurrentTaskToDelayedList+0x90>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7c0:	4b20      	ldr	r3, [pc, #128]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fc08 	bl	8008fdc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d2:	d10a      	bne.n	800a7ea <prvAddCurrentTaskToDelayedList+0x3a>
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d007      	beq.n	800a7ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7da:	4b1a      	ldr	r3, [pc, #104]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4819      	ldr	r0, [pc, #100]	; (800a848 <prvAddCurrentTaskToDelayedList+0x98>)
 800a7e4:	f7fe fb9d 	bl	8008f22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7e8:	e026      	b.n	800a838 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7f2:	4b14      	ldr	r3, [pc, #80]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d209      	bcs.n	800a816 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a802:	4b12      	ldr	r3, [pc, #72]	; (800a84c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	4b0f      	ldr	r3, [pc, #60]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3304      	adds	r3, #4
 800a80c:	4619      	mov	r1, r3
 800a80e:	4610      	mov	r0, r2
 800a810:	f7fe fbab 	bl	8008f6a <vListInsert>
}
 800a814:	e010      	b.n	800a838 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a816:	4b0e      	ldr	r3, [pc, #56]	; (800a850 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <prvAddCurrentTaskToDelayedList+0x94>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3304      	adds	r3, #4
 800a820:	4619      	mov	r1, r3
 800a822:	4610      	mov	r0, r2
 800a824:	f7fe fba1 	bl	8008f6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a828:	4b0a      	ldr	r3, [pc, #40]	; (800a854 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d202      	bcs.n	800a838 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a832:	4a08      	ldr	r2, [pc, #32]	; (800a854 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	6013      	str	r3, [r2, #0]
}
 800a838:	bf00      	nop
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	200010c8 	.word	0x200010c8
 800a844:	20000bf0 	.word	0x20000bf0
 800a848:	200010b0 	.word	0x200010b0
 800a84c:	20001080 	.word	0x20001080
 800a850:	2000107c 	.word	0x2000107c
 800a854:	200010e4 	.word	0x200010e4

0800a858 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	; 0x28
 800a85c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a85e:	2300      	movs	r3, #0
 800a860:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a862:	f000 fba1 	bl	800afa8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a866:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <xTimerCreateTimerTask+0x80>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d021      	beq.n	800a8b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a876:	1d3a      	adds	r2, r7, #4
 800a878:	f107 0108 	add.w	r1, r7, #8
 800a87c:	f107 030c 	add.w	r3, r7, #12
 800a880:	4618      	mov	r0, r3
 800a882:	f7fe fb07 	bl	8008e94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	9202      	str	r2, [sp, #8]
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	2302      	movs	r3, #2
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	2300      	movs	r3, #0
 800a896:	460a      	mov	r2, r1
 800a898:	4910      	ldr	r1, [pc, #64]	; (800a8dc <xTimerCreateTimerTask+0x84>)
 800a89a:	4811      	ldr	r0, [pc, #68]	; (800a8e0 <xTimerCreateTimerTask+0x88>)
 800a89c:	f7ff f8b4 	bl	8009a08 <xTaskCreateStatic>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	4a10      	ldr	r2, [pc, #64]	; (800a8e4 <xTimerCreateTimerTask+0x8c>)
 800a8a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8a6:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <xTimerCreateTimerTask+0x8c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10a      	bne.n	800a8ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	613b      	str	r3, [r7, #16]
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a8ce:	697b      	ldr	r3, [r7, #20]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	20001120 	.word	0x20001120
 800a8dc:	0800c964 	.word	0x0800c964
 800a8e0:	0800ab51 	.word	0x0800ab51
 800a8e4:	20001124 	.word	0x20001124

0800a8e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a8f6:	202c      	movs	r0, #44	; 0x2c
 800a8f8:	f000 fe2e 	bl	800b558 <pvPortMalloc>
 800a8fc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00d      	beq.n	800a920 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	68b9      	ldr	r1, [r7, #8]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f843 	bl	800a9a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a920:	697b      	ldr	r3, [r7, #20]
	}
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b08a      	sub	sp, #40	; 0x28
 800a92e:	af02      	add	r7, sp, #8
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	607a      	str	r2, [r7, #4]
 800a936:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a938:	232c      	movs	r3, #44	; 0x2c
 800a93a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	2b2c      	cmp	r3, #44	; 0x2c
 800a940:	d00a      	beq.n	800a958 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	61bb      	str	r3, [r7, #24]
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a958:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10a      	bne.n	800a976 <xTimerCreateStatic+0x4c>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	617b      	str	r3, [r7, #20]
}
 800a972:	bf00      	nop
 800a974:	e7fe      	b.n	800a974 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a978:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00d      	beq.n	800a99c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	9301      	str	r3, [sp, #4]
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	68b9      	ldr	r1, [r7, #8]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 f805 	bl	800a9a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a99c:	69fb      	ldr	r3, [r7, #28]
	}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3720      	adds	r7, #32
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b086      	sub	sp, #24
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	60f8      	str	r0, [r7, #12]
 800a9ae:	60b9      	str	r1, [r7, #8]
 800a9b0:	607a      	str	r2, [r7, #4]
 800a9b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10a      	bne.n	800a9d0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	617b      	str	r3, [r7, #20]
}
 800a9cc:	bf00      	nop
 800a9ce:	e7fe      	b.n	800a9ce <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d01e      	beq.n	800aa14 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a9d6:	f000 fae7 	bl	800afa8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	6a3a      	ldr	r2, [r7, #32]
 800a9f0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe fa86 	bl	8008f08 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d008      	beq.n	800aa14 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa08:	f043 0304 	orr.w	r3, r3, #4
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800aa14:	bf00      	nop
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <xTimerGenericCommand+0x2e>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	623b      	str	r3, [r7, #32]
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa4a:	4b1a      	ldr	r3, [pc, #104]	; (800aab4 <xTimerGenericCommand+0x98>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d02a      	beq.n	800aaa8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b05      	cmp	r3, #5
 800aa62:	dc18      	bgt.n	800aa96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa64:	f7ff fe18 	bl	800a698 <xTaskGetSchedulerState>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d109      	bne.n	800aa82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa6e:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <xTimerGenericCommand+0x98>)
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	f107 0110 	add.w	r1, r7, #16
 800aa76:	2300      	movs	r3, #0
 800aa78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa7a:	f7fe fbdd 	bl	8009238 <xQueueGenericSend>
 800aa7e:	6278      	str	r0, [r7, #36]	; 0x24
 800aa80:	e012      	b.n	800aaa8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa82:	4b0c      	ldr	r3, [pc, #48]	; (800aab4 <xTimerGenericCommand+0x98>)
 800aa84:	6818      	ldr	r0, [r3, #0]
 800aa86:	f107 0110 	add.w	r1, r7, #16
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f7fe fbd3 	bl	8009238 <xQueueGenericSend>
 800aa92:	6278      	str	r0, [r7, #36]	; 0x24
 800aa94:	e008      	b.n	800aaa8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa96:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <xTimerGenericCommand+0x98>)
 800aa98:	6818      	ldr	r0, [r3, #0]
 800aa9a:	f107 0110 	add.w	r1, r7, #16
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	f7fe fcc7 	bl	8009434 <xQueueGenericSendFromISR>
 800aaa6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3728      	adds	r7, #40	; 0x28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20001120 	.word	0x20001120

0800aab8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af02      	add	r7, sp, #8
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac2:	4b22      	ldr	r3, [pc, #136]	; (800ab4c <prvProcessExpiredTimer+0x94>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	3304      	adds	r3, #4
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fe fa83 	bl	8008fdc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d022      	beq.n	800ab2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	699a      	ldr	r2, [r3, #24]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	18d1      	adds	r1, r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	6978      	ldr	r0, [r7, #20]
 800aaf2:	f000 f8d1 	bl	800ac98 <prvInsertTimerInActiveList>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d01f      	beq.n	800ab3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aafc:	2300      	movs	r3, #0
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	2300      	movs	r3, #0
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	2100      	movs	r1, #0
 800ab06:	6978      	ldr	r0, [r7, #20]
 800ab08:	f7ff ff88 	bl	800aa1c <xTimerGenericCommand>
 800ab0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d113      	bne.n	800ab3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ab14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	60fb      	str	r3, [r7, #12]
}
 800ab26:	bf00      	nop
 800ab28:	e7fe      	b.n	800ab28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab30:	f023 0301 	bic.w	r3, r3, #1
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	6978      	ldr	r0, [r7, #20]
 800ab42:	4798      	blx	r3
}
 800ab44:	bf00      	nop
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20001118 	.word	0x20001118

0800ab50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab58:	f107 0308 	add.w	r3, r7, #8
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 f857 	bl	800ac10 <prvGetNextExpireTime>
 800ab62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	4619      	mov	r1, r3
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 f803 	bl	800ab74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab6e:	f000 f8d5 	bl	800ad1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab72:	e7f1      	b.n	800ab58 <prvTimerTask+0x8>

0800ab74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab7e:	f7ff f99f 	bl	8009ec0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab82:	f107 0308 	add.w	r3, r7, #8
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f866 	bl	800ac58 <prvSampleTimeNow>
 800ab8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d130      	bne.n	800abf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10a      	bne.n	800abb0 <prvProcessTimerOrBlockTask+0x3c>
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d806      	bhi.n	800abb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aba2:	f7ff f99b 	bl	8009edc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aba6:	68f9      	ldr	r1, [r7, #12]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff ff85 	bl	800aab8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abae:	e024      	b.n	800abfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d008      	beq.n	800abc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abb6:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <prvProcessTimerOrBlockTask+0x90>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <prvProcessTimerOrBlockTask+0x50>
 800abc0:	2301      	movs	r3, #1
 800abc2:	e000      	b.n	800abc6 <prvProcessTimerOrBlockTask+0x52>
 800abc4:	2300      	movs	r3, #0
 800abc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abc8:	4b0f      	ldr	r3, [pc, #60]	; (800ac08 <prvProcessTimerOrBlockTask+0x94>)
 800abca:	6818      	ldr	r0, [r3, #0]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	4619      	mov	r1, r3
 800abd6:	f7fe fee3 	bl	80099a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800abda:	f7ff f97f 	bl	8009edc <xTaskResumeAll>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800abe4:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <prvProcessTimerOrBlockTask+0x98>)
 800abe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	f3bf 8f6f 	isb	sy
}
 800abf4:	e001      	b.n	800abfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800abf6:	f7ff f971 	bl	8009edc <xTaskResumeAll>
}
 800abfa:	bf00      	nop
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	2000111c 	.word	0x2000111c
 800ac08:	20001120 	.word	0x20001120
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac18:	4b0e      	ldr	r3, [pc, #56]	; (800ac54 <prvGetNextExpireTime+0x44>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <prvGetNextExpireTime+0x16>
 800ac22:	2201      	movs	r2, #1
 800ac24:	e000      	b.n	800ac28 <prvGetNextExpireTime+0x18>
 800ac26:	2200      	movs	r2, #0
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d105      	bne.n	800ac40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac34:	4b07      	ldr	r3, [pc, #28]	; (800ac54 <prvGetNextExpireTime+0x44>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	e001      	b.n	800ac44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac44:	68fb      	ldr	r3, [r7, #12]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20001118 	.word	0x20001118

0800ac58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac60:	f7ff f9da 	bl	800a018 <xTaskGetTickCount>
 800ac64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac66:	4b0b      	ldr	r3, [pc, #44]	; (800ac94 <prvSampleTimeNow+0x3c>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d205      	bcs.n	800ac7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac70:	f000 f936 	bl	800aee0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	e002      	b.n	800ac82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac82:	4a04      	ldr	r2, [pc, #16]	; (800ac94 <prvSampleTimeNow+0x3c>)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac88:	68fb      	ldr	r3, [r7, #12]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	20001128 	.word	0x20001128

0800ac98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aca6:	2300      	movs	r3, #0
 800aca8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d812      	bhi.n	800ace4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	1ad2      	subs	r2, r2, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d302      	bcc.n	800acd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800accc:	2301      	movs	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	e01b      	b.n	800ad0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acd2:	4b10      	ldr	r3, [pc, #64]	; (800ad14 <prvInsertTimerInActiveList+0x7c>)
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	3304      	adds	r3, #4
 800acda:	4619      	mov	r1, r3
 800acdc:	4610      	mov	r0, r2
 800acde:	f7fe f944 	bl	8008f6a <vListInsert>
 800ace2:	e012      	b.n	800ad0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d206      	bcs.n	800acfa <prvInsertTimerInActiveList+0x62>
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d302      	bcc.n	800acfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800acf4:	2301      	movs	r3, #1
 800acf6:	617b      	str	r3, [r7, #20]
 800acf8:	e007      	b.n	800ad0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acfa:	4b07      	ldr	r3, [pc, #28]	; (800ad18 <prvInsertTimerInActiveList+0x80>)
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	3304      	adds	r3, #4
 800ad02:	4619      	mov	r1, r3
 800ad04:	4610      	mov	r0, r2
 800ad06:	f7fe f930 	bl	8008f6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad0a:	697b      	ldr	r3, [r7, #20]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	2000111c 	.word	0x2000111c
 800ad18:	20001118 	.word	0x20001118

0800ad1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08e      	sub	sp, #56	; 0x38
 800ad20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad22:	e0ca      	b.n	800aeba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	da18      	bge.n	800ad5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad2a:	1d3b      	adds	r3, r7, #4
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10a      	bne.n	800ad4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	61fb      	str	r3, [r7, #28]
}
 800ad48:	bf00      	nop
 800ad4a:	e7fe      	b.n	800ad4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad52:	6850      	ldr	r0, [r2, #4]
 800ad54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad56:	6892      	ldr	r2, [r2, #8]
 800ad58:	4611      	mov	r1, r2
 800ad5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f2c0 80aa 	blt.w	800aeb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad72:	3304      	adds	r3, #4
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fe f931 	bl	8008fdc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad7a:	463b      	mov	r3, r7
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff ff6b 	bl	800ac58 <prvSampleTimeNow>
 800ad82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b09      	cmp	r3, #9
 800ad88:	f200 8097 	bhi.w	800aeba <prvProcessReceivedCommands+0x19e>
 800ad8c:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <prvProcessReceivedCommands+0x78>)
 800ad8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad92:	bf00      	nop
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adbd 	.word	0x0800adbd
 800ad9c:	0800adbd 	.word	0x0800adbd
 800ada0:	0800ae31 	.word	0x0800ae31
 800ada4:	0800ae45 	.word	0x0800ae45
 800ada8:	0800ae8f 	.word	0x0800ae8f
 800adac:	0800adbd 	.word	0x0800adbd
 800adb0:	0800adbd 	.word	0x0800adbd
 800adb4:	0800ae31 	.word	0x0800ae31
 800adb8:	0800ae45 	.word	0x0800ae45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adc2:	f043 0301 	orr.w	r3, r3, #1
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	18d1      	adds	r1, r2, r3
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800addc:	f7ff ff5c 	bl	800ac98 <prvInsertTimerInActiveList>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d069      	beq.n	800aeba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ade6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d05e      	beq.n	800aeba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	441a      	add	r2, r3
 800ae04:	2300      	movs	r3, #0
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	2300      	movs	r3, #0
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae0e:	f7ff fe05 	bl	800aa1c <xTimerGenericCommand>
 800ae12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d14f      	bne.n	800aeba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	61bb      	str	r3, [r7, #24]
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae36:	f023 0301 	bic.w	r3, r3, #1
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ae42:	e03a      	b.n	800aeba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae4a:	f043 0301 	orr.w	r3, r3, #1
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	617b      	str	r3, [r7, #20]
}
 800ae76:	bf00      	nop
 800ae78:	e7fe      	b.n	800ae78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	699a      	ldr	r2, [r3, #24]
 800ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae80:	18d1      	adds	r1, r2, r3
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae88:	f7ff ff06 	bl	800ac98 <prvInsertTimerInActiveList>
					break;
 800ae8c:	e015      	b.n	800aeba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae94:	f003 0302 	and.w	r3, r3, #2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ae9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae9e:	f000 fc27 	bl	800b6f0 <vPortFree>
 800aea2:	e00a      	b.n	800aeba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeaa:	f023 0301 	bic.w	r3, r3, #1
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aeb6:	e000      	b.n	800aeba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aeb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aeba:	4b08      	ldr	r3, [pc, #32]	; (800aedc <prvProcessReceivedCommands+0x1c0>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	1d39      	adds	r1, r7, #4
 800aec0:	2200      	movs	r2, #0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe fb52 	bl	800956c <xQueueReceive>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f47f af2a 	bne.w	800ad24 <prvProcessReceivedCommands+0x8>
	}
}
 800aed0:	bf00      	nop
 800aed2:	bf00      	nop
 800aed4:	3730      	adds	r7, #48	; 0x30
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20001120 	.word	0x20001120

0800aee0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aee6:	e048      	b.n	800af7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aee8:	4b2d      	ldr	r3, [pc, #180]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef2:	4b2b      	ldr	r3, [pc, #172]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3304      	adds	r3, #4
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe f86b 	bl	8008fdc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af14:	f003 0304 	and.w	r3, r3, #4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d02e      	beq.n	800af7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	4413      	add	r3, r2
 800af24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d90e      	bls.n	800af4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af3a:	4b19      	ldr	r3, [pc, #100]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3304      	adds	r3, #4
 800af42:	4619      	mov	r1, r3
 800af44:	4610      	mov	r0, r2
 800af46:	f7fe f810 	bl	8008f6a <vListInsert>
 800af4a:	e016      	b.n	800af7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af4c:	2300      	movs	r3, #0
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	2300      	movs	r3, #0
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	2100      	movs	r1, #0
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7ff fd60 	bl	800aa1c <xTimerGenericCommand>
 800af5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10a      	bne.n	800af7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	603b      	str	r3, [r7, #0]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af7a:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1b1      	bne.n	800aee8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af84:	4b06      	ldr	r3, [pc, #24]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af8a:	4b06      	ldr	r3, [pc, #24]	; (800afa4 <prvSwitchTimerLists+0xc4>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a04      	ldr	r2, [pc, #16]	; (800afa0 <prvSwitchTimerLists+0xc0>)
 800af90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af92:	4a04      	ldr	r2, [pc, #16]	; (800afa4 <prvSwitchTimerLists+0xc4>)
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	6013      	str	r3, [r2, #0]
}
 800af98:	bf00      	nop
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	20001118 	.word	0x20001118
 800afa4:	2000111c 	.word	0x2000111c

0800afa8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800afae:	f000 f9b1 	bl	800b314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800afb2:	4b15      	ldr	r3, [pc, #84]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d120      	bne.n	800affc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800afba:	4814      	ldr	r0, [pc, #80]	; (800b00c <prvCheckForValidListAndQueue+0x64>)
 800afbc:	f7fd ff84 	bl	8008ec8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800afc0:	4813      	ldr	r0, [pc, #76]	; (800b010 <prvCheckForValidListAndQueue+0x68>)
 800afc2:	f7fd ff81 	bl	8008ec8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800afc6:	4b13      	ldr	r3, [pc, #76]	; (800b014 <prvCheckForValidListAndQueue+0x6c>)
 800afc8:	4a10      	ldr	r2, [pc, #64]	; (800b00c <prvCheckForValidListAndQueue+0x64>)
 800afca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800afcc:	4b12      	ldr	r3, [pc, #72]	; (800b018 <prvCheckForValidListAndQueue+0x70>)
 800afce:	4a10      	ldr	r2, [pc, #64]	; (800b010 <prvCheckForValidListAndQueue+0x68>)
 800afd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800afd2:	2300      	movs	r3, #0
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	4b11      	ldr	r3, [pc, #68]	; (800b01c <prvCheckForValidListAndQueue+0x74>)
 800afd8:	4a11      	ldr	r2, [pc, #68]	; (800b020 <prvCheckForValidListAndQueue+0x78>)
 800afda:	2110      	movs	r1, #16
 800afdc:	200a      	movs	r0, #10
 800afde:	f7fe f88f 	bl	8009100 <xQueueGenericCreateStatic>
 800afe2:	4603      	mov	r3, r0
 800afe4:	4a08      	ldr	r2, [pc, #32]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800afe6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800afe8:	4b07      	ldr	r3, [pc, #28]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d005      	beq.n	800affc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aff0:	4b05      	ldr	r3, [pc, #20]	; (800b008 <prvCheckForValidListAndQueue+0x60>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	490b      	ldr	r1, [pc, #44]	; (800b024 <prvCheckForValidListAndQueue+0x7c>)
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fca8 	bl	800994c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800affc:	f000 f9ba 	bl	800b374 <vPortExitCritical>
}
 800b000:	bf00      	nop
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20001120 	.word	0x20001120
 800b00c:	200010f0 	.word	0x200010f0
 800b010:	20001104 	.word	0x20001104
 800b014:	20001118 	.word	0x20001118
 800b018:	2000111c 	.word	0x2000111c
 800b01c:	200011cc 	.word	0x200011cc
 800b020:	2000112c 	.word	0x2000112c
 800b024:	0800c96c 	.word	0x0800c96c

0800b028 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b086      	sub	sp, #24
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10a      	bne.n	800b050 <xTimerIsTimerActive+0x28>
	__asm volatile
 800b03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	60fb      	str	r3, [r7, #12]
}
 800b04c:	bf00      	nop
 800b04e:	e7fe      	b.n	800b04e <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800b050:	f000 f960 	bl	800b314 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d102      	bne.n	800b068 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800b062:	2300      	movs	r3, #0
 800b064:	617b      	str	r3, [r7, #20]
 800b066:	e001      	b.n	800b06c <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800b068:	2301      	movs	r3, #1
 800b06a:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800b06c:	f000 f982 	bl	800b374 <vPortExitCritical>

	return xReturn;
 800b070:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b086      	sub	sp, #24
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10a      	bne.n	800b0a2 <pvTimerGetTimerID+0x28>
	__asm volatile
 800b08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b090:	f383 8811 	msr	BASEPRI, r3
 800b094:	f3bf 8f6f 	isb	sy
 800b098:	f3bf 8f4f 	dsb	sy
 800b09c:	60fb      	str	r3, [r7, #12]
}
 800b09e:	bf00      	nop
 800b0a0:	e7fe      	b.n	800b0a0 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b0a2:	f000 f937 	bl	800b314 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b0ac:	f000 f962 	bl	800b374 <vPortExitCritical>

	return pvReturn;
 800b0b0:	693b      	ldr	r3, [r7, #16]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
	...

0800b0bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3b04      	subs	r3, #4
 800b0cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	f023 0201 	bic.w	r2, r3, #1
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3b04      	subs	r3, #4
 800b0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0ec:	4a0c      	ldr	r2, [pc, #48]	; (800b120 <pxPortInitialiseStack+0x64>)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3b14      	subs	r3, #20
 800b0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3b04      	subs	r3, #4
 800b102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f06f 0202 	mvn.w	r2, #2
 800b10a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3b20      	subs	r3, #32
 800b110:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b112:	68fb      	ldr	r3, [r7, #12]
}
 800b114:	4618      	mov	r0, r3
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	0800b125 	.word	0x0800b125

0800b124 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b12e:	4b12      	ldr	r3, [pc, #72]	; (800b178 <prvTaskExitError+0x54>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b136:	d00a      	beq.n	800b14e <prvTaskExitError+0x2a>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	60fb      	str	r3, [r7, #12]
}
 800b14a:	bf00      	nop
 800b14c:	e7fe      	b.n	800b14c <prvTaskExitError+0x28>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	60bb      	str	r3, [r7, #8]
}
 800b160:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b162:	bf00      	nop
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0fc      	beq.n	800b164 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b16a:	bf00      	nop
 800b16c:	bf00      	nop
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	200001a4 	.word	0x200001a4
 800b17c:	00000000 	.word	0x00000000

0800b180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b180:	4b07      	ldr	r3, [pc, #28]	; (800b1a0 <pxCurrentTCBConst2>)
 800b182:	6819      	ldr	r1, [r3, #0]
 800b184:	6808      	ldr	r0, [r1, #0]
 800b186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18a:	f380 8809 	msr	PSP, r0
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f04f 0000 	mov.w	r0, #0
 800b196:	f380 8811 	msr	BASEPRI, r0
 800b19a:	4770      	bx	lr
 800b19c:	f3af 8000 	nop.w

0800b1a0 <pxCurrentTCBConst2>:
 800b1a0:	20000bf0 	.word	0x20000bf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop

0800b1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1a8:	4808      	ldr	r0, [pc, #32]	; (800b1cc <prvPortStartFirstTask+0x24>)
 800b1aa:	6800      	ldr	r0, [r0, #0]
 800b1ac:	6800      	ldr	r0, [r0, #0]
 800b1ae:	f380 8808 	msr	MSP, r0
 800b1b2:	f04f 0000 	mov.w	r0, #0
 800b1b6:	f380 8814 	msr	CONTROL, r0
 800b1ba:	b662      	cpsie	i
 800b1bc:	b661      	cpsie	f
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	df00      	svc	0
 800b1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1ca:	bf00      	nop
 800b1cc:	e000ed08 	.word	0xe000ed08

0800b1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1d6:	4b46      	ldr	r3, [pc, #280]	; (800b2f0 <xPortStartScheduler+0x120>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a46      	ldr	r2, [pc, #280]	; (800b2f4 <xPortStartScheduler+0x124>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d10a      	bne.n	800b1f6 <xPortStartScheduler+0x26>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	613b      	str	r3, [r7, #16]
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1f6:	4b3e      	ldr	r3, [pc, #248]	; (800b2f0 <xPortStartScheduler+0x120>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a3f      	ldr	r2, [pc, #252]	; (800b2f8 <xPortStartScheduler+0x128>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d10a      	bne.n	800b216 <xPortStartScheduler+0x46>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	60fb      	str	r3, [r7, #12]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b216:	4b39      	ldr	r3, [pc, #228]	; (800b2fc <xPortStartScheduler+0x12c>)
 800b218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	22ff      	movs	r2, #255	; 0xff
 800b226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b230:	78fb      	ldrb	r3, [r7, #3]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	4b31      	ldr	r3, [pc, #196]	; (800b300 <xPortStartScheduler+0x130>)
 800b23c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b23e:	4b31      	ldr	r3, [pc, #196]	; (800b304 <xPortStartScheduler+0x134>)
 800b240:	2207      	movs	r2, #7
 800b242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b244:	e009      	b.n	800b25a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b246:	4b2f      	ldr	r3, [pc, #188]	; (800b304 <xPortStartScheduler+0x134>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	4a2d      	ldr	r2, [pc, #180]	; (800b304 <xPortStartScheduler+0x134>)
 800b24e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b250:	78fb      	ldrb	r3, [r7, #3]
 800b252:	b2db      	uxtb	r3, r3
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	b2db      	uxtb	r3, r3
 800b258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b25a:	78fb      	ldrb	r3, [r7, #3]
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b262:	2b80      	cmp	r3, #128	; 0x80
 800b264:	d0ef      	beq.n	800b246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b266:	4b27      	ldr	r3, [pc, #156]	; (800b304 <xPortStartScheduler+0x134>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f1c3 0307 	rsb	r3, r3, #7
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d00a      	beq.n	800b288 <xPortStartScheduler+0xb8>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	60bb      	str	r3, [r7, #8]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b288:	4b1e      	ldr	r3, [pc, #120]	; (800b304 <xPortStartScheduler+0x134>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	4a1d      	ldr	r2, [pc, #116]	; (800b304 <xPortStartScheduler+0x134>)
 800b290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b292:	4b1c      	ldr	r3, [pc, #112]	; (800b304 <xPortStartScheduler+0x134>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b29a:	4a1a      	ldr	r2, [pc, #104]	; (800b304 <xPortStartScheduler+0x134>)
 800b29c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2a6:	4b18      	ldr	r3, [pc, #96]	; (800b308 <xPortStartScheduler+0x138>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4a17      	ldr	r2, [pc, #92]	; (800b308 <xPortStartScheduler+0x138>)
 800b2ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <xPortStartScheduler+0x138>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a14      	ldr	r2, [pc, #80]	; (800b308 <xPortStartScheduler+0x138>)
 800b2b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2be:	f000 f8dd 	bl	800b47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2c2:	4b12      	ldr	r3, [pc, #72]	; (800b30c <xPortStartScheduler+0x13c>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2c8:	f000 f8fc 	bl	800b4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2cc:	4b10      	ldr	r3, [pc, #64]	; (800b310 <xPortStartScheduler+0x140>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0f      	ldr	r2, [pc, #60]	; (800b310 <xPortStartScheduler+0x140>)
 800b2d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2d8:	f7ff ff66 	bl	800b1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2dc:	f7fe ff66 	bl	800a1ac <vTaskSwitchContext>
	prvTaskExitError();
 800b2e0:	f7ff ff20 	bl	800b124 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3718      	adds	r7, #24
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	e000ed00 	.word	0xe000ed00
 800b2f4:	410fc271 	.word	0x410fc271
 800b2f8:	410fc270 	.word	0x410fc270
 800b2fc:	e000e400 	.word	0xe000e400
 800b300:	2000121c 	.word	0x2000121c
 800b304:	20001220 	.word	0x20001220
 800b308:	e000ed20 	.word	0xe000ed20
 800b30c:	200001a4 	.word	0x200001a4
 800b310:	e000ef34 	.word	0xe000ef34

0800b314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b314:	b480      	push	{r7}
 800b316:	b083      	sub	sp, #12
 800b318:	af00      	add	r7, sp, #0
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	607b      	str	r3, [r7, #4]
}
 800b32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b32e:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <vPortEnterCritical+0x58>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	4a0d      	ldr	r2, [pc, #52]	; (800b36c <vPortEnterCritical+0x58>)
 800b336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b338:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <vPortEnterCritical+0x58>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d10f      	bne.n	800b360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <vPortEnterCritical+0x5c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00a      	beq.n	800b360 <vPortEnterCritical+0x4c>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	603b      	str	r3, [r7, #0]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <vPortEnterCritical+0x4a>
	}
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	200001a4 	.word	0x200001a4
 800b370:	e000ed04 	.word	0xe000ed04

0800b374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b37a:	4b12      	ldr	r3, [pc, #72]	; (800b3c4 <vPortExitCritical+0x50>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10a      	bne.n	800b398 <vPortExitCritical+0x24>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	607b      	str	r3, [r7, #4]
}
 800b394:	bf00      	nop
 800b396:	e7fe      	b.n	800b396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b398:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <vPortExitCritical+0x50>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	4a09      	ldr	r2, [pc, #36]	; (800b3c4 <vPortExitCritical+0x50>)
 800b3a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <vPortExitCritical+0x50>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d105      	bne.n	800b3b6 <vPortExitCritical+0x42>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	f383 8811 	msr	BASEPRI, r3
}
 800b3b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	200001a4 	.word	0x200001a4
	...

0800b3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3d0:	f3ef 8009 	mrs	r0, PSP
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	4b15      	ldr	r3, [pc, #84]	; (800b430 <pxCurrentTCBConst>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	f01e 0f10 	tst.w	lr, #16
 800b3e0:	bf08      	it	eq
 800b3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	6010      	str	r0, [r2, #0]
 800b3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3f4:	f380 8811 	msr	BASEPRI, r0
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f7fe fed4 	bl	800a1ac <vTaskSwitchContext>
 800b404:	f04f 0000 	mov.w	r0, #0
 800b408:	f380 8811 	msr	BASEPRI, r0
 800b40c:	bc09      	pop	{r0, r3}
 800b40e:	6819      	ldr	r1, [r3, #0]
 800b410:	6808      	ldr	r0, [r1, #0]
 800b412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b416:	f01e 0f10 	tst.w	lr, #16
 800b41a:	bf08      	it	eq
 800b41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b420:	f380 8809 	msr	PSP, r0
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	f3af 8000 	nop.w

0800b430 <pxCurrentTCBConst>:
 800b430:	20000bf0 	.word	0x20000bf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop

0800b438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b452:	f7fe fdf1 	bl	800a038 <xTaskIncrementTick>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b45c:	4b06      	ldr	r3, [pc, #24]	; (800b478 <xPortSysTickHandler+0x40>)
 800b45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	2300      	movs	r3, #0
 800b466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	f383 8811 	msr	BASEPRI, r3
}
 800b46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b480:	4b0b      	ldr	r3, [pc, #44]	; (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b482:	2200      	movs	r2, #0
 800b484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b486:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <vPortSetupTimerInterrupt+0x38>)
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <vPortSetupTimerInterrupt+0x3c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a0a      	ldr	r2, [pc, #40]	; (800b4bc <vPortSetupTimerInterrupt+0x40>)
 800b492:	fba2 2303 	umull	r2, r3, r2, r3
 800b496:	099b      	lsrs	r3, r3, #6
 800b498:	4a09      	ldr	r2, [pc, #36]	; (800b4c0 <vPortSetupTimerInterrupt+0x44>)
 800b49a:	3b01      	subs	r3, #1
 800b49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b49e:	4b04      	ldr	r3, [pc, #16]	; (800b4b0 <vPortSetupTimerInterrupt+0x34>)
 800b4a0:	2207      	movs	r2, #7
 800b4a2:	601a      	str	r2, [r3, #0]
}
 800b4a4:	bf00      	nop
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	e000e010 	.word	0xe000e010
 800b4b4:	e000e018 	.word	0xe000e018
 800b4b8:	2000011c 	.word	0x2000011c
 800b4bc:	10624dd3 	.word	0x10624dd3
 800b4c0:	e000e014 	.word	0xe000e014

0800b4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4d4 <vPortEnableVFP+0x10>
 800b4c8:	6801      	ldr	r1, [r0, #0]
 800b4ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4ce:	6001      	str	r1, [r0, #0]
 800b4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4d2:	bf00      	nop
 800b4d4:	e000ed88 	.word	0xe000ed88

0800b4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4de:	f3ef 8305 	mrs	r3, IPSR
 800b4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b0f      	cmp	r3, #15
 800b4e8:	d914      	bls.n	800b514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4ea:	4a17      	ldr	r2, [pc, #92]	; (800b548 <vPortValidateInterruptPriority+0x70>)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	781b      	ldrb	r3, [r3, #0]
 800b4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4f4:	4b15      	ldr	r3, [pc, #84]	; (800b54c <vPortValidateInterruptPriority+0x74>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	7afa      	ldrb	r2, [r7, #11]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d20a      	bcs.n	800b514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	607b      	str	r3, [r7, #4]
}
 800b510:	bf00      	nop
 800b512:	e7fe      	b.n	800b512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b514:	4b0e      	ldr	r3, [pc, #56]	; (800b550 <vPortValidateInterruptPriority+0x78>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b51c:	4b0d      	ldr	r3, [pc, #52]	; (800b554 <vPortValidateInterruptPriority+0x7c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	429a      	cmp	r2, r3
 800b522:	d90a      	bls.n	800b53a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	603b      	str	r3, [r7, #0]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <vPortValidateInterruptPriority+0x60>
	}
 800b53a:	bf00      	nop
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	e000e3f0 	.word	0xe000e3f0
 800b54c:	2000121c 	.word	0x2000121c
 800b550:	e000ed0c 	.word	0xe000ed0c
 800b554:	20001220 	.word	0x20001220

0800b558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	; 0x28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b560:	2300      	movs	r3, #0
 800b562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b564:	f7fe fcac 	bl	8009ec0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b568:	4b5b      	ldr	r3, [pc, #364]	; (800b6d8 <pvPortMalloc+0x180>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b570:	f000 f920 	bl	800b7b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b574:	4b59      	ldr	r3, [pc, #356]	; (800b6dc <pvPortMalloc+0x184>)
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4013      	ands	r3, r2
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f040 8093 	bne.w	800b6a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01d      	beq.n	800b5c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b588:	2208      	movs	r2, #8
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4413      	add	r3, r2
 800b58e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f003 0307 	and.w	r3, r3, #7
 800b596:	2b00      	cmp	r3, #0
 800b598:	d014      	beq.n	800b5c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f023 0307 	bic.w	r3, r3, #7
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <pvPortMalloc+0x6c>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	617b      	str	r3, [r7, #20]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d06e      	beq.n	800b6a8 <pvPortMalloc+0x150>
 800b5ca:	4b45      	ldr	r3, [pc, #276]	; (800b6e0 <pvPortMalloc+0x188>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d869      	bhi.n	800b6a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5d4:	4b43      	ldr	r3, [pc, #268]	; (800b6e4 <pvPortMalloc+0x18c>)
 800b5d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5d8:	4b42      	ldr	r3, [pc, #264]	; (800b6e4 <pvPortMalloc+0x18c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5de:	e004      	b.n	800b5ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d903      	bls.n	800b5fc <pvPortMalloc+0xa4>
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1f1      	bne.n	800b5e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5fc:	4b36      	ldr	r3, [pc, #216]	; (800b6d8 <pvPortMalloc+0x180>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b602:	429a      	cmp	r2, r3
 800b604:	d050      	beq.n	800b6a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2208      	movs	r2, #8
 800b60c:	4413      	add	r3, r2
 800b60e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	1ad2      	subs	r2, r2, r3
 800b620:	2308      	movs	r3, #8
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	429a      	cmp	r2, r3
 800b626:	d91f      	bls.n	800b668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4413      	add	r3, r2
 800b62e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	f003 0307 	and.w	r3, r3, #7
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <pvPortMalloc+0xf8>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	613b      	str	r3, [r7, #16]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	1ad2      	subs	r2, r2, r3
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b662:	69b8      	ldr	r0, [r7, #24]
 800b664:	f000 f908 	bl	800b878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b668:	4b1d      	ldr	r3, [pc, #116]	; (800b6e0 <pvPortMalloc+0x188>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	4a1b      	ldr	r2, [pc, #108]	; (800b6e0 <pvPortMalloc+0x188>)
 800b674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b676:	4b1a      	ldr	r3, [pc, #104]	; (800b6e0 <pvPortMalloc+0x188>)
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <pvPortMalloc+0x190>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d203      	bcs.n	800b68a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b682:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <pvPortMalloc+0x188>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a18      	ldr	r2, [pc, #96]	; (800b6e8 <pvPortMalloc+0x190>)
 800b688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <pvPortMalloc+0x184>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	431a      	orrs	r2, r3
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b69e:	4b13      	ldr	r3, [pc, #76]	; (800b6ec <pvPortMalloc+0x194>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	4a11      	ldr	r2, [pc, #68]	; (800b6ec <pvPortMalloc+0x194>)
 800b6a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6a8:	f7fe fc18 	bl	8009edc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	f003 0307 	and.w	r3, r3, #7
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00a      	beq.n	800b6cc <pvPortMalloc+0x174>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	60fb      	str	r3, [r7, #12]
}
 800b6c8:	bf00      	nop
 800b6ca:	e7fe      	b.n	800b6ca <pvPortMalloc+0x172>
	return pvReturn;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3728      	adds	r7, #40	; 0x28
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20004e2c 	.word	0x20004e2c
 800b6dc:	20004e40 	.word	0x20004e40
 800b6e0:	20004e30 	.word	0x20004e30
 800b6e4:	20004e24 	.word	0x20004e24
 800b6e8:	20004e34 	.word	0x20004e34
 800b6ec:	20004e38 	.word	0x20004e38

0800b6f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d04d      	beq.n	800b79e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b702:	2308      	movs	r3, #8
 800b704:	425b      	negs	r3, r3
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	4413      	add	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	4b24      	ldr	r3, [pc, #144]	; (800b7a8 <vPortFree+0xb8>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4013      	ands	r3, r2
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <vPortFree+0x44>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	60fb      	str	r3, [r7, #12]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00a      	beq.n	800b752 <vPortFree+0x62>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	60bb      	str	r3, [r7, #8]
}
 800b74e:	bf00      	nop
 800b750:	e7fe      	b.n	800b750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	685a      	ldr	r2, [r3, #4]
 800b756:	4b14      	ldr	r3, [pc, #80]	; (800b7a8 <vPortFree+0xb8>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d01e      	beq.n	800b79e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d11a      	bne.n	800b79e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	4b0e      	ldr	r3, [pc, #56]	; (800b7a8 <vPortFree+0xb8>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	43db      	mvns	r3, r3
 800b772:	401a      	ands	r2, r3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b778:	f7fe fba2 	bl	8009ec0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <vPortFree+0xbc>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4413      	add	r3, r2
 800b786:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <vPortFree+0xbc>)
 800b788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b78a:	6938      	ldr	r0, [r7, #16]
 800b78c:	f000 f874 	bl	800b878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <vPortFree+0xc0>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3301      	adds	r3, #1
 800b796:	4a06      	ldr	r2, [pc, #24]	; (800b7b0 <vPortFree+0xc0>)
 800b798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b79a:	f7fe fb9f 	bl	8009edc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b79e:	bf00      	nop
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20004e40 	.word	0x20004e40
 800b7ac:	20004e30 	.word	0x20004e30
 800b7b0:	20004e3c 	.word	0x20004e3c

0800b7b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b7be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7c0:	4b27      	ldr	r3, [pc, #156]	; (800b860 <prvHeapInit+0xac>)
 800b7c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f003 0307 	and.w	r3, r3, #7
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00c      	beq.n	800b7e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3307      	adds	r3, #7
 800b7d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f023 0307 	bic.w	r3, r3, #7
 800b7da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	4a1f      	ldr	r2, [pc, #124]	; (800b860 <prvHeapInit+0xac>)
 800b7e4:	4413      	add	r3, r2
 800b7e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7ec:	4a1d      	ldr	r2, [pc, #116]	; (800b864 <prvHeapInit+0xb0>)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7f2:	4b1c      	ldr	r3, [pc, #112]	; (800b864 <prvHeapInit+0xb0>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b800:	2208      	movs	r2, #8
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	1a9b      	subs	r3, r3, r2
 800b806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f023 0307 	bic.w	r3, r3, #7
 800b80e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	4a15      	ldr	r2, [pc, #84]	; (800b868 <prvHeapInit+0xb4>)
 800b814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b816:	4b14      	ldr	r3, [pc, #80]	; (800b868 <prvHeapInit+0xb4>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2200      	movs	r2, #0
 800b81c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b81e:	4b12      	ldr	r3, [pc, #72]	; (800b868 <prvHeapInit+0xb4>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2200      	movs	r2, #0
 800b824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b834:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <prvHeapInit+0xb4>)
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	4a0a      	ldr	r2, [pc, #40]	; (800b86c <prvHeapInit+0xb8>)
 800b842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	4a09      	ldr	r2, [pc, #36]	; (800b870 <prvHeapInit+0xbc>)
 800b84a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b84c:	4b09      	ldr	r3, [pc, #36]	; (800b874 <prvHeapInit+0xc0>)
 800b84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b852:	601a      	str	r2, [r3, #0]
}
 800b854:	bf00      	nop
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr
 800b860:	20001224 	.word	0x20001224
 800b864:	20004e24 	.word	0x20004e24
 800b868:	20004e2c 	.word	0x20004e2c
 800b86c:	20004e34 	.word	0x20004e34
 800b870:	20004e30 	.word	0x20004e30
 800b874:	20004e40 	.word	0x20004e40

0800b878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b880:	4b28      	ldr	r3, [pc, #160]	; (800b924 <prvInsertBlockIntoFreeList+0xac>)
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	e002      	b.n	800b88c <prvInsertBlockIntoFreeList+0x14>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	429a      	cmp	r2, r3
 800b894:	d8f7      	bhi.n	800b886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d108      	bne.n	800b8ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	441a      	add	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	441a      	add	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d118      	bne.n	800b900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	4b15      	ldr	r3, [pc, #84]	; (800b928 <prvInsertBlockIntoFreeList+0xb0>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d00d      	beq.n	800b8f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685a      	ldr	r2, [r3, #4]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	441a      	add	r2, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	e008      	b.n	800b908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8f6:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <prvInsertBlockIntoFreeList+0xb0>)
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	e003      	b.n	800b908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d002      	beq.n	800b916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b916:	bf00      	nop
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	20004e24 	.word	0x20004e24
 800b928:	20004e2c 	.word	0x20004e2c

0800b92c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b930:	2200      	movs	r2, #0
 800b932:	4912      	ldr	r1, [pc, #72]	; (800b97c <MX_USB_DEVICE_Init+0x50>)
 800b934:	4812      	ldr	r0, [pc, #72]	; (800b980 <MX_USB_DEVICE_Init+0x54>)
 800b936:	f7fb fd6f 	bl	8007418 <USBD_Init>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b940:	f7f6 f804 	bl	800194c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800b944:	490f      	ldr	r1, [pc, #60]	; (800b984 <MX_USB_DEVICE_Init+0x58>)
 800b946:	480e      	ldr	r0, [pc, #56]	; (800b980 <MX_USB_DEVICE_Init+0x54>)
 800b948:	f7fb fd96 	bl	8007478 <USBD_RegisterClass>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b952:	f7f5 fffb 	bl	800194c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800b956:	490c      	ldr	r1, [pc, #48]	; (800b988 <MX_USB_DEVICE_Init+0x5c>)
 800b958:	4809      	ldr	r0, [pc, #36]	; (800b980 <MX_USB_DEVICE_Init+0x54>)
 800b95a:	f7fb fd43 	bl	80073e4 <USBD_CUSTOM_HID_RegisterInterface>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b964:	f7f5 fff2 	bl	800194c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b968:	4805      	ldr	r0, [pc, #20]	; (800b980 <MX_USB_DEVICE_Init+0x54>)
 800b96a:	f7fb fdbb 	bl	80074e4 <USBD_Start>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b974:	f7f5 ffea 	bl	800194c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b978:	bf00      	nop
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	20000220 	.word	0x20000220
 800b980:	20004e44 	.word	0x20004e44
 800b984:	20000128 	.word	0x20000128
 800b988:	20000210 	.word	0x20000210

0800b98c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800b98c:	b480      	push	{r7}
 800b98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b990:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b992:	4618      	mov	r0, r3
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800b9a0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	460a      	mov	r2, r1
 800b9b6:	71fb      	strb	r3, [r7, #7]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800b9bc:	4806      	ldr	r0, [pc, #24]	; (800b9d8 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800b9be:	f7fb fcaf 	bl	8007320 <USBD_CUSTOM_HID_ReceivePacket>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800b9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9cc:	e000      	b.n	800b9d0 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800b9ce:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	20004e44 	.word	0x20004e44

0800b9dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	6039      	str	r1, [r7, #0]
 800b9e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2212      	movs	r2, #18
 800b9ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b9ee:	4b03      	ldr	r3, [pc, #12]	; (800b9fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	2000023c 	.word	0x2000023c

0800ba00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	4603      	mov	r3, r0
 800ba08:	6039      	str	r1, [r7, #0]
 800ba0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2204      	movs	r2, #4
 800ba10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba12:	4b03      	ldr	r3, [pc, #12]	; (800ba20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	20000250 	.word	0x20000250

0800ba24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	6039      	str	r1, [r7, #0]
 800ba2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba30:	79fb      	ldrb	r3, [r7, #7]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d105      	bne.n	800ba42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	4907      	ldr	r1, [pc, #28]	; (800ba58 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba3a:	4808      	ldr	r0, [pc, #32]	; (800ba5c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba3c:	f7fc fefe 	bl	800883c <USBD_GetString>
 800ba40:	e004      	b.n	800ba4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	4904      	ldr	r1, [pc, #16]	; (800ba58 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba46:	4805      	ldr	r0, [pc, #20]	; (800ba5c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba48:	f7fc fef8 	bl	800883c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba4c:	4b02      	ldr	r3, [pc, #8]	; (800ba58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	20005120 	.word	0x20005120
 800ba5c:	0800c974 	.word	0x0800c974

0800ba60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4603      	mov	r3, r0
 800ba68:	6039      	str	r1, [r7, #0]
 800ba6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	4904      	ldr	r1, [pc, #16]	; (800ba80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba70:	4804      	ldr	r0, [pc, #16]	; (800ba84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba72:	f7fc fee3 	bl	800883c <USBD_GetString>
  return USBD_StrDesc;
 800ba76:	4b02      	ldr	r3, [pc, #8]	; (800ba80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	20005120 	.word	0x20005120
 800ba84:	0800c994 	.word	0x0800c994

0800ba88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	4603      	mov	r3, r0
 800ba90:	6039      	str	r1, [r7, #0]
 800ba92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	221a      	movs	r2, #26
 800ba98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba9a:	f000 f843 	bl	800bb24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba9e:	4b02      	ldr	r3, [pc, #8]	; (800baa8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	20000254 	.word	0x20000254

0800baac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	4603      	mov	r3, r0
 800bab4:	6039      	str	r1, [r7, #0]
 800bab6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bab8:	79fb      	ldrb	r3, [r7, #7]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d105      	bne.n	800baca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800babe:	683a      	ldr	r2, [r7, #0]
 800bac0:	4907      	ldr	r1, [pc, #28]	; (800bae0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bac2:	4808      	ldr	r0, [pc, #32]	; (800bae4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bac4:	f7fc feba 	bl	800883c <USBD_GetString>
 800bac8:	e004      	b.n	800bad4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	4904      	ldr	r1, [pc, #16]	; (800bae0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bace:	4805      	ldr	r0, [pc, #20]	; (800bae4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bad0:	f7fc feb4 	bl	800883c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bad4:	4b02      	ldr	r3, [pc, #8]	; (800bae0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	20005120 	.word	0x20005120
 800bae4:	0800c9a8 	.word	0x0800c9a8

0800bae8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	6039      	str	r1, [r7, #0]
 800baf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d105      	bne.n	800bb06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	4907      	ldr	r1, [pc, #28]	; (800bb1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bafe:	4808      	ldr	r0, [pc, #32]	; (800bb20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb00:	f7fc fe9c 	bl	800883c <USBD_GetString>
 800bb04:	e004      	b.n	800bb10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	4904      	ldr	r1, [pc, #16]	; (800bb1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb0a:	4805      	ldr	r0, [pc, #20]	; (800bb20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb0c:	f7fc fe96 	bl	800883c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb10:	4b02      	ldr	r3, [pc, #8]	; (800bb1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	20005120 	.word	0x20005120
 800bb20:	0800c9bc 	.word	0x0800c9bc

0800bb24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb2a:	4b0f      	ldr	r3, [pc, #60]	; (800bb68 <Get_SerialNum+0x44>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb30:	4b0e      	ldr	r3, [pc, #56]	; (800bb6c <Get_SerialNum+0x48>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb36:	4b0e      	ldr	r3, [pc, #56]	; (800bb70 <Get_SerialNum+0x4c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4413      	add	r3, r2
 800bb42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d009      	beq.n	800bb5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb4a:	2208      	movs	r2, #8
 800bb4c:	4909      	ldr	r1, [pc, #36]	; (800bb74 <Get_SerialNum+0x50>)
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 f814 	bl	800bb7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb54:	2204      	movs	r2, #4
 800bb56:	4908      	ldr	r1, [pc, #32]	; (800bb78 <Get_SerialNum+0x54>)
 800bb58:	68b8      	ldr	r0, [r7, #8]
 800bb5a:	f000 f80f 	bl	800bb7c <IntToUnicode>
  }
}
 800bb5e:	bf00      	nop
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	1fff7a10 	.word	0x1fff7a10
 800bb6c:	1fff7a14 	.word	0x1fff7a14
 800bb70:	1fff7a18 	.word	0x1fff7a18
 800bb74:	20000256 	.word	0x20000256
 800bb78:	20000266 	.word	0x20000266

0800bb7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	4613      	mov	r3, r2
 800bb88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb8e:	2300      	movs	r3, #0
 800bb90:	75fb      	strb	r3, [r7, #23]
 800bb92:	e027      	b.n	800bbe4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	0f1b      	lsrs	r3, r3, #28
 800bb98:	2b09      	cmp	r3, #9
 800bb9a:	d80b      	bhi.n	800bbb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	0f1b      	lsrs	r3, r3, #28
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	4619      	mov	r1, r3
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	440b      	add	r3, r1
 800bbac:	3230      	adds	r2, #48	; 0x30
 800bbae:	b2d2      	uxtb	r2, r2
 800bbb0:	701a      	strb	r2, [r3, #0]
 800bbb2:	e00a      	b.n	800bbca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	0f1b      	lsrs	r3, r3, #28
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	440b      	add	r3, r1
 800bbc4:	3237      	adds	r2, #55	; 0x37
 800bbc6:	b2d2      	uxtb	r2, r2
 800bbc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	011b      	lsls	r3, r3, #4
 800bbce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	4413      	add	r3, r2
 800bbda:	2200      	movs	r2, #0
 800bbdc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	75fb      	strb	r3, [r7, #23]
 800bbe4:	7dfa      	ldrb	r2, [r7, #23]
 800bbe6:	79fb      	ldrb	r3, [r7, #7]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d3d3      	bcc.n	800bb94 <IntToUnicode+0x18>
  }
}
 800bbec:	bf00      	nop
 800bbee:	bf00      	nop
 800bbf0:	371c      	adds	r7, #28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
	...

0800bbfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08a      	sub	sp, #40	; 0x28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc04:	f107 0314 	add.w	r3, r7, #20
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	605a      	str	r2, [r3, #4]
 800bc0e:	609a      	str	r2, [r3, #8]
 800bc10:	60da      	str	r2, [r3, #12]
 800bc12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc1c:	d13a      	bne.n	800bc94 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc1e:	2300      	movs	r3, #0
 800bc20:	613b      	str	r3, [r7, #16]
 800bc22:	4b1e      	ldr	r3, [pc, #120]	; (800bc9c <HAL_PCD_MspInit+0xa0>)
 800bc24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc26:	4a1d      	ldr	r2, [pc, #116]	; (800bc9c <HAL_PCD_MspInit+0xa0>)
 800bc28:	f043 0301 	orr.w	r3, r3, #1
 800bc2c:	6313      	str	r3, [r2, #48]	; 0x30
 800bc2e:	4b1b      	ldr	r3, [pc, #108]	; (800bc9c <HAL_PCD_MspInit+0xa0>)
 800bc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc32:	f003 0301 	and.w	r3, r3, #1
 800bc36:	613b      	str	r3, [r7, #16]
 800bc38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc40:	2302      	movs	r3, #2
 800bc42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc48:	2303      	movs	r3, #3
 800bc4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc4c:	230a      	movs	r3, #10
 800bc4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc50:	f107 0314 	add.w	r3, r7, #20
 800bc54:	4619      	mov	r1, r3
 800bc56:	4812      	ldr	r0, [pc, #72]	; (800bca0 <HAL_PCD_MspInit+0xa4>)
 800bc58:	f7f7 f8b2 	bl	8002dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc5c:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <HAL_PCD_MspInit+0xa0>)
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc60:	4a0e      	ldr	r2, [pc, #56]	; (800bc9c <HAL_PCD_MspInit+0xa0>)
 800bc62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc66:	6353      	str	r3, [r2, #52]	; 0x34
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	4b0b      	ldr	r3, [pc, #44]	; (800bc9c <HAL_PCD_MspInit+0xa0>)
 800bc6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc70:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <HAL_PCD_MspInit+0xa0>)
 800bc72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc76:	6453      	str	r3, [r2, #68]	; 0x44
 800bc78:	4b08      	ldr	r3, [pc, #32]	; (800bc9c <HAL_PCD_MspInit+0xa0>)
 800bc7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc80:	60fb      	str	r3, [r7, #12]
 800bc82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bc84:	2200      	movs	r2, #0
 800bc86:	2105      	movs	r1, #5
 800bc88:	2043      	movs	r0, #67	; 0x43
 800bc8a:	f7f6 fcff 	bl	800268c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc8e:	2043      	movs	r0, #67	; 0x43
 800bc90:	f7f6 fd18 	bl	80026c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc94:	bf00      	nop
 800bc96:	3728      	adds	r7, #40	; 0x28
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	40023800 	.word	0x40023800
 800bca0:	40020000 	.word	0x40020000

0800bca4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4610      	mov	r0, r2
 800bcbc:	f7fb fc5f 	bl	800757e <USBD_LL_SetupStage>
}
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bcda:	78fa      	ldrb	r2, [r7, #3]
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	4613      	mov	r3, r2
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	4413      	add	r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	440b      	add	r3, r1
 800bce8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	78fb      	ldrb	r3, [r7, #3]
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	f7fb fc99 	bl	8007628 <USBD_LL_DataOutStage>
}
 800bcf6:	bf00      	nop
 800bcf8:	3708      	adds	r7, #8
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b082      	sub	sp, #8
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	460b      	mov	r3, r1
 800bd08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bd10:	78fa      	ldrb	r2, [r7, #3]
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	4613      	mov	r3, r2
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	4413      	add	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	440b      	add	r3, r1
 800bd1e:	334c      	adds	r3, #76	; 0x4c
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	78fb      	ldrb	r3, [r7, #3]
 800bd24:	4619      	mov	r1, r3
 800bd26:	f7fb fd32 	bl	800778e <USBD_LL_DataInStage>
}
 800bd2a:	bf00      	nop
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b082      	sub	sp, #8
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fb fe66 	bl	8007a12 <USBD_LL_SOF>
}
 800bd46:	bf00      	nop
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b084      	sub	sp, #16
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd56:	2301      	movs	r3, #1
 800bd58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	d001      	beq.n	800bd66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bd62:	f7f5 fdf3 	bl	800194c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd6c:	7bfa      	ldrb	r2, [r7, #15]
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7fb fe10 	bl	8007996 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fb fdb8 	bl	80078f2 <USBD_LL_Reset>
}
 800bd82:	bf00      	nop
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fb fe0b 	bl	80079b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bdb2:	f043 0301 	orr.w	r3, r3, #1
 800bdb6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a1b      	ldr	r3, [r3, #32]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d005      	beq.n	800bdcc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdc0:	4b04      	ldr	r3, [pc, #16]	; (800bdd4 <HAL_PCD_SuspendCallback+0x48>)
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	4a03      	ldr	r2, [pc, #12]	; (800bdd4 <HAL_PCD_SuspendCallback+0x48>)
 800bdc6:	f043 0306 	orr.w	r3, r3, #6
 800bdca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bdcc:	bf00      	nop
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	e000ed00 	.word	0xe000ed00

0800bdd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fb fdfb 	bl	80079e2 <USBD_LL_Resume>
}
 800bdec:	bf00      	nop
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be06:	78fa      	ldrb	r2, [r7, #3]
 800be08:	4611      	mov	r1, r2
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fb fe53 	bl	8007ab6 <USBD_LL_IsoOUTIncomplete>
}
 800be10:	bf00      	nop
 800be12:	3708      	adds	r7, #8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	460b      	mov	r3, r1
 800be22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be2a:	78fa      	ldrb	r2, [r7, #3]
 800be2c:	4611      	mov	r1, r2
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fb fe0f 	bl	8007a52 <USBD_LL_IsoINIncomplete>
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fb fe65 	bl	8007b1a <USBD_LL_DevConnected>
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be66:	4618      	mov	r0, r3
 800be68:	f7fb fe62 	bl	8007b30 <USBD_LL_DevDisconnected>
}
 800be6c:	bf00      	nop
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d13c      	bne.n	800befe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be84:	4a20      	ldr	r2, [pc, #128]	; (800bf08 <USBD_LL_Init+0x94>)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a1e      	ldr	r2, [pc, #120]	; (800bf08 <USBD_LL_Init+0x94>)
 800be90:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be94:	4b1c      	ldr	r3, [pc, #112]	; (800bf08 <USBD_LL_Init+0x94>)
 800be96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800be9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800be9c:	4b1a      	ldr	r3, [pc, #104]	; (800bf08 <USBD_LL_Init+0x94>)
 800be9e:	2204      	movs	r2, #4
 800bea0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bea2:	4b19      	ldr	r3, [pc, #100]	; (800bf08 <USBD_LL_Init+0x94>)
 800bea4:	2202      	movs	r2, #2
 800bea6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bea8:	4b17      	ldr	r3, [pc, #92]	; (800bf08 <USBD_LL_Init+0x94>)
 800beaa:	2200      	movs	r2, #0
 800beac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800beae:	4b16      	ldr	r3, [pc, #88]	; (800bf08 <USBD_LL_Init+0x94>)
 800beb0:	2202      	movs	r2, #2
 800beb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800beb4:	4b14      	ldr	r3, [pc, #80]	; (800bf08 <USBD_LL_Init+0x94>)
 800beb6:	2200      	movs	r2, #0
 800beb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800beba:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <USBD_LL_Init+0x94>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bec0:	4b11      	ldr	r3, [pc, #68]	; (800bf08 <USBD_LL_Init+0x94>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bec6:	4b10      	ldr	r3, [pc, #64]	; (800bf08 <USBD_LL_Init+0x94>)
 800bec8:	2200      	movs	r2, #0
 800beca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800becc:	4b0e      	ldr	r3, [pc, #56]	; (800bf08 <USBD_LL_Init+0x94>)
 800bece:	2200      	movs	r2, #0
 800bed0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bed2:	480d      	ldr	r0, [pc, #52]	; (800bf08 <USBD_LL_Init+0x94>)
 800bed4:	f7f7 f92b 	bl	800312e <HAL_PCD_Init>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bede:	f7f5 fd35 	bl	800194c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bee2:	2180      	movs	r1, #128	; 0x80
 800bee4:	4808      	ldr	r0, [pc, #32]	; (800bf08 <USBD_LL_Init+0x94>)
 800bee6:	f7f8 fb6a 	bl	80045be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800beea:	2240      	movs	r2, #64	; 0x40
 800beec:	2100      	movs	r1, #0
 800beee:	4806      	ldr	r0, [pc, #24]	; (800bf08 <USBD_LL_Init+0x94>)
 800bef0:	f7f8 fb1e 	bl	8004530 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bef4:	2280      	movs	r2, #128	; 0x80
 800bef6:	2101      	movs	r1, #1
 800bef8:	4803      	ldr	r0, [pc, #12]	; (800bf08 <USBD_LL_Init+0x94>)
 800befa:	f7f8 fb19 	bl	8004530 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	20005320 	.word	0x20005320

0800bf0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf14:	2300      	movs	r3, #0
 800bf16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7f7 fa20 	bl	8003368 <HAL_PCD_Start>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 f930 	bl	800c194 <USBD_Get_USB_Status>
 800bf34:	4603      	mov	r3, r0
 800bf36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf38:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b084      	sub	sp, #16
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	4608      	mov	r0, r1
 800bf4c:	4611      	mov	r1, r2
 800bf4e:	461a      	mov	r2, r3
 800bf50:	4603      	mov	r3, r0
 800bf52:	70fb      	strb	r3, [r7, #3]
 800bf54:	460b      	mov	r3, r1
 800bf56:	70bb      	strb	r3, [r7, #2]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf6a:	78bb      	ldrb	r3, [r7, #2]
 800bf6c:	883a      	ldrh	r2, [r7, #0]
 800bf6e:	78f9      	ldrb	r1, [r7, #3]
 800bf70:	f7f7 fef1 	bl	8003d56 <HAL_PCD_EP_Open>
 800bf74:	4603      	mov	r3, r0
 800bf76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 f90a 	bl	800c194 <USBD_Get_USB_Status>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf84:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
 800bf96:	460b      	mov	r3, r1
 800bf98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfa8:	78fa      	ldrb	r2, [r7, #3]
 800bfaa:	4611      	mov	r1, r2
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7f7 ff3a 	bl	8003e26 <HAL_PCD_EP_Close>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f000 f8eb 	bl	800c194 <USBD_Get_USB_Status>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfe6:	78fa      	ldrb	r2, [r7, #3]
 800bfe8:	4611      	mov	r1, r2
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f7 fffa 	bl	8003fe4 <HAL_PCD_EP_SetStall>
 800bff0:	4603      	mov	r3, r0
 800bff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bff4:	7bfb      	ldrb	r3, [r7, #15]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 f8cc 	bl	800c194 <USBD_Get_USB_Status>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c000:	7bbb      	ldrb	r3, [r7, #14]
}
 800c002:	4618      	mov	r0, r3
 800c004:	3710      	adds	r7, #16
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
 800c012:	460b      	mov	r3, r1
 800c014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c024:	78fa      	ldrb	r2, [r7, #3]
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f7f8 f83f 	bl	80040ac <HAL_PCD_EP_ClrStall>
 800c02e:	4603      	mov	r3, r0
 800c030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	4618      	mov	r0, r3
 800c036:	f000 f8ad 	bl	800c194 <USBD_Get_USB_Status>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c05a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c05c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c060:	2b00      	cmp	r3, #0
 800c062:	da0b      	bge.n	800c07c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c064:	78fb      	ldrb	r3, [r7, #3]
 800c066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c06a:	68f9      	ldr	r1, [r7, #12]
 800c06c:	4613      	mov	r3, r2
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	440b      	add	r3, r1
 800c076:	333e      	adds	r3, #62	; 0x3e
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	e00b      	b.n	800c094 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c07c:	78fb      	ldrb	r3, [r7, #3]
 800c07e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c082:	68f9      	ldr	r1, [r7, #12]
 800c084:	4613      	mov	r3, r2
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	4413      	add	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	440b      	add	r3, r1
 800c08e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c092:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c094:	4618      	mov	r0, r3
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0ba:	78fa      	ldrb	r2, [r7, #3]
 800c0bc:	4611      	mov	r1, r2
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7f7 fe24 	bl	8003d0c <HAL_PCD_SetAddress>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f000 f862 	bl	800c194 <USBD_Get_USB_Status>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b086      	sub	sp, #24
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	60f8      	str	r0, [r7, #12]
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	603b      	str	r3, [r7, #0]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c0fc:	7af9      	ldrb	r1, [r7, #11]
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	f7f7 ff25 	bl	8003f50 <HAL_PCD_EP_Transmit>
 800c106:	4603      	mov	r3, r0
 800c108:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c10a:	7dfb      	ldrb	r3, [r7, #23]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f000 f841 	bl	800c194 <USBD_Get_USB_Status>
 800c112:	4603      	mov	r3, r0
 800c114:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c116:	7dbb      	ldrb	r3, [r7, #22]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3718      	adds	r7, #24
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	607a      	str	r2, [r7, #4]
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	460b      	mov	r3, r1
 800c12e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c13e:	7af9      	ldrb	r1, [r7, #11]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	f7f7 feb9 	bl	8003eba <HAL_PCD_EP_Receive>
 800c148:	4603      	mov	r3, r0
 800c14a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c14c:	7dfb      	ldrb	r3, [r7, #23]
 800c14e:	4618      	mov	r0, r3
 800c150:	f000 f820 	bl	800c194 <USBD_Get_USB_Status>
 800c154:	4603      	mov	r3, r0
 800c156:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c158:	7dbb      	ldrb	r3, [r7, #22]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
	...

0800c164 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800c16c:	4b03      	ldr	r3, [pc, #12]	; (800c17c <USBD_static_malloc+0x18>)
}
 800c16e:	4618      	mov	r0, r3
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	2000582c 	.word	0x2000582c

0800c180 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]

}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	4603      	mov	r3, r0
 800c19c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1a2:	79fb      	ldrb	r3, [r7, #7]
 800c1a4:	2b03      	cmp	r3, #3
 800c1a6:	d817      	bhi.n	800c1d8 <USBD_Get_USB_Status+0x44>
 800c1a8:	a201      	add	r2, pc, #4	; (adr r2, 800c1b0 <USBD_Get_USB_Status+0x1c>)
 800c1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ae:	bf00      	nop
 800c1b0:	0800c1c1 	.word	0x0800c1c1
 800c1b4:	0800c1c7 	.word	0x0800c1c7
 800c1b8:	0800c1cd 	.word	0x0800c1cd
 800c1bc:	0800c1d3 	.word	0x0800c1d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1c4:	e00b      	b.n	800c1de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ca:	e008      	b.n	800c1de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d0:	e005      	b.n	800c1de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1d2:	2303      	movs	r3, #3
 800c1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d6:	e002      	b.n	800c1de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	73fb      	strb	r3, [r7, #15]
    break;
 800c1dc:	bf00      	nop
  }
  return usb_status;
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3714      	adds	r7, #20
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <__errno>:
 800c1ec:	4b01      	ldr	r3, [pc, #4]	; (800c1f4 <__errno+0x8>)
 800c1ee:	6818      	ldr	r0, [r3, #0]
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	20000270 	.word	0x20000270

0800c1f8 <__libc_init_array>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	4d0d      	ldr	r5, [pc, #52]	; (800c230 <__libc_init_array+0x38>)
 800c1fc:	4c0d      	ldr	r4, [pc, #52]	; (800c234 <__libc_init_array+0x3c>)
 800c1fe:	1b64      	subs	r4, r4, r5
 800c200:	10a4      	asrs	r4, r4, #2
 800c202:	2600      	movs	r6, #0
 800c204:	42a6      	cmp	r6, r4
 800c206:	d109      	bne.n	800c21c <__libc_init_array+0x24>
 800c208:	4d0b      	ldr	r5, [pc, #44]	; (800c238 <__libc_init_array+0x40>)
 800c20a:	4c0c      	ldr	r4, [pc, #48]	; (800c23c <__libc_init_array+0x44>)
 800c20c:	f000 fb7c 	bl	800c908 <_init>
 800c210:	1b64      	subs	r4, r4, r5
 800c212:	10a4      	asrs	r4, r4, #2
 800c214:	2600      	movs	r6, #0
 800c216:	42a6      	cmp	r6, r4
 800c218:	d105      	bne.n	800c226 <__libc_init_array+0x2e>
 800c21a:	bd70      	pop	{r4, r5, r6, pc}
 800c21c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c220:	4798      	blx	r3
 800c222:	3601      	adds	r6, #1
 800c224:	e7ee      	b.n	800c204 <__libc_init_array+0xc>
 800c226:	f855 3b04 	ldr.w	r3, [r5], #4
 800c22a:	4798      	blx	r3
 800c22c:	3601      	adds	r6, #1
 800c22e:	e7f2      	b.n	800c216 <__libc_init_array+0x1e>
 800c230:	0800cb08 	.word	0x0800cb08
 800c234:	0800cb08 	.word	0x0800cb08
 800c238:	0800cb08 	.word	0x0800cb08
 800c23c:	0800cb0c 	.word	0x0800cb0c

0800c240 <__retarget_lock_acquire_recursive>:
 800c240:	4770      	bx	lr

0800c242 <__retarget_lock_release_recursive>:
 800c242:	4770      	bx	lr

0800c244 <memcpy>:
 800c244:	440a      	add	r2, r1
 800c246:	4291      	cmp	r1, r2
 800c248:	f100 33ff 	add.w	r3, r0, #4294967295
 800c24c:	d100      	bne.n	800c250 <memcpy+0xc>
 800c24e:	4770      	bx	lr
 800c250:	b510      	push	{r4, lr}
 800c252:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c25a:	4291      	cmp	r1, r2
 800c25c:	d1f9      	bne.n	800c252 <memcpy+0xe>
 800c25e:	bd10      	pop	{r4, pc}

0800c260 <memset>:
 800c260:	4402      	add	r2, r0
 800c262:	4603      	mov	r3, r0
 800c264:	4293      	cmp	r3, r2
 800c266:	d100      	bne.n	800c26a <memset+0xa>
 800c268:	4770      	bx	lr
 800c26a:	f803 1b01 	strb.w	r1, [r3], #1
 800c26e:	e7f9      	b.n	800c264 <memset+0x4>

0800c270 <cleanup_glue>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	460c      	mov	r4, r1
 800c274:	6809      	ldr	r1, [r1, #0]
 800c276:	4605      	mov	r5, r0
 800c278:	b109      	cbz	r1, 800c27e <cleanup_glue+0xe>
 800c27a:	f7ff fff9 	bl	800c270 <cleanup_glue>
 800c27e:	4621      	mov	r1, r4
 800c280:	4628      	mov	r0, r5
 800c282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c286:	f000 b869 	b.w	800c35c <_free_r>
	...

0800c28c <_reclaim_reent>:
 800c28c:	4b2c      	ldr	r3, [pc, #176]	; (800c340 <_reclaim_reent+0xb4>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4283      	cmp	r3, r0
 800c292:	b570      	push	{r4, r5, r6, lr}
 800c294:	4604      	mov	r4, r0
 800c296:	d051      	beq.n	800c33c <_reclaim_reent+0xb0>
 800c298:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c29a:	b143      	cbz	r3, 800c2ae <_reclaim_reent+0x22>
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d14a      	bne.n	800c338 <_reclaim_reent+0xac>
 800c2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a4:	6819      	ldr	r1, [r3, #0]
 800c2a6:	b111      	cbz	r1, 800c2ae <_reclaim_reent+0x22>
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f000 f857 	bl	800c35c <_free_r>
 800c2ae:	6961      	ldr	r1, [r4, #20]
 800c2b0:	b111      	cbz	r1, 800c2b8 <_reclaim_reent+0x2c>
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f000 f852 	bl	800c35c <_free_r>
 800c2b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c2ba:	b111      	cbz	r1, 800c2c2 <_reclaim_reent+0x36>
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 f84d 	bl	800c35c <_free_r>
 800c2c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c2c4:	b111      	cbz	r1, 800c2cc <_reclaim_reent+0x40>
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f000 f848 	bl	800c35c <_free_r>
 800c2cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c2ce:	b111      	cbz	r1, 800c2d6 <_reclaim_reent+0x4a>
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 f843 	bl	800c35c <_free_r>
 800c2d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c2d8:	b111      	cbz	r1, 800c2e0 <_reclaim_reent+0x54>
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f000 f83e 	bl	800c35c <_free_r>
 800c2e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c2e2:	b111      	cbz	r1, 800c2ea <_reclaim_reent+0x5e>
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f000 f839 	bl	800c35c <_free_r>
 800c2ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c2ec:	b111      	cbz	r1, 800c2f4 <_reclaim_reent+0x68>
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f000 f834 	bl	800c35c <_free_r>
 800c2f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2f6:	b111      	cbz	r1, 800c2fe <_reclaim_reent+0x72>
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f000 f82f 	bl	800c35c <_free_r>
 800c2fe:	69a3      	ldr	r3, [r4, #24]
 800c300:	b1e3      	cbz	r3, 800c33c <_reclaim_reent+0xb0>
 800c302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c304:	4620      	mov	r0, r4
 800c306:	4798      	blx	r3
 800c308:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c30a:	b1b9      	cbz	r1, 800c33c <_reclaim_reent+0xb0>
 800c30c:	4620      	mov	r0, r4
 800c30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c312:	f7ff bfad 	b.w	800c270 <cleanup_glue>
 800c316:	5949      	ldr	r1, [r1, r5]
 800c318:	b941      	cbnz	r1, 800c32c <_reclaim_reent+0xa0>
 800c31a:	3504      	adds	r5, #4
 800c31c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c31e:	2d80      	cmp	r5, #128	; 0x80
 800c320:	68d9      	ldr	r1, [r3, #12]
 800c322:	d1f8      	bne.n	800c316 <_reclaim_reent+0x8a>
 800c324:	4620      	mov	r0, r4
 800c326:	f000 f819 	bl	800c35c <_free_r>
 800c32a:	e7ba      	b.n	800c2a2 <_reclaim_reent+0x16>
 800c32c:	680e      	ldr	r6, [r1, #0]
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 f814 	bl	800c35c <_free_r>
 800c334:	4631      	mov	r1, r6
 800c336:	e7ef      	b.n	800c318 <_reclaim_reent+0x8c>
 800c338:	2500      	movs	r5, #0
 800c33a:	e7ef      	b.n	800c31c <_reclaim_reent+0x90>
 800c33c:	bd70      	pop	{r4, r5, r6, pc}
 800c33e:	bf00      	nop
 800c340:	20000270 	.word	0x20000270

0800c344 <__malloc_lock>:
 800c344:	4801      	ldr	r0, [pc, #4]	; (800c34c <__malloc_lock+0x8>)
 800c346:	f7ff bf7b 	b.w	800c240 <__retarget_lock_acquire_recursive>
 800c34a:	bf00      	nop
 800c34c:	20005848 	.word	0x20005848

0800c350 <__malloc_unlock>:
 800c350:	4801      	ldr	r0, [pc, #4]	; (800c358 <__malloc_unlock+0x8>)
 800c352:	f7ff bf76 	b.w	800c242 <__retarget_lock_release_recursive>
 800c356:	bf00      	nop
 800c358:	20005848 	.word	0x20005848

0800c35c <_free_r>:
 800c35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c35e:	2900      	cmp	r1, #0
 800c360:	d044      	beq.n	800c3ec <_free_r+0x90>
 800c362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c366:	9001      	str	r0, [sp, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f1a1 0404 	sub.w	r4, r1, #4
 800c36e:	bfb8      	it	lt
 800c370:	18e4      	addlt	r4, r4, r3
 800c372:	f7ff ffe7 	bl	800c344 <__malloc_lock>
 800c376:	4a1e      	ldr	r2, [pc, #120]	; (800c3f0 <_free_r+0x94>)
 800c378:	9801      	ldr	r0, [sp, #4]
 800c37a:	6813      	ldr	r3, [r2, #0]
 800c37c:	b933      	cbnz	r3, 800c38c <_free_r+0x30>
 800c37e:	6063      	str	r3, [r4, #4]
 800c380:	6014      	str	r4, [r2, #0]
 800c382:	b003      	add	sp, #12
 800c384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c388:	f7ff bfe2 	b.w	800c350 <__malloc_unlock>
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	d908      	bls.n	800c3a2 <_free_r+0x46>
 800c390:	6825      	ldr	r5, [r4, #0]
 800c392:	1961      	adds	r1, r4, r5
 800c394:	428b      	cmp	r3, r1
 800c396:	bf01      	itttt	eq
 800c398:	6819      	ldreq	r1, [r3, #0]
 800c39a:	685b      	ldreq	r3, [r3, #4]
 800c39c:	1949      	addeq	r1, r1, r5
 800c39e:	6021      	streq	r1, [r4, #0]
 800c3a0:	e7ed      	b.n	800c37e <_free_r+0x22>
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	b10b      	cbz	r3, 800c3ac <_free_r+0x50>
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	d9fa      	bls.n	800c3a2 <_free_r+0x46>
 800c3ac:	6811      	ldr	r1, [r2, #0]
 800c3ae:	1855      	adds	r5, r2, r1
 800c3b0:	42a5      	cmp	r5, r4
 800c3b2:	d10b      	bne.n	800c3cc <_free_r+0x70>
 800c3b4:	6824      	ldr	r4, [r4, #0]
 800c3b6:	4421      	add	r1, r4
 800c3b8:	1854      	adds	r4, r2, r1
 800c3ba:	42a3      	cmp	r3, r4
 800c3bc:	6011      	str	r1, [r2, #0]
 800c3be:	d1e0      	bne.n	800c382 <_free_r+0x26>
 800c3c0:	681c      	ldr	r4, [r3, #0]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	6053      	str	r3, [r2, #4]
 800c3c6:	4421      	add	r1, r4
 800c3c8:	6011      	str	r1, [r2, #0]
 800c3ca:	e7da      	b.n	800c382 <_free_r+0x26>
 800c3cc:	d902      	bls.n	800c3d4 <_free_r+0x78>
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	6003      	str	r3, [r0, #0]
 800c3d2:	e7d6      	b.n	800c382 <_free_r+0x26>
 800c3d4:	6825      	ldr	r5, [r4, #0]
 800c3d6:	1961      	adds	r1, r4, r5
 800c3d8:	428b      	cmp	r3, r1
 800c3da:	bf04      	itt	eq
 800c3dc:	6819      	ldreq	r1, [r3, #0]
 800c3de:	685b      	ldreq	r3, [r3, #4]
 800c3e0:	6063      	str	r3, [r4, #4]
 800c3e2:	bf04      	itt	eq
 800c3e4:	1949      	addeq	r1, r1, r5
 800c3e6:	6021      	streq	r1, [r4, #0]
 800c3e8:	6054      	str	r4, [r2, #4]
 800c3ea:	e7ca      	b.n	800c382 <_free_r+0x26>
 800c3ec:	b003      	add	sp, #12
 800c3ee:	bd30      	pop	{r4, r5, pc}
 800c3f0:	2000584c 	.word	0x2000584c
 800c3f4:	00000000 	.word	0x00000000

0800c3f8 <atan>:
 800c3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fc:	ec55 4b10 	vmov	r4, r5, d0
 800c400:	4bc3      	ldr	r3, [pc, #780]	; (800c710 <atan+0x318>)
 800c402:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c406:	429e      	cmp	r6, r3
 800c408:	46ab      	mov	fp, r5
 800c40a:	dd18      	ble.n	800c43e <atan+0x46>
 800c40c:	4bc1      	ldr	r3, [pc, #772]	; (800c714 <atan+0x31c>)
 800c40e:	429e      	cmp	r6, r3
 800c410:	dc01      	bgt.n	800c416 <atan+0x1e>
 800c412:	d109      	bne.n	800c428 <atan+0x30>
 800c414:	b144      	cbz	r4, 800c428 <atan+0x30>
 800c416:	4622      	mov	r2, r4
 800c418:	462b      	mov	r3, r5
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f3 fee5 	bl	80001ec <__adddf3>
 800c422:	4604      	mov	r4, r0
 800c424:	460d      	mov	r5, r1
 800c426:	e006      	b.n	800c436 <atan+0x3e>
 800c428:	f1bb 0f00 	cmp.w	fp, #0
 800c42c:	f300 8131 	bgt.w	800c692 <atan+0x29a>
 800c430:	a59b      	add	r5, pc, #620	; (adr r5, 800c6a0 <atan+0x2a8>)
 800c432:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c436:	ec45 4b10 	vmov	d0, r4, r5
 800c43a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43e:	4bb6      	ldr	r3, [pc, #728]	; (800c718 <atan+0x320>)
 800c440:	429e      	cmp	r6, r3
 800c442:	dc14      	bgt.n	800c46e <atan+0x76>
 800c444:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c448:	429e      	cmp	r6, r3
 800c44a:	dc0d      	bgt.n	800c468 <atan+0x70>
 800c44c:	a396      	add	r3, pc, #600	; (adr r3, 800c6a8 <atan+0x2b0>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	ee10 0a10 	vmov	r0, s0
 800c456:	4629      	mov	r1, r5
 800c458:	f7f3 fec8 	bl	80001ec <__adddf3>
 800c45c:	4baf      	ldr	r3, [pc, #700]	; (800c71c <atan+0x324>)
 800c45e:	2200      	movs	r2, #0
 800c460:	f7f4 fb0a 	bl	8000a78 <__aeabi_dcmpgt>
 800c464:	2800      	cmp	r0, #0
 800c466:	d1e6      	bne.n	800c436 <atan+0x3e>
 800c468:	f04f 3aff 	mov.w	sl, #4294967295
 800c46c:	e02b      	b.n	800c4c6 <atan+0xce>
 800c46e:	f000 f963 	bl	800c738 <fabs>
 800c472:	4bab      	ldr	r3, [pc, #684]	; (800c720 <atan+0x328>)
 800c474:	429e      	cmp	r6, r3
 800c476:	ec55 4b10 	vmov	r4, r5, d0
 800c47a:	f300 80bf 	bgt.w	800c5fc <atan+0x204>
 800c47e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c482:	429e      	cmp	r6, r3
 800c484:	f300 80a0 	bgt.w	800c5c8 <atan+0x1d0>
 800c488:	ee10 2a10 	vmov	r2, s0
 800c48c:	ee10 0a10 	vmov	r0, s0
 800c490:	462b      	mov	r3, r5
 800c492:	4629      	mov	r1, r5
 800c494:	f7f3 feaa 	bl	80001ec <__adddf3>
 800c498:	4ba0      	ldr	r3, [pc, #640]	; (800c71c <atan+0x324>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	f7f3 fea4 	bl	80001e8 <__aeabi_dsub>
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460f      	mov	r7, r1
 800c4a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	f7f3 fe9d 	bl	80001ec <__adddf3>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	4630      	mov	r0, r6
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	f7f4 f977 	bl	80007ac <__aeabi_ddiv>
 800c4be:	f04f 0a00 	mov.w	sl, #0
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	460d      	mov	r5, r1
 800c4c6:	4622      	mov	r2, r4
 800c4c8:	462b      	mov	r3, r5
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	4629      	mov	r1, r5
 800c4ce:	f7f4 f843 	bl	8000558 <__aeabi_dmul>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4680      	mov	r8, r0
 800c4d8:	4689      	mov	r9, r1
 800c4da:	f7f4 f83d 	bl	8000558 <__aeabi_dmul>
 800c4de:	a374      	add	r3, pc, #464	; (adr r3, 800c6b0 <atan+0x2b8>)
 800c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e4:	4606      	mov	r6, r0
 800c4e6:	460f      	mov	r7, r1
 800c4e8:	f7f4 f836 	bl	8000558 <__aeabi_dmul>
 800c4ec:	a372      	add	r3, pc, #456	; (adr r3, 800c6b8 <atan+0x2c0>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	f7f3 fe7b 	bl	80001ec <__adddf3>
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	463b      	mov	r3, r7
 800c4fa:	f7f4 f82d 	bl	8000558 <__aeabi_dmul>
 800c4fe:	a370      	add	r3, pc, #448	; (adr r3, 800c6c0 <atan+0x2c8>)
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	f7f3 fe72 	bl	80001ec <__adddf3>
 800c508:	4632      	mov	r2, r6
 800c50a:	463b      	mov	r3, r7
 800c50c:	f7f4 f824 	bl	8000558 <__aeabi_dmul>
 800c510:	a36d      	add	r3, pc, #436	; (adr r3, 800c6c8 <atan+0x2d0>)
 800c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c516:	f7f3 fe69 	bl	80001ec <__adddf3>
 800c51a:	4632      	mov	r2, r6
 800c51c:	463b      	mov	r3, r7
 800c51e:	f7f4 f81b 	bl	8000558 <__aeabi_dmul>
 800c522:	a36b      	add	r3, pc, #428	; (adr r3, 800c6d0 <atan+0x2d8>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	f7f3 fe60 	bl	80001ec <__adddf3>
 800c52c:	4632      	mov	r2, r6
 800c52e:	463b      	mov	r3, r7
 800c530:	f7f4 f812 	bl	8000558 <__aeabi_dmul>
 800c534:	a368      	add	r3, pc, #416	; (adr r3, 800c6d8 <atan+0x2e0>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f7f3 fe57 	bl	80001ec <__adddf3>
 800c53e:	4642      	mov	r2, r8
 800c540:	464b      	mov	r3, r9
 800c542:	f7f4 f809 	bl	8000558 <__aeabi_dmul>
 800c546:	a366      	add	r3, pc, #408	; (adr r3, 800c6e0 <atan+0x2e8>)
 800c548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54c:	4680      	mov	r8, r0
 800c54e:	4689      	mov	r9, r1
 800c550:	4630      	mov	r0, r6
 800c552:	4639      	mov	r1, r7
 800c554:	f7f4 f800 	bl	8000558 <__aeabi_dmul>
 800c558:	a363      	add	r3, pc, #396	; (adr r3, 800c6e8 <atan+0x2f0>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	f7f3 fe43 	bl	80001e8 <__aeabi_dsub>
 800c562:	4632      	mov	r2, r6
 800c564:	463b      	mov	r3, r7
 800c566:	f7f3 fff7 	bl	8000558 <__aeabi_dmul>
 800c56a:	a361      	add	r3, pc, #388	; (adr r3, 800c6f0 <atan+0x2f8>)
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	f7f3 fe3a 	bl	80001e8 <__aeabi_dsub>
 800c574:	4632      	mov	r2, r6
 800c576:	463b      	mov	r3, r7
 800c578:	f7f3 ffee 	bl	8000558 <__aeabi_dmul>
 800c57c:	a35e      	add	r3, pc, #376	; (adr r3, 800c6f8 <atan+0x300>)
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	f7f3 fe31 	bl	80001e8 <__aeabi_dsub>
 800c586:	4632      	mov	r2, r6
 800c588:	463b      	mov	r3, r7
 800c58a:	f7f3 ffe5 	bl	8000558 <__aeabi_dmul>
 800c58e:	a35c      	add	r3, pc, #368	; (adr r3, 800c700 <atan+0x308>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	f7f3 fe28 	bl	80001e8 <__aeabi_dsub>
 800c598:	4632      	mov	r2, r6
 800c59a:	463b      	mov	r3, r7
 800c59c:	f7f3 ffdc 	bl	8000558 <__aeabi_dmul>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	f7f3 fe20 	bl	80001ec <__adddf3>
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	462b      	mov	r3, r5
 800c5b0:	f7f3 ffd2 	bl	8000558 <__aeabi_dmul>
 800c5b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	d14b      	bne.n	800c656 <atan+0x25e>
 800c5be:	4620      	mov	r0, r4
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	f7f3 fe11 	bl	80001e8 <__aeabi_dsub>
 800c5c6:	e72c      	b.n	800c422 <atan+0x2a>
 800c5c8:	ee10 0a10 	vmov	r0, s0
 800c5cc:	4b53      	ldr	r3, [pc, #332]	; (800c71c <atan+0x324>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	f7f3 fe09 	bl	80001e8 <__aeabi_dsub>
 800c5d6:	4b51      	ldr	r3, [pc, #324]	; (800c71c <atan+0x324>)
 800c5d8:	4606      	mov	r6, r0
 800c5da:	460f      	mov	r7, r1
 800c5dc:	2200      	movs	r2, #0
 800c5de:	4620      	mov	r0, r4
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	f7f3 fe03 	bl	80001ec <__adddf3>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	f7f4 f8dd 	bl	80007ac <__aeabi_ddiv>
 800c5f2:	f04f 0a01 	mov.w	sl, #1
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	460d      	mov	r5, r1
 800c5fa:	e764      	b.n	800c4c6 <atan+0xce>
 800c5fc:	4b49      	ldr	r3, [pc, #292]	; (800c724 <atan+0x32c>)
 800c5fe:	429e      	cmp	r6, r3
 800c600:	da1d      	bge.n	800c63e <atan+0x246>
 800c602:	ee10 0a10 	vmov	r0, s0
 800c606:	4b48      	ldr	r3, [pc, #288]	; (800c728 <atan+0x330>)
 800c608:	2200      	movs	r2, #0
 800c60a:	4629      	mov	r1, r5
 800c60c:	f7f3 fdec 	bl	80001e8 <__aeabi_dsub>
 800c610:	4b45      	ldr	r3, [pc, #276]	; (800c728 <atan+0x330>)
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	2200      	movs	r2, #0
 800c618:	4620      	mov	r0, r4
 800c61a:	4629      	mov	r1, r5
 800c61c:	f7f3 ff9c 	bl	8000558 <__aeabi_dmul>
 800c620:	4b3e      	ldr	r3, [pc, #248]	; (800c71c <atan+0x324>)
 800c622:	2200      	movs	r2, #0
 800c624:	f7f3 fde2 	bl	80001ec <__adddf3>
 800c628:	4602      	mov	r2, r0
 800c62a:	460b      	mov	r3, r1
 800c62c:	4630      	mov	r0, r6
 800c62e:	4639      	mov	r1, r7
 800c630:	f7f4 f8bc 	bl	80007ac <__aeabi_ddiv>
 800c634:	f04f 0a02 	mov.w	sl, #2
 800c638:	4604      	mov	r4, r0
 800c63a:	460d      	mov	r5, r1
 800c63c:	e743      	b.n	800c4c6 <atan+0xce>
 800c63e:	462b      	mov	r3, r5
 800c640:	ee10 2a10 	vmov	r2, s0
 800c644:	4939      	ldr	r1, [pc, #228]	; (800c72c <atan+0x334>)
 800c646:	2000      	movs	r0, #0
 800c648:	f7f4 f8b0 	bl	80007ac <__aeabi_ddiv>
 800c64c:	f04f 0a03 	mov.w	sl, #3
 800c650:	4604      	mov	r4, r0
 800c652:	460d      	mov	r5, r1
 800c654:	e737      	b.n	800c4c6 <atan+0xce>
 800c656:	4b36      	ldr	r3, [pc, #216]	; (800c730 <atan+0x338>)
 800c658:	4e36      	ldr	r6, [pc, #216]	; (800c734 <atan+0x33c>)
 800c65a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c65e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c662:	e9da 2300 	ldrd	r2, r3, [sl]
 800c666:	f7f3 fdbf 	bl	80001e8 <__aeabi_dsub>
 800c66a:	4622      	mov	r2, r4
 800c66c:	462b      	mov	r3, r5
 800c66e:	f7f3 fdbb 	bl	80001e8 <__aeabi_dsub>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c67a:	f7f3 fdb5 	bl	80001e8 <__aeabi_dsub>
 800c67e:	f1bb 0f00 	cmp.w	fp, #0
 800c682:	4604      	mov	r4, r0
 800c684:	460d      	mov	r5, r1
 800c686:	f6bf aed6 	bge.w	800c436 <atan+0x3e>
 800c68a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c68e:	461d      	mov	r5, r3
 800c690:	e6d1      	b.n	800c436 <atan+0x3e>
 800c692:	a51d      	add	r5, pc, #116	; (adr r5, 800c708 <atan+0x310>)
 800c694:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c698:	e6cd      	b.n	800c436 <atan+0x3e>
 800c69a:	bf00      	nop
 800c69c:	f3af 8000 	nop.w
 800c6a0:	54442d18 	.word	0x54442d18
 800c6a4:	bff921fb 	.word	0xbff921fb
 800c6a8:	8800759c 	.word	0x8800759c
 800c6ac:	7e37e43c 	.word	0x7e37e43c
 800c6b0:	e322da11 	.word	0xe322da11
 800c6b4:	3f90ad3a 	.word	0x3f90ad3a
 800c6b8:	24760deb 	.word	0x24760deb
 800c6bc:	3fa97b4b 	.word	0x3fa97b4b
 800c6c0:	a0d03d51 	.word	0xa0d03d51
 800c6c4:	3fb10d66 	.word	0x3fb10d66
 800c6c8:	c54c206e 	.word	0xc54c206e
 800c6cc:	3fb745cd 	.word	0x3fb745cd
 800c6d0:	920083ff 	.word	0x920083ff
 800c6d4:	3fc24924 	.word	0x3fc24924
 800c6d8:	5555550d 	.word	0x5555550d
 800c6dc:	3fd55555 	.word	0x3fd55555
 800c6e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c6e4:	bfa2b444 	.word	0xbfa2b444
 800c6e8:	52defd9a 	.word	0x52defd9a
 800c6ec:	3fadde2d 	.word	0x3fadde2d
 800c6f0:	af749a6d 	.word	0xaf749a6d
 800c6f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c6f8:	fe231671 	.word	0xfe231671
 800c6fc:	3fbc71c6 	.word	0x3fbc71c6
 800c700:	9998ebc4 	.word	0x9998ebc4
 800c704:	3fc99999 	.word	0x3fc99999
 800c708:	54442d18 	.word	0x54442d18
 800c70c:	3ff921fb 	.word	0x3ff921fb
 800c710:	440fffff 	.word	0x440fffff
 800c714:	7ff00000 	.word	0x7ff00000
 800c718:	3fdbffff 	.word	0x3fdbffff
 800c71c:	3ff00000 	.word	0x3ff00000
 800c720:	3ff2ffff 	.word	0x3ff2ffff
 800c724:	40038000 	.word	0x40038000
 800c728:	3ff80000 	.word	0x3ff80000
 800c72c:	bff00000 	.word	0xbff00000
 800c730:	0800cae0 	.word	0x0800cae0
 800c734:	0800cac0 	.word	0x0800cac0

0800c738 <fabs>:
 800c738:	ec51 0b10 	vmov	r0, r1, d0
 800c73c:	ee10 2a10 	vmov	r2, s0
 800c740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c744:	ec43 2b10 	vmov	d0, r2, r3
 800c748:	4770      	bx	lr

0800c74a <sqrt>:
 800c74a:	b538      	push	{r3, r4, r5, lr}
 800c74c:	ed2d 8b02 	vpush	{d8}
 800c750:	ec55 4b10 	vmov	r4, r5, d0
 800c754:	f000 f826 	bl	800c7a4 <__ieee754_sqrt>
 800c758:	4622      	mov	r2, r4
 800c75a:	462b      	mov	r3, r5
 800c75c:	4620      	mov	r0, r4
 800c75e:	4629      	mov	r1, r5
 800c760:	eeb0 8a40 	vmov.f32	s16, s0
 800c764:	eef0 8a60 	vmov.f32	s17, s1
 800c768:	f7f4 f990 	bl	8000a8c <__aeabi_dcmpun>
 800c76c:	b990      	cbnz	r0, 800c794 <sqrt+0x4a>
 800c76e:	2200      	movs	r2, #0
 800c770:	2300      	movs	r3, #0
 800c772:	4620      	mov	r0, r4
 800c774:	4629      	mov	r1, r5
 800c776:	f7f4 f961 	bl	8000a3c <__aeabi_dcmplt>
 800c77a:	b158      	cbz	r0, 800c794 <sqrt+0x4a>
 800c77c:	f7ff fd36 	bl	800c1ec <__errno>
 800c780:	2321      	movs	r3, #33	; 0x21
 800c782:	6003      	str	r3, [r0, #0]
 800c784:	2200      	movs	r2, #0
 800c786:	2300      	movs	r3, #0
 800c788:	4610      	mov	r0, r2
 800c78a:	4619      	mov	r1, r3
 800c78c:	f7f4 f80e 	bl	80007ac <__aeabi_ddiv>
 800c790:	ec41 0b18 	vmov	d8, r0, r1
 800c794:	eeb0 0a48 	vmov.f32	s0, s16
 800c798:	eef0 0a68 	vmov.f32	s1, s17
 800c79c:	ecbd 8b02 	vpop	{d8}
 800c7a0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c7a4 <__ieee754_sqrt>:
 800c7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a8:	ec55 4b10 	vmov	r4, r5, d0
 800c7ac:	4e55      	ldr	r6, [pc, #340]	; (800c904 <__ieee754_sqrt+0x160>)
 800c7ae:	43ae      	bics	r6, r5
 800c7b0:	ee10 0a10 	vmov	r0, s0
 800c7b4:	ee10 3a10 	vmov	r3, s0
 800c7b8:	462a      	mov	r2, r5
 800c7ba:	4629      	mov	r1, r5
 800c7bc:	d110      	bne.n	800c7e0 <__ieee754_sqrt+0x3c>
 800c7be:	ee10 2a10 	vmov	r2, s0
 800c7c2:	462b      	mov	r3, r5
 800c7c4:	f7f3 fec8 	bl	8000558 <__aeabi_dmul>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	f7f3 fd0c 	bl	80001ec <__adddf3>
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	ec45 4b10 	vmov	d0, r4, r5
 800c7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e0:	2d00      	cmp	r5, #0
 800c7e2:	dc10      	bgt.n	800c806 <__ieee754_sqrt+0x62>
 800c7e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c7e8:	4330      	orrs	r0, r6
 800c7ea:	d0f5      	beq.n	800c7d8 <__ieee754_sqrt+0x34>
 800c7ec:	b15d      	cbz	r5, 800c806 <__ieee754_sqrt+0x62>
 800c7ee:	ee10 2a10 	vmov	r2, s0
 800c7f2:	462b      	mov	r3, r5
 800c7f4:	ee10 0a10 	vmov	r0, s0
 800c7f8:	f7f3 fcf6 	bl	80001e8 <__aeabi_dsub>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	f7f3 ffd4 	bl	80007ac <__aeabi_ddiv>
 800c804:	e7e6      	b.n	800c7d4 <__ieee754_sqrt+0x30>
 800c806:	1512      	asrs	r2, r2, #20
 800c808:	d074      	beq.n	800c8f4 <__ieee754_sqrt+0x150>
 800c80a:	07d4      	lsls	r4, r2, #31
 800c80c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c810:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c814:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c818:	bf5e      	ittt	pl
 800c81a:	0fda      	lsrpl	r2, r3, #31
 800c81c:	005b      	lslpl	r3, r3, #1
 800c81e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c822:	2400      	movs	r4, #0
 800c824:	0fda      	lsrs	r2, r3, #31
 800c826:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c82a:	107f      	asrs	r7, r7, #1
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	2516      	movs	r5, #22
 800c830:	4620      	mov	r0, r4
 800c832:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c836:	1886      	adds	r6, r0, r2
 800c838:	428e      	cmp	r6, r1
 800c83a:	bfde      	ittt	le
 800c83c:	1b89      	suble	r1, r1, r6
 800c83e:	18b0      	addle	r0, r6, r2
 800c840:	18a4      	addle	r4, r4, r2
 800c842:	0049      	lsls	r1, r1, #1
 800c844:	3d01      	subs	r5, #1
 800c846:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c84a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c84e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c852:	d1f0      	bne.n	800c836 <__ieee754_sqrt+0x92>
 800c854:	462a      	mov	r2, r5
 800c856:	f04f 0e20 	mov.w	lr, #32
 800c85a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c85e:	4281      	cmp	r1, r0
 800c860:	eb06 0c05 	add.w	ip, r6, r5
 800c864:	dc02      	bgt.n	800c86c <__ieee754_sqrt+0xc8>
 800c866:	d113      	bne.n	800c890 <__ieee754_sqrt+0xec>
 800c868:	459c      	cmp	ip, r3
 800c86a:	d811      	bhi.n	800c890 <__ieee754_sqrt+0xec>
 800c86c:	f1bc 0f00 	cmp.w	ip, #0
 800c870:	eb0c 0506 	add.w	r5, ip, r6
 800c874:	da43      	bge.n	800c8fe <__ieee754_sqrt+0x15a>
 800c876:	2d00      	cmp	r5, #0
 800c878:	db41      	blt.n	800c8fe <__ieee754_sqrt+0x15a>
 800c87a:	f100 0801 	add.w	r8, r0, #1
 800c87e:	1a09      	subs	r1, r1, r0
 800c880:	459c      	cmp	ip, r3
 800c882:	bf88      	it	hi
 800c884:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c888:	eba3 030c 	sub.w	r3, r3, ip
 800c88c:	4432      	add	r2, r6
 800c88e:	4640      	mov	r0, r8
 800c890:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c894:	f1be 0e01 	subs.w	lr, lr, #1
 800c898:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c89c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c8a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c8a4:	d1db      	bne.n	800c85e <__ieee754_sqrt+0xba>
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	d006      	beq.n	800c8b8 <__ieee754_sqrt+0x114>
 800c8aa:	1c50      	adds	r0, r2, #1
 800c8ac:	bf13      	iteet	ne
 800c8ae:	3201      	addne	r2, #1
 800c8b0:	3401      	addeq	r4, #1
 800c8b2:	4672      	moveq	r2, lr
 800c8b4:	f022 0201 	bicne.w	r2, r2, #1
 800c8b8:	1063      	asrs	r3, r4, #1
 800c8ba:	0852      	lsrs	r2, r2, #1
 800c8bc:	07e1      	lsls	r1, r4, #31
 800c8be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c8c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c8c6:	bf48      	it	mi
 800c8c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c8cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c8d0:	4614      	mov	r4, r2
 800c8d2:	e781      	b.n	800c7d8 <__ieee754_sqrt+0x34>
 800c8d4:	0ad9      	lsrs	r1, r3, #11
 800c8d6:	3815      	subs	r0, #21
 800c8d8:	055b      	lsls	r3, r3, #21
 800c8da:	2900      	cmp	r1, #0
 800c8dc:	d0fa      	beq.n	800c8d4 <__ieee754_sqrt+0x130>
 800c8de:	02cd      	lsls	r5, r1, #11
 800c8e0:	d50a      	bpl.n	800c8f8 <__ieee754_sqrt+0x154>
 800c8e2:	f1c2 0420 	rsb	r4, r2, #32
 800c8e6:	fa23 f404 	lsr.w	r4, r3, r4
 800c8ea:	1e55      	subs	r5, r2, #1
 800c8ec:	4093      	lsls	r3, r2
 800c8ee:	4321      	orrs	r1, r4
 800c8f0:	1b42      	subs	r2, r0, r5
 800c8f2:	e78a      	b.n	800c80a <__ieee754_sqrt+0x66>
 800c8f4:	4610      	mov	r0, r2
 800c8f6:	e7f0      	b.n	800c8da <__ieee754_sqrt+0x136>
 800c8f8:	0049      	lsls	r1, r1, #1
 800c8fa:	3201      	adds	r2, #1
 800c8fc:	e7ef      	b.n	800c8de <__ieee754_sqrt+0x13a>
 800c8fe:	4680      	mov	r8, r0
 800c900:	e7bd      	b.n	800c87e <__ieee754_sqrt+0xda>
 800c902:	bf00      	nop
 800c904:	7ff00000 	.word	0x7ff00000

0800c908 <_init>:
 800c908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90a:	bf00      	nop
 800c90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c90e:	bc08      	pop	{r3}
 800c910:	469e      	mov	lr, r3
 800c912:	4770      	bx	lr

0800c914 <_fini>:
 800c914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c916:	bf00      	nop
 800c918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c91a:	bc08      	pop	{r3}
 800c91c:	469e      	mov	lr, r3
 800c91e:	4770      	bx	lr
